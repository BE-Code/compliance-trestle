{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Compliance-trestle (also known as trestle ) \u00a4 Trestle is an ensemble of tools that enable the creation, validation, and governance of documentation artifacts for compliance needs. It leverages NIST's OSCAL as a standard data format for interchange between tools and people, and provides an opinionated approach to OSCAL adoption. Trestle is designed to operate as a CICD pipeline running on top of compliance artifacts in git , to provide transparency for the state of compliance across multiple stakeholders in an environment friendly to developers. Trestle passes the generated artifacts on to tools that orchestrate the enforcement, measurement, and reporting of compliance. It also provides tooling to manage OSCAL documents in a more human-friendly manner. By splitting large OSCAL data structures into smaller and easier to edit sub-structures, creation and maintenance of these artifacts can follow normal git workflows including peer review via pull request, versioning, releases/tagging. Trestle provides three separate but related functions in the compliance space: Manage OSCAL documents to allow editing and manipulation while making sure the schemas are enforced Transform documents from other formats to OSCAL Provide support and governance to author compliance content as markdown and drawio. Trestle provides tooling to help orchestrate the compliance process across a number of dimensions: Help manage OSCAL documents in a more human-friendly manner by expanding the large OSCAL data structures into smaller and easier to edit sub-structures while making sure the schemas are enforced. Transform documents from other formats to OSCAL Provide governance for markdown documents and enforce consistency of format and content based on specified templates Tooling manage authoring and governance of markdown and drawio files withn a repository. Support within trestle to streamline management within a managed git environment. An underlying object model that supports developers interacting with OSCAL artefacts. Why Trestle \u00a4 Compliance suffers from being a complex topic that is hard to articulate simply. It involves complete and accurate execution of multiple procedures across many disciplines (e.g. IT, HR, management) with periodic verification and audit of those procedures against controls. While it is possible to manage the description of controls and how an organisation implements them in ad hoc ways with general tools (spreadsheets, documents), this is hard to maintain for multiple accreditations and, in the IT domain at least, creates a barrier between the compliance efforts and the people doing daily work (DevOps staff). Trestle aims to reduce or remove this barrier by bringing the maintenance of control descriptions into the DevOps domain. The goal is to have changes to the system (for example, updates to configuration management) easily related to the controls impacted, and to enable modification of those controls as required in concert with the system changes. Trestle implicitly provides a core opinionated workflow driven by its pipeline steps to allow standardized interlocks with other compliance tooling platforms. Machine readable compliance format \u00a4 Compliance activities at scale, whether size of estate or number of accreditations, require automation to be successful and repeatable. OSCAL as a standard allows teams to bridge between the \"Governance\" layer and operational tools. By building human managed artifacts into OSCAL, Trestle is not only able to validate the integrity of the artifacts that people generate - it also enables reuse and sharing of artifacts, and furthermore can provide suitable input into tools that automate operational compliance. Supported OSCAL elements and extensions \u00a4 trestle implicitly supports all OSCAL schemas for use within the object model. The development roadmap for trestle includes adding workflow around specific elements / objects that is opinionated. trestle supports OSCAL version 1.0.0 only at this stage. Supported file formats for OSCAL objects. \u00a4 OSCAL supports xml , json and yaml with their metaschema tooling. Trestle natively supports only json and yaml formats at this time. Future roadmap anticipates that support for xml import and upstream references will be enabled. However, it is expected that full support will remain only for json and yaml . Users needing to import XML OSCAL artifacts are recommended to look at NIST's XML to json conversion page here . Python codebase, easy installation via pip \u00a4 Trestle runs on most all python platforms (e.g. Linux, Mac, Windows) and is available on PyPi so it is easily installed via pip. It is under active development and new releases are made available regularly. Development status \u00a4 Compliance trestle is currently beta. The expectation is that in ongoing work there may be un-announced changes that are breaking within the trestle codebase. With the release of NIST's version 1.0.0 of OSCAL we expect that these changes will be decreasing in size as trestle approaches a 1.0.0 release for itself. Contributing to Trestle \u00a4 Our project welcomes external contributions. Please consult contributing to get started. License & Authors \u00a4 If you would like to see the detailed LICENSE click here . Consult contributors for a list of authors and maintainers for the core team. # Copyright (c) 2020 IBM Corp. All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License.","title":"Trestle overview"},{"location":"#compliance-trestle-also-known-as-trestle","text":"Trestle is an ensemble of tools that enable the creation, validation, and governance of documentation artifacts for compliance needs. It leverages NIST's OSCAL as a standard data format for interchange between tools and people, and provides an opinionated approach to OSCAL adoption. Trestle is designed to operate as a CICD pipeline running on top of compliance artifacts in git , to provide transparency for the state of compliance across multiple stakeholders in an environment friendly to developers. Trestle passes the generated artifacts on to tools that orchestrate the enforcement, measurement, and reporting of compliance. It also provides tooling to manage OSCAL documents in a more human-friendly manner. By splitting large OSCAL data structures into smaller and easier to edit sub-structures, creation and maintenance of these artifacts can follow normal git workflows including peer review via pull request, versioning, releases/tagging. Trestle provides three separate but related functions in the compliance space: Manage OSCAL documents to allow editing and manipulation while making sure the schemas are enforced Transform documents from other formats to OSCAL Provide support and governance to author compliance content as markdown and drawio. Trestle provides tooling to help orchestrate the compliance process across a number of dimensions: Help manage OSCAL documents in a more human-friendly manner by expanding the large OSCAL data structures into smaller and easier to edit sub-structures while making sure the schemas are enforced. Transform documents from other formats to OSCAL Provide governance for markdown documents and enforce consistency of format and content based on specified templates Tooling manage authoring and governance of markdown and drawio files withn a repository. Support within trestle to streamline management within a managed git environment. An underlying object model that supports developers interacting with OSCAL artefacts.","title":"Compliance-trestle (also known as trestle)"},{"location":"#why-trestle","text":"Compliance suffers from being a complex topic that is hard to articulate simply. It involves complete and accurate execution of multiple procedures across many disciplines (e.g. IT, HR, management) with periodic verification and audit of those procedures against controls. While it is possible to manage the description of controls and how an organisation implements them in ad hoc ways with general tools (spreadsheets, documents), this is hard to maintain for multiple accreditations and, in the IT domain at least, creates a barrier between the compliance efforts and the people doing daily work (DevOps staff). Trestle aims to reduce or remove this barrier by bringing the maintenance of control descriptions into the DevOps domain. The goal is to have changes to the system (for example, updates to configuration management) easily related to the controls impacted, and to enable modification of those controls as required in concert with the system changes. Trestle implicitly provides a core opinionated workflow driven by its pipeline steps to allow standardized interlocks with other compliance tooling platforms.","title":"Why Trestle"},{"location":"#machine-readable-compliance-format","text":"Compliance activities at scale, whether size of estate or number of accreditations, require automation to be successful and repeatable. OSCAL as a standard allows teams to bridge between the \"Governance\" layer and operational tools. By building human managed artifacts into OSCAL, Trestle is not only able to validate the integrity of the artifacts that people generate - it also enables reuse and sharing of artifacts, and furthermore can provide suitable input into tools that automate operational compliance.","title":"Machine readable compliance format"},{"location":"#supported-oscal-elements-and-extensions","text":"trestle implicitly supports all OSCAL schemas for use within the object model. The development roadmap for trestle includes adding workflow around specific elements / objects that is opinionated. trestle supports OSCAL version 1.0.0 only at this stage.","title":"Supported OSCAL elements and extensions"},{"location":"#supported-file-formats-for-oscal-objects","text":"OSCAL supports xml , json and yaml with their metaschema tooling. Trestle natively supports only json and yaml formats at this time. Future roadmap anticipates that support for xml import and upstream references will be enabled. However, it is expected that full support will remain only for json and yaml . Users needing to import XML OSCAL artifacts are recommended to look at NIST's XML to json conversion page here .","title":"Supported file formats for OSCAL objects."},{"location":"#python-codebase-easy-installation-via-pip","text":"Trestle runs on most all python platforms (e.g. Linux, Mac, Windows) and is available on PyPi so it is easily installed via pip. It is under active development and new releases are made available regularly.","title":"Python codebase, easy installation via pip"},{"location":"#development-status","text":"Compliance trestle is currently beta. The expectation is that in ongoing work there may be un-announced changes that are breaking within the trestle codebase. With the release of NIST's version 1.0.0 of OSCAL we expect that these changes will be decreasing in size as trestle approaches a 1.0.0 release for itself.","title":"Development status"},{"location":"#contributing-to-trestle","text":"Our project welcomes external contributions. Please consult contributing to get started.","title":"Contributing to Trestle"},{"location":"#license-authors","text":"If you would like to see the detailed LICENSE click here . Consult contributors for a list of authors and maintainers for the core team. # Copyright (c) 2020 IBM Corp. All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License.","title":"License &amp; Authors"},{"location":"cli/","text":"trestle CLI Overview and OSCAL Usecases \u00a4 The trestle CLI has three primary use cases: Serve as tooling to generate and manipulate OSCAL files directly by an end user. The objective is to reduce the complexity of creating and editing workflows. Example commands are: trestle import , trestle create , trestle add , trestle split , trestle merge . Act as an automation tool that, by design, can be an integral part of a CI/CD pipeline e.g. trestle validate , trestle tasks . Allow governance of markdown documents so they conform to specific style or structure requirements. To support each of these use cases trestle creates an opinionated directory structure to manage governed documents. Opinionated directory structure \u00a4 Trestle relies on an opinionated directory structure, similar to git , go , or auditree , to manage the workflow. Most trestle commands are restricted to working within an initialized directory tree. The directory structure setup by trestle has three major elements: A .trestle hidden folder. A dist folder. Folders for each of the OSCAL schemas. The outline of the schema is below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 system-security-plans \u2502 \u251c\u2500\u2500 assessment-plans \u2502 \u251c\u2500\u2500 assessment-results \u2502 \u2514\u2500\u2500 plan-of-action-and-milestones \u251c\u2500\u2500 catalogs \u251c\u2500\u2500 profiles \u251c\u2500\u2500 component-definitions \u251c\u2500\u2500 system-security-plans \u251c\u2500\u2500 assessment-plans \u251c\u2500\u2500 assessment-results \u2514\u2500\u2500 plan-of-action-and-milestones .trestle directory is a special directory containing various trestle artefacts to help run various other commands. Examples include configuration files, caches and templates. The bulk of the folder structure is used to represent each of the top level schemas or top level models such as catalogs and profiles . For each of these directories the following root structure is maintained: \u251c\u2500\u2500 .trestle \u2514\u2500\u2500 TOP_LEVEL_MODEL_PLURAL \u2514\u2500\u2500 NAME_OF_MODEL_INSTANCE \u2514\u2500\u2500 TOP_LEVEL_MODEL_NAME.{json,yaml,yml} which appears, for a catalog a user decides is titled nist-800-53, as: \u251c\u2500\u2500 .trestle \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist-800-53 \u2514\u2500\u2500 catalog.json dist directory will contain the assembled version of the models located on the source model directories (at the project root level) which are: catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results and plan-of-action-and-milestones . The assumption is that each of the OSCAL files within this folder is ready to be read by external 3rd party tools. Support for subdivided document structures \u00a4 The files constructed by OSCAL can run into the tens of thousands of lines of yaml or formatted json. At this size the files become completely unmanageable for users. To combat this, trestle can trestle split a file into many smaller files and later merge those split files together. Directory structures such as the one below can represent OSCAL document structures. Users are strongly encourage to rely on split and merge to code these structures. Users can query the contents of files using trestle describe , and probe the contents more deeply using it in combination with element paths. . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json \u251c\u2500\u2500 metadata \u2502 \u251c\u2500\u2500 revision-history \u2502 \u2502 \u251c\u2500\u2500 00000__revision-history.json \u2502 \u2502 \u251c\u2500\u2500 00001__revision-history.json \u2502 \u2502 \u2514\u2500\u2500 00002__revision-history.json \u2502 \u2514\u2500\u2500 responsible-parties \u2502 \u251c\u2500\u2500 creator__responsible-party.json \u2502 \u2514\u2500\u2500 contact__responsible-party.json \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... Specifing attributes / elements within trestle commands. \u00a4 OSCAL models are rich and contain multiple nested data structures. Given this, a mechanism is required to address elements / attributes within an oscal object. This accessing method is called 'element path' and is similar to jsonPath . Commands provide element path by a -e argument where available, e.g. trestle split -f catalog.json -e 'catalog.metadata.*'. This path is used whenever specifying an attribute or model, rather than exposing trestles underlying object model name. Users can refer to NIST's json outline to understand object names in trestle. Rules for element path \u00a4 Element path is an expression of the attribute names, in json form , concatenated by a period ( . ). E.g. The metadata in a catalog is referred to as catalog.metadata Element paths are relative to the file. e.g. For metadata.json roles would be referred to as metadata.roles , from the catalog file that would be catalog.metadata.roles Arrays can be handled by a wild card * or a numerical index for a specific index. catalog.groups.* to refer to each oscal group catalog.groups.*.controls.* to refer to 'for each control under a top level group' For NIST 800-53 catalog.groups.0.controls.0. On *nix platforms if using the wildcard the element path argument should be wrapped in quotes to prevent problems with the shell interpreting the wild card before trestle can When dealing with an array based object, the array syntax may be skipped when passing a model e.g. a control could be catalog.controls.control or catalog.groups.controls.control This syntax is required as OSCAL, across the schema, has conflicting element definitions. A note for software developers using trestle. \u00a4 Trestle provides utilities for converting from element path to trestle's python object model. The (slightly simplified) model is: Class attributes are converted from dash-case to dash_case (aka snake_case) Class names are converted from dash-case to DashCase (aka CamelCase) trestle init \u00a4 This command will create a trestle project in the current directory with the necessary directory structure and trestle artefacts. For example, if we run trestle init in a directory, it will create the directory structure below for different artefacts: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 system-security-plans \u2502 \u251c\u2500\u2500 assessment-plans \u2502 \u251c\u2500\u2500 assessment-results \u2502 \u2514\u2500\u2500 plan-of-action-and-milestones \u251c\u2500\u2500 catalogs \u251c\u2500\u2500 profiles \u251c\u2500\u2500 component-definitions \u251c\u2500\u2500 system-security-plans \u251c\u2500\u2500 assessment-plans \u251c\u2500\u2500 assessment-results \u2514\u2500\u2500 plan-of-action-and-milestones .trestle directory is a special directory containing various trestle artefacts to help run various other commands. dist directory will contain the merged or assembled version of the models located on the source model directories (at the project root level) which are: catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results and plan-of-action-and-milestones . Notice that trestle is a highly opinionated tool and, therefore, the names of the files and directories that are created by any of the trestle commands and subcommands MUST NOT be changed manually. trestle create \u00a4 This command will create a bare-bones sample file for one of the OSCAL models. For example, trestle create catalog -o nist800-53 will create a sample catalog file, catalog.json in the catalog subdirectory, nist800-53 as shown below: . \u251c\u2500\u2500 .trestle \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u2514\u2500\u2500 catalog.json ... The following subcommands are currently supported: trestle create catalog : creates a directory structure containing a sample OSCAL catalog model under the catalogs folder. trestle create profile : creates a directory structure containing a sample OSCAL profile model under the profiles folder. trestle create component-definition : creates a directory structure containing a sample component-definition model under the component-definitions folder. trestle create system-security-plan : creates a directory structure containing a sample system-security-plan model under the system-security-plans folder. trestle create assessment-plan : creates a directory structure containing a sample assessment-plan under the assessment-plans folder. trestle create assessment-result : creates a directory structure containing a sample assessment-result under the assessment-results folder. trestle create plan-of-action-and-milestone : creates a directory structure containing a sample plan-of-action-and-milestone under the plan-of-action-and-milestones folder. The following options are supported: -o or --output : specifies the name/alias of a model. It is used as the prefix for the output filename under the dist directory and for naming the source subdirectories under catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results or plan-of-action-and-milestones . The user can edit the parts of the generated OSCAL model by modifying the sample content in those directories. The initial level of decomposition of each type of model varies according to the model type. This default or reference decomposition behaviour can be changed by modifying the rules in a .trestle/config file . These rules can be written as a sequence of trestle split commands. Passing -iof or --include-optional-fields will make trestle create generate a richer model containing all optional fields until finding recursion in the model (e.g controls within control). trestle import \u00a4 This command allows users to import existing OSCAL files so that they can be managed using trestle. For example trestle import -f /local_dir/existing_catalog.json -o my_existing_catalog will import existing_catalog.json into a new folder under catalogs as shown below: . \u251c\u2500\u2500 .trestle \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 my_existing_catalog \u2514\u2500\u2500 catalog.json ... The following options are supported: -f or --file : specifies the path of an existing OSCAL file or URL to a remote file. -o or --output : specifies the name/alias of a model. It is used as the prefix for the output filename under the dist directory and for naming the source subdirectories under catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results or plan-of-action-and-milestones . The --file option may be an absolute or relative path, and it may be a URL. For details on allowed formats please see the documentation for the href command. The file must be imported from outside the current trestle directory or an error will result. The import subcommand can determine the type of the model that is to be imported by the contents of the file. But the file name must end with an allowed json or yaml extension: .json, .yaml, .yml During the import process the file must pass the validate test described below for the command, validate . If the file does not pass validation a warning will be given describing the nature of the problem and the import will fail. Once a file has been imported it can be split into a rich tree of sub-components as shown at the top of this document. But the file must be imported first. trestle replicate \u00a4 This command allows users to replicate a certain OSCAL model (file and directory structure). For example trestle replicate catalog -i cat1 -o cat11 will replicate the Catalog cat1 into cat11 directory. It can also regenerate all the UUIDs as required. trestle split \u00a4 This command allows users to further decompose a trestle model into additional subcomponents. The following options are currently supported: -f or --file : this is optional and specifies the file path of the json/yaml file containing the elements that will be split. -e or --elements : specifies the model subcomponent element(s) (JSON/YAML property path) that is/are going to be split. Multiple elements can be specified at once using a comma-separated value, e.g -e 'catalog.metadata,catalog.groups' . Make sure to include the quotes that enclose the comma-separated paths. If the element is of JSON/YAML type array list and you want trestle to create a separate subcomponent file per array item, the element needs to be suffixed with .* , e.g. -e 'catalog.groups.*' . If the suffix is not specified, split will place all array items in only one separate subcomponent file, e.g. 'groups.json' . Again, make sure to include the quotes around the elements. If you just want to split a file into all its constituent parts and the file does not contain a simple list of objects, you can still use * and the file will be split into all its non-trivial elements. Thus if you split a catalog with -e catalog.* the result will be a new directory, catalog , containing files representing the large items, back-matter.json, groups.json and metadata.json , but there will still be a catalog.json file containing just the catalog's uuid . Small items such as strings and dates cannot be split off and will remain in the original model file that is being split. Here are some examples. Starting with a single catalog file, my_catalog/catalog.json , if we do trestle split -f catalog.json -e 'catalog.*' we end up with: catalogs \u2517 my_catalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json If I then split roles out of metadata as a single file containing a list of roles, trestle split -f catalog/metadata.json -e 'metadata.roles' I would end up with: catalogs \u2517 my_catalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 metadata \u2503 \u2503 \u2503 \u2517 roles.json \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json If instead I had specified -e 'metadata.roles.*' I would get: my_catalog \u2523 catalog \u2503 \u2523 metadata \u2503 \u2503 \u2517 roles \u2503 \u2503 \u2503 \u2523 00000__role.json \u2503 \u2503 \u2503 \u2517 00001__role.json \u2503 \u2523 back-matter.json \u2503 \u2523 groups.json \u2503 \u2517 metadata.json \u2517 catalog.json You can see there is no roles.json file anymore and instead there is a subdirectory, roles containing a list of files, one for each role . If the -f or --file option is not specified, the file to split will be determined from the elements specified, in the context of the current working directory. The current directory must be within a specific model (e.g. catalog or profile ), and the element paths must either be absolute (e.g. catalog.metadata.roles ) or relative to the current working directory. For example, if you are in catalogs/mycat/catalog/groups and you want to split the file 00000__group.json , you must use -f to specify the filename, and the element path can either be absolute, as catalog.group.* , or you can set the current working directory to where the file is and use element path group.* . This makes it easier to specify splits when deep in a directory structure. Every subdirectory in a trestle directory model should have a corresponding .json or .yaml file with the same name, except when that subdirectory corresponds to a list of items, such as catalog.groups . When those subcomponents are split/expanded each file or subdirectory under them represents an item of the collection. Because of that, if a corresponding groups.json | groups.yaml file were to exist, its contents would just be an empty representation of that collection and the user would need to be careful never to edit that file. Therefore, we decided not to create that corresponding file in those cases. Following the same logic, another exception is when all the fields from a .json | .yaml file are split, leaving the original file as an empty object. In that case, the file would be deleted as well. To inspect a file to see what elements can be split from it, use the describe command described below. It is also useful for inspection of files created by the split operation. trestle merge \u00a4 The trestle merge command is the reversal of trestle split . This command allows users to reverse the decomposition of a trestle model by aggregating subcomponents scattered across multiple files or directories into the parent JSON/YAML file. To merge a model, you have to first change working directory to the root model component directory that you want to merge a sub-component model into. The following option is required: -e or --elements : specifies the properties (JSON/YAML path) that will be merged, relative to the current working directory. This must contain at least 2 elements, where the last element is the model/sub-component to be merged into the second from last component. For example, in the command trestle merge -e 'catalog.metadata' , executed in the same directory where catalog.json or the split catalog directory exists, the property metadata from metadata.json or metadata.yaml would be moved/merged into catalog.json . If the metadata model has already been split into smaller sub-component models previously, those smaller sub-components are first recusively merged into metadata , before merging metadata subcomponent into catalog.json . To specify merging every sub-component split from a component, .* can be used. For example, trestle merge -e 'catalog.*' command, issued from the directory where catalog.json or catalog directory exists, will merge every single sub-component of that catalog back into the catalog.json . trestle describe \u00a4 This command lets users inspect model files to explore contents using an optional element path. The command can work well in concert with split to show what each file contains, and probe within the contents to determine sub-components that can be extracted as separate files. Unlike split, describe only describes the contents of a single item, so the element path may not contain wildcards ( * ) or commas. For example, if a catalog file has been imported to catalogs/my_catalog/catalog.json then the commmand, trestle describe -f catalog.json might yield: Model file catalog.json is of type catalog.Catalog and contains: uuid: 613fca2d-704a-42e7-8e2b-b206fb92b456 metadata: common.Metadata params: None controls: None groups: list of 20 items of type catalog.Group back_matter: common.BackMatter Note that contents are listed even when they are empty (and therefore optional) so the full potential contents can be seen. Also note that if an item corresponds to a list of elements, the number and type of elements is provided. Finally, if an item is a simple string such as id , uuid or title , the string is shown directly up to a maximum of 100 characters. If the string is clipped it will be indicated by [truncated] at the end of the string. An element path can be specified to probe the contents, as in trestle describe -f catalog.json -e 'catalog.metadata.roles' . A possible response is: Model file catalog.json at element path catalog.metadata.roles is a list of 2 items of type common.Role You can also query individual elements, and elements of an element, e.g. trestle describe -f catalog.json -e 'catalog.groups.5.controls.3' Model file catalog.json at element path catalog.groups.5.controls.3 is of type catalog.Control and contains: id: cp-4 class_: SP800-53 title: Contingency Plan Testing params: list of 2 items of type common.Parameter props: list of 2 items of type common.Property links: list of 14 items of type common.Link parts: list of 2 items of type common.Part controls: list of 5 items of type catalog.Control (Note that the numbering starts at 0, so the .3 corresponds to the 4th element.) In all output from describe the type of the item shown corresponds to the python file and class of the corresponding OSCAL model in trestle. If you split items off a model so they end up in a subdirectory, the original file is referred to as a \"stripped\" model, with parts of it stripped off and only some elements remaining. For example, if you do trestle split -f catalog.json -e 'catalog.metadata' it will split off metadata from the original catalog.json file and place it in catalog/metadata.json . If you then do trestle describe -f catalog.json on the new file, it will say something like: Model file catalog.json is of type stripped.Catalog and contains: uuid: 613fca2d-704a-42e7-8e2b-b206fb92b456 params: None controls: None groups: list of 20 items of type catalog.Group back_matter: common.BackMatter Note that the type of the file is now stripped.Catalog and it no longer contains metadata . Even though metadata is no longer in the original .json file, trestle is still aware it is present in the model since it is properly placed as its own file in the subdirectory, catalog . trestle partial-object-validate \u00a4 OSCAL objects are extremely large. Some systems may only be able to produce partial OSCAL objects. For example the tanium-to-oscal task produces the results attribute of an assessment-results object. trestle partial-object-validate allows the validation of any sub-element/attribute using element path. Using the example above trestle partial-object-validate -f results.json -e asssesment-results.results . The file is not required to be in the trestle project or required to be a specific file name. Example valid element-paths \u00a4 All element paths must be absolute e.g.: catalog.metadata catalog catalog.groups catalog.groups.group.controls.control.controls.control Remembering in the end you only care about the end type. So in this scenario catalog.groups.group.controls.control.controls.control is equivalent to catalog.controls.control . trestle href \u00a4 This command changes the href of an Import in a profile and is needed when generating an SSP (system security plan) with the author tool, ssp-generate . The Imports in a profile are used to load associated catalogs of controls and profiles, and must be available at the corresponding href uri. If an imported catalog is in the trestle directory then the href should be changed with a command of the form: trestle href -n my_profile -hr trestle://catalogs/my_catalog/catalog.json Similarly, if the item imported is a profile, a corresponding href should point to a json file in the profiles directory. Note that catalogs or profiles in the trestle directory are indicated by the trestle:// prefix, followed by the path from the trestle root directory to the actual catalog file. The profile itself, which is having its imports modified, is just indicated by its name with the -n option. If the profile has more than one import, you can display the corresponding hrefs with: trestle href -n my_profile This will give a numbered list of the hrefs. You can then change them individually by providing the corresponding item number: trestle href -n my_profile -i 1 -hr trestle://catalogs/my_catalog/catalog.json This will change the href indexed as 1 when the list was displayed. The href's are indexed starting from 0. The trestle href command can also be used to change the value back to the intended one prior to distribution of the profile. The provided href can be of form trestle:// , https:// , sftp:// , or file:/// . If file:/// is used, the path provided must be absolute - and on Windows it must include the drive letter followed by a slash. The only time a relative path is allowed is with the trestle:// heading. A username and password may be embedded in the url for https:// , and a CA certificate path will be searched from environment variables REQUESTS_CA_BUNDLE and CURL_CA_BUNDLE in that order. Authorization for sftp:// access relies on the user's private key being either active via ssh-agent or supplied via the environment variable SSH_KEY . In the latter case it must not require a passphrase prompt. trestle assemble \u00a4 This command assembles all contents (files and directories) representing a specific model into a single OSCAL file located under dist folder. For example, $TRESTLE_BASEDIR$ trestle assemble catalog -i nist800-53 will traverse the catalogs/nist800-53 directory and its children and combine all data into a OSCAL file that will be written to dist/catalogs/nist800-53.json . Note that the parts of catalog nist800-53 can be written in either YAML/JSON/XML (e.g. based on the file extension), however, the output will be generated as YAML/JSON/XML as desired. Trestle will infer the content type from the file extension and create the model representation appropriately in memory and then output in the desired format. Trestle assemble will also validate content as it assembles the files and make sure the contents are syntactically correct. trestle add \u00a4 This command allows users to add an OSCAL model to a subcomponent in source directory structure of the model. For example, $TRESTLE_BASEDIR/catalogs/nist800-53$ trestle add -f ./catalog.json -e catalog.metadata.roles will add the following property under the metadata property for a catalog that will be written to the appropriate file under catalogs/nist800-53 directory: \"roles\": [ { \"id\": \"REPLACE_ME\", \"title\": \"REPLACE_ME\" } Default values for mandatory datatypes will be like below. All UUID's will be populated by default whether or not they are mandatory. - DateTime: <Current date-time> - Boolean: False - Integer: 0 - String: REPLACE_ME - Float/Double: 0.00 - Id field: Auto generated UUID Passing -iof or --include-optional-fields will make trestle add generate a richer model containing all optional fields until finding recursion in the model (e.g controls within control). trestle remove \u00a4 The trestle remove command is the reversal of trestle add . trestle validate \u00a4 Trestle validate is designed to perform a function to ensure integrity of a set of OSCAL files. This can be as simple as a schema validation within a single file or as complex as ensuring the integrity of a 'stack' of OSCAL files including potentially remote system state. Trestle validate the form `trestle validate -f FILE -i SPECIFIC_ITEM_OR_VALUE Trestle validates files according to a number of criteria, and it can operate on one or more files specified in different ways. validate returns a non-zero return code if there is any validation problem detected in a file. The current list of validation modes that get checked internally are: Mode Purpose duplicates Identify if duplicate uuid's are present oscal_version Confirm that the oscal version of the file is supported refs Confirm that all references in responsible parties are found in roles In addition to validating a single file you can validate all files of a given type with the -t option: trestle validate -t catalog And you can validate all models with the -a option: trestle validate -a Finally, you can validate a model based on its name using the -n option, along with the type of the model: trestle validate -t catalog -n my_catalog Note that when you Import a file it will perform a full validation on it first, and if it does not pass validation the file cannot be imported. trestle tasks \u00a4 Open Shift Compliance Operator and Tanium are supported as 3rd party tools. trestle task osco-to-oscal \u00a4 The trestle task osco-to-oscal command facilitates transformation of OpenShift Compliance Operator (OSCO) scan results .yaml files into OSCAL partial results .json files. Specify required config parameters to indicate the location of the input and the output. Specify optional config parameters to indicate the name of the oscal-metadata.yaml file, if any, and whether overwriting of existing output is permitted. Example command invocation: $TRESTLE_BASEDIR$ trestle task osco-to-oscal -c /home/user/task.config Example config: /home/user/task.config [task.osco-to-oscal] input-dir = /home/user/git/evidence/osco/input output-dir = /home/user/git/evidence/oscal/output oscal-metadata = oscal-metadata.yaml output-overwrite = true input Example input directory contents listing: /home/user/git/evidence/osco/input -rw-rw-r--. 1 user user 3832 Feb 2 09:36 oscal-metadata.yaml -rw-rw-r--. 1 user user 49132 Feb 2 06:12 ssg-ocp4-ds-cis-111.222.333.444-pod.yaml -rw-rw-r--. 1 user user 52747 Feb 2 06:41 ssg-ocp4-ds-cis-111.222.333.555-pod.yaml Example input OSCO scan result file contents (snippet): ssg-ocp4-ds-cis-111.222.333.444-pod.yaml display sample apiVersion: v1 data: exit-code: \"2\" results: | <?xml version=\"1.0\" encoding=\"UTF-8\"?> <TestResult xmlns=\"http://checklists.nist.gov/xccdf/1.2\" id=\"xccdf_org.open-scap_testresult_xccdf_org.ssgproject.content_profile_cis\" start-time=\"2020-08-03T02:26:26+00:00\" end-time=\"2020-08-03T02:26:26+00:00\" version=\"0.1.52\" test-system=\"cpe:/a:redhat:openscap:1.3.3\"> <benchmark href=\"/content/ssg-ocp4-ds.xml\" id=\"xccdf_org.ssgproject.content_benchmark_OCP-4\"/> <title>OSCAP Scan Result</title> <profile idref=\"xccdf_org.ssgproject.content_profile_cis\"/> <target>kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp</target> <target-facts> <fact name=\"urn:xccdf:fact:identifier\" type=\"string\">chroot:///host</fact> <fact name=\"urn:xccdf:fact:scanner:name\" type=\"string\">OpenSCAP</fact> <fact name=\"urn:xccdf:fact:scanner:version\" type=\"string\">1.3.3</fact> </target-facts> <target-id-ref system=\"http://scap.nist.gov/schema/asset-identification/1.1\" name=\"asset0\" href=\"\"/> <platform idref=\"cpe:/a:redhat:openshift_container_platform:4.1\"/> <platform idref=\"cpe:/a:machine\"/> <set-value idref=\"xccdf_org.ssgproject.content_value_ocp_data_root\">/kubernetes-api-resources</set-value> <set-value idref=\"xccdf_org.ssgproject.content_value_var_kube_authorization_mode\">Webhook</set-value> <set-value idref=\"xccdf_org.ssgproject.content_value_var_streaming_connection_timeouts\">5m</set-value> <rule-result idref=\"xccdf_org.ssgproject.content_rule_ocp_idp_no_htpasswd\" time=\"2020-08-03T02:26:26+00:00\" severity=\"medium\" weight=\"1.000000\"> <result>notselected</result> <ident system=\"https://nvd.nist.gov/cce/index.cfm\">CCE-84209-6</ident> </rule-result> <rule-result idref=\"xccdf_org.ssgproject.content_rule_accounts_restrict_service_account_tokens\" time=\"2020-08-03T02:26:26+00:00\" severity=\"medium\" weight=\"1.000000\"> <result>notchecked</result> <message severity=\"info\">No candidate or applicable check found.</message> </rule-result> <rule-result idref=\"xccdf_org.ssgproject.content_rule_accounts_unique_service_account\" time=\"2020-08-03T02:26:26+00:00\" severity=\"medium\" weight=\"1.000000\"> <result>notchecked</result> <message severity=\"info\">No candidate or applicable check found.</message> </rule-result> ... </TestResult> kind: ConfigMap metadata: annotations: compliance-remediations/processed: \"\" compliance.openshift.io/scan-error-msg: \"\" compliance.openshift.io/scan-result: NON-COMPLIANT openscap-scan-result/node: 111.222.333.444 creationTimestamp: \"2020-08-03T02:26:34Z\" labels: compliance-scan: ssg-ocp4-ds-cis name: ssg-ocp4-ds-cis-111.222.333.444-pod namespace: openshift-compliance resourceVersion: \"22693328\" selfLink: /api/v1/namespaces/openshift-compliance/configmaps/ssg-ocp4-ds-cis-111.222.333.444-pod uid: 1da3ea81-0a25-4512-ad86-7ac360246b5d Example input OSCAL metadata file contents: oscal-metadata.yaml display sample ssg-ocp4-ds-cis-111.222.333.444-pod: locker: https://github.mycorp.com/degenaro/evidence-locker namespace: xccdf benchmark: CIS Kubernetes Benchmark subject-references: component: uuid-ref: 56666738-0f9a-4e38-9aac-c0fad00a5821 type: component title: Red Hat OpenShift Kubernetes inventory-item: uuid-ref: 46aADFAC-A1fd-4Cf0-a6aA-d1AfAb3e0d3e type: inventory-item title: Pod properties: target: kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp target-ip: 111.222.333.444 cluster-name: ROKS-OpenSCAP-1 cluster-type: openshift cluster-region: us-south ssg-rhel7-ds-cis-111.222.333.444-pod: locker: https://github.mycorp.com/degenaro/evidence-locker namespace: xccdf benchmark: CIS Kubernetes Benchmark subject-references: component: uuid-ref: 89cfe7a7-ce6b-4699-aa7b-2f5739c72001 type: component title: RedHat Enterprise Linux 7.8 inventory-item: uuid-ref: 46aADFAC-A1fd-4Cf0-a6aA-d1AfAb3e0d3e type: inventory-item title: VM properties: target: kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp target-ip: 111.222.333.444 cluster-name: ROKS-OpenSCAP-1 cluster-type: openshift cluster-region: us-south metadata format The oscal_metadata.yaml file comprises one or more mappings. Below is shown the format of a single mapping. The items in angle brackets are to be replaced with desired values for augmenting the produced OSCAL. The mapping whose matches the [metadata][name] in the evidence for the corresponding embedded XML, if any, will be used for augmenting the produced OSCAL. <name>: locker: <locker> namespace: <namespace> benchmark: <benchmark> subject-references: component: uuid-ref: <uuid-ref-component> type: <component-type> title: <component-title> inventory-item: uuid-ref: <uuid-ref-inventory-item> type: <inventory-item-type> title: <inventory-item-title> properties: target: <target> cluster-name: <cluster-name> cluster-type: <cluster-type> cluster-region: <cluster-region> output Example output directory contents listing: /home/user/git/evidence/oscal/output -rw-rw-r--. 1 user user 49132 Feb 3 10:59 ssg-ocp4-ds-cis-111.222.333.444-pod.json -rw-rw-r--. 1 user user 52747 Feb 3 10:59 ssg-ocp4-ds-cis-111.222.333.555-pod.json Example output OSCAL Observations file contents (snippet): ssg-ocp4-ds-cis-111.222.333.444-pod.json display sample { \"observations\": [ { \"uuid\": \"56666738-0f9a-4e38-9aac-c0fad00a5821\", \"title\": \"xccdf_org.ssgproject.content_rule_ocp_idp_no_htpasswd\", \"description\": \"xccdf_org.ssgproject.content_rule_ocp_idp_no_htpasswd\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://osco\", \"class\": \"source\", \"value\": \"CIS Kubernetes Benchmark\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"56666738-0f9a-4e38-9aac-c0fad00a5821\", \"type\": \"component\", \"title\": \"Red Hat OpenShift Kubernetes\" }, { \"uuid-ref\": \"46aADFAC-A1fd-4Cf0-a6aA-d1AfAb3e0d3e\", \"type\": \"inventory-item\", \"title\": \"Pod\", \"props\": [ { \"name\": \"target\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp\" }, { \"name\": \"target-ip\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"111.222.333.444\" }, { \"name\": \"cluster-name\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"ROKS-OpenSCAP-1\" }, { \"name\": \"cluster-type\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"openshift\" }, { \"name\": \"cluster-region\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"us-south\" } ] } ], \"relevant-evidence\": [ { \"href\": \"https://github.mycorp.com/degenaro/evidence-locker\", \"description\": \"Evidence location.\", \"props\": [ { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"class\": \"id\", \"value\": \"xccdf_org.ssgproject.content_rule_ocp_idp_no_htpasswd\" }, { \"name\": \"time\", \"ns\": \"dns://xccdf\", \"class\": \"timestamp\", \"value\": \"2020-08-03T02:26:26+00:00\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"class\": \"result\", \"value\": \"notselected\" } ] } ] }, ... trestle task tanium-to-oscal \u00a4 The trestle task tanium-to-oscal command facilitates transformation of Tanuim reports, each input file comprising individual lines consumable as json , into OSCAL partial results .json files. Specify required config parameters to indicate the location of the input and the output. Specify optional config parameter output-overwrite to indicate whether overwriting of existing output is permitted. Specify optional config parameter timestamp as ISO 8601 formated string (e.g., 2021-02-24T19:31:13+00:00) to override the timestamp attached to each Observation. Example command invocation: $TRESTLE_BASEDIR$ trestle task tanium-to-oscal -c /home/user/task.config Example config: /home/user/task.config [task.tanium-to-oscal] input-dir = /home/user/git/compliance/tanium/input output-dir = /home/user/git/compliance/oscal/output output-overwrite = true input Example input directory contents listing: /home/user/git/compliance/tanium/input -rw-rw-r--. 1 degenaro degenaro 1830 Mar 7 08:23 Tanium.comply-nist-results Tanium.comply-nist-results display sample {\"IP Address\":\"fe80::3cd5:564b:940e:49ab\",\"Computer Name\":\"cmp-wn-2106.demo.tanium.local\",\"Comply - JovalCM Results[c2dc8749]\":[{\"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\",\"Benchmark Version\":\"1.5.0.1\",\"Profile\":\"Windows 10 - NIST 800-53\",\"ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\",\"Result\":\"pass\",\"Custom ID\":\"800-53: IA-5\",\"Version\":\"version: 1\"}],\"Count\":\"1\",\"Age\":\"600\"} {\"IP Address\":\"10.8.69.11\",\"Computer Name\":\"\",\"Comply - JovalCM Results[c2dc8749]\":[{\"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\",\"Benchmark Version\":\"1.5.0.1\",\"Profile\":\"Windows 10 - NIST 800-53\",\"ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.2_L1_Ensure_Maximum_password_age_is_set_to_60_or_fewer_days_but_not_0\",\"Result\":\"pass\",\"Custom ID\":\"800-53: IA-5\",\"Version\":\"version: 1\"}],\"Count\":\"1\",\"Age\":\"600\"} {\"IP Address\":\"10.8.69.11\",\"Computer Name\":\"cmp-wn-2106.demo.tanium.local\",\"Comply - JovalCM Results[c2dc8749]\":[{\"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\",\"Benchmark Version\":\"1.5.0.1\",\"Profile\":\"Windows 10 - NIST 800-53\",\"ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.3_L1_Ensure_Minimum_password_age_is_set_to_1_or_more_days\",\"Result\":\"fail\",\"Custom ID\":\"800-53: IA-5\",\"Version\":\"version: 1\"}],\"Count\":\"1\",\"Age\":\"600\"} {\"IP Address\":\"10.8.69.11\",\"Computer Name\":\"cmp-wn-2106.demo.tanium.local\",\"Comply - JovalCM Results[c2dc8749]\":[{\"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\",\"Benchmark Version\":\"1.5.0.1\",\"Profile\":\"Windows 10 - NIST 800-53\",\"ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.4_L1_Ensure_Minimum_password_length_is_set_to_14_or_more_characters\",\"Result\":\"pass\",\"Custom ID\":\"800-53: IA-5\",\"Version\":\"version: 1\"}],\"Count\":\"1\",\"Age\":\"600\"} output Example output directory contents listing: /home/user/git/compliance/oscal/output -rw-rw-r--. 1 degenaro degenaro 6479 Mar 7 08:25 Tanium.oscal.json Tanium.oscal.json display sample { \"results\": [ { \"uuid\": \"0ed0791e-5454-4d07-919f-15a0d806a5a8\", \"title\": \"Tanium\", \"description\": \"Tanium\", \"start\": \"2021-04-13T00:16:20.000+00:00\", \"local-definitions\": { \"inventory-items\": [ { \"uuid\": \"da8b87f6-2068-415f-94bb-e14e31b4f5c2\", \"description\": \"inventory\", \"props\": [ { \"name\": \"computer-name\", \"ns\": \"dns://tanium\", \"value\": \"cmp-wn-2106.demo.tanium.local\", \"class\": \" inventory-item\" }, { \"name\": \"computer-ip\", \"ns\": \"dns://tanium\", \"value\": \"fe80::3cd5:564b:940e:49ab\", \"class\": \" inventory-item\" }, { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"value\": \"Windows 10\", \"class\": \" inventory-item\" } ] }, { \"uuid\": \"f3ab87b2-70c1-4332-991e-c003d4314c0b\", \"description\": \"inventory\", \"props\": [ { \"name\": \"computer-name\", \"ns\": \"dns://tanium\", \"value\": \"\", \"class\": \" inventory-item\" }, { \"name\": \"computer-ip\", \"ns\": \"dns://tanium\", \"value\": \"10.8.69.11\", \"class\": \" inventory-item\" }, { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"value\": \"Windows 10\", \"class\": \" inventory-item\" } ] } ] }, \"reviewed-controls\": { \"control-selections\": [ {} ] }, \"observations\": [ { \"uuid\": \"b3250b66-fe6f-4ac0-be99-cb4ff093dc31\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"class\": \"source\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\", \"class\": \"id\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"pass\", \"class\": \"result\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"da8b87f6-2068-415f-94bb-e14e31b4f5c2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-04-13T00:16:20.000+00:00\" }, { \"uuid\": \"5ae9c133-c32d-44c5-b52e-5af4513cb94a\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.2_L1_Ensure_Maximum_password_age_is_set_to_60_or_fewer_days_but_not_0\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"class\": \"source\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.2_L1_Ensure_Maximum_password_age_is_set_to_60_or_fewer_days_but_not_0\", \"class\": \"id\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"pass\", \"class\": \"result\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"f3ab87b2-70c1-4332-991e-c003d4314c0b\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-04-13T00:16:20.000+00:00\" }, { \"uuid\": \"8d021edc-176e-4373-a3c4-a19e954c1e4d\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.3_L1_Ensure_Minimum_password_age_is_set_to_1_or_more_days\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"class\": \"source\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.3_L1_Ensure_Minimum_password_age_is_set_to_1_or_more_days\", \"class\": \"id\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"fail\", \"class\": \"result\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"f3ab87b2-70c1-4332-991e-c003d4314c0b\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-04-13T00:16:20.000+00:00\" }, { \"uuid\": \"36aa7551-d047-4f4a-9853-6ac63cfc9e48\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.4_L1_Ensure_Minimum_password_length_is_set_to_14_or_more_characters\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"class\": \"source\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.4_L1_Ensure_Minimum_password_length_is_set_to_14_or_more_characters\", \"class\": \"id\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"pass\", \"class\": \"result\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"f3ab87b2-70c1-4332-991e-c003d4314c0b\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-04-13T00:16:20.000+00:00\" } ], \"findings\": [ { \"uuid\": \"ba4e264f-0aee-4ead-9ee3-6161c5cc4ecb\", \"title\": \"800-53: IA-5\", \"description\": \"800-53: IA-5\", \"target\": { \"type\": \"objective-id\", \"id-ref\": \"800-53: IA-5\", \"props\": [ { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"value\": \"NIST 800-53\", \"class\": \"source\" }, { \"name\": \"id-ref\", \"ns\": \"dns://tanium\", \"value\": \"800-53: IA-5\", \"class\": \"source\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"FAIL\", \"class\": \"STRVALUE\" } ], \"status\": \"not-satisfied\" }, \"related-observations\": [ { \"observation-uuid\": \"b3250b66-fe6f-4ac0-be99-cb4ff093dc31\" }, { \"observation-uuid\": \"5ae9c133-c32d-44c5-b52e-5af4513cb94a\" }, { \"observation-uuid\": \"8d021edc-176e-4373-a3c4-a19e954c1e4d\" }, { \"observation-uuid\": \"36aa7551-d047-4f4a-9853-6ac63cfc9e48\" } ] } ] } ] } trestle task xlsx-to-component-definition \u00a4 The trestle task xlsx-to-component-definition command facilitates transformation of an excel spread sheet into an OSCAL component-definition.json file. Specify in the config: location of catalog file location of spread sheet file work sheet name in the spread sheet file output directory to write the component-definition.json file whether or not to overwrite an existing component-definition.json file the organization name the organization remarks the namespace comma separated mappings from name to class the catalog URL the catalog title Example command invocation: $TRESTLE_BASEDIR$ trestle task xlsx-to-component-definition -c /home/user/task.config Example config: /home/user/task.config [task.xlsx-to-oscal-component-definition] catalog-file = nist-content/nist.gov/SP800-53/rev4/json/NIST_SP-800-53_rev4_catalog.json spread-sheet-file = /home/user/compliance/data/spread-sheet/best-practices.xlsx work-sheet-name = best_practices_controls output-dir = /home/user/compliance/data/tasks/xlsx/output output-overwrite = true org-name = International Business Machines org-remarks = IBM namespace = http://ibm.github.io/compliance-trestle/schemas/oscal/cd/ibm-cloud property-name-to-class = goal_name_id:scc_goal_name_id, goal_version:scc_goal_version catalog-url = https://github.com/usnistgov/oscal-content/blob/master/nist.gov/SP800-53/rev4/json/NIST_SP-800-53_rev4_catalog.json catalog-title = NIST Special Publication 800-53 Revision 4 catalog-file Example catalog-file: nist-content/nist.gov/SP800-53/rev4/json/NIST_SP-800-53_rev4_catalog.json spread-sheet-file Example spread-sheet-file: /home/user/compliance/data/spread-sheet/best-practices.xlsx output Example component-definition.json: /home/user/compliance/data/spread-sheet/best-practices.xlsx spread sheet to component definition mapping \u00a4 display mapping table table, th, td { border: 1px solid black; border-collapse: collapse; } th, td { padding: 5px; } spread sheet column name component definition path comments ControlId implemented_requirement.property[name='goal_name_id'].value only used if column 'goal_name_id' is empty ControlText implemented_requirement.property[name='goal_name_id'].remarks transformation code replaces \"Check whether\" with \"Ensure\" in text Nist Mappings implemented_requirement.description heading may span multiple columns one value expected per column each entry is separated into control + statements (if any) ResourceTitle component.title component.description component.control-implementation.description + {text} goal_name_id implemented_requirement.property[name='goal_name_id'].value Version implemented_requirement.property[name='goal_version'].value Value from spread sheet is not currently used. Value '1.0' is hard coded. Parameter [optional parameter] implemented_requirement.set_parameter.param_id The expected text is in two parts separated by '\\n'. The text following the '\\n' is the value used. Values [alternatives] implemented_requirement.set_parameter.values The expected text is of the following format: v0, [v1, v2...] The value v0 is used.","title":"CLI for OSCAL documents"},{"location":"cli/#trestle-cli-overview-and-oscal-usecases","text":"The trestle CLI has three primary use cases: Serve as tooling to generate and manipulate OSCAL files directly by an end user. The objective is to reduce the complexity of creating and editing workflows. Example commands are: trestle import , trestle create , trestle add , trestle split , trestle merge . Act as an automation tool that, by design, can be an integral part of a CI/CD pipeline e.g. trestle validate , trestle tasks . Allow governance of markdown documents so they conform to specific style or structure requirements. To support each of these use cases trestle creates an opinionated directory structure to manage governed documents.","title":"trestle CLI Overview and OSCAL Usecases"},{"location":"cli/#opinionated-directory-structure","text":"Trestle relies on an opinionated directory structure, similar to git , go , or auditree , to manage the workflow. Most trestle commands are restricted to working within an initialized directory tree. The directory structure setup by trestle has three major elements: A .trestle hidden folder. A dist folder. Folders for each of the OSCAL schemas. The outline of the schema is below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 system-security-plans \u2502 \u251c\u2500\u2500 assessment-plans \u2502 \u251c\u2500\u2500 assessment-results \u2502 \u2514\u2500\u2500 plan-of-action-and-milestones \u251c\u2500\u2500 catalogs \u251c\u2500\u2500 profiles \u251c\u2500\u2500 component-definitions \u251c\u2500\u2500 system-security-plans \u251c\u2500\u2500 assessment-plans \u251c\u2500\u2500 assessment-results \u2514\u2500\u2500 plan-of-action-and-milestones .trestle directory is a special directory containing various trestle artefacts to help run various other commands. Examples include configuration files, caches and templates. The bulk of the folder structure is used to represent each of the top level schemas or top level models such as catalogs and profiles . For each of these directories the following root structure is maintained: \u251c\u2500\u2500 .trestle \u2514\u2500\u2500 TOP_LEVEL_MODEL_PLURAL \u2514\u2500\u2500 NAME_OF_MODEL_INSTANCE \u2514\u2500\u2500 TOP_LEVEL_MODEL_NAME.{json,yaml,yml} which appears, for a catalog a user decides is titled nist-800-53, as: \u251c\u2500\u2500 .trestle \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist-800-53 \u2514\u2500\u2500 catalog.json dist directory will contain the assembled version of the models located on the source model directories (at the project root level) which are: catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results and plan-of-action-and-milestones . The assumption is that each of the OSCAL files within this folder is ready to be read by external 3rd party tools.","title":"Opinionated directory structure"},{"location":"cli/#support-for-subdivided-document-structures","text":"The files constructed by OSCAL can run into the tens of thousands of lines of yaml or formatted json. At this size the files become completely unmanageable for users. To combat this, trestle can trestle split a file into many smaller files and later merge those split files together. Directory structures such as the one below can represent OSCAL document structures. Users are strongly encourage to rely on split and merge to code these structures. Users can query the contents of files using trestle describe , and probe the contents more deeply using it in combination with element paths. . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json \u251c\u2500\u2500 metadata \u2502 \u251c\u2500\u2500 revision-history \u2502 \u2502 \u251c\u2500\u2500 00000__revision-history.json \u2502 \u2502 \u251c\u2500\u2500 00001__revision-history.json \u2502 \u2502 \u2514\u2500\u2500 00002__revision-history.json \u2502 \u2514\u2500\u2500 responsible-parties \u2502 \u251c\u2500\u2500 creator__responsible-party.json \u2502 \u2514\u2500\u2500 contact__responsible-party.json \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ...","title":"Support for subdivided document structures"},{"location":"cli/#specifing-attributes-elements-within-trestle-commands","text":"OSCAL models are rich and contain multiple nested data structures. Given this, a mechanism is required to address elements / attributes within an oscal object. This accessing method is called 'element path' and is similar to jsonPath . Commands provide element path by a -e argument where available, e.g. trestle split -f catalog.json -e 'catalog.metadata.*'. This path is used whenever specifying an attribute or model, rather than exposing trestles underlying object model name. Users can refer to NIST's json outline to understand object names in trestle.","title":"Specifing attributes / elements within trestle commands."},{"location":"cli/#rules-for-element-path","text":"Element path is an expression of the attribute names, in json form , concatenated by a period ( . ). E.g. The metadata in a catalog is referred to as catalog.metadata Element paths are relative to the file. e.g. For metadata.json roles would be referred to as metadata.roles , from the catalog file that would be catalog.metadata.roles Arrays can be handled by a wild card * or a numerical index for a specific index. catalog.groups.* to refer to each oscal group catalog.groups.*.controls.* to refer to 'for each control under a top level group' For NIST 800-53 catalog.groups.0.controls.0. On *nix platforms if using the wildcard the element path argument should be wrapped in quotes to prevent problems with the shell interpreting the wild card before trestle can When dealing with an array based object, the array syntax may be skipped when passing a model e.g. a control could be catalog.controls.control or catalog.groups.controls.control This syntax is required as OSCAL, across the schema, has conflicting element definitions.","title":"Rules for element path"},{"location":"cli/#a-note-for-software-developers-using-trestle","text":"Trestle provides utilities for converting from element path to trestle's python object model. The (slightly simplified) model is: Class attributes are converted from dash-case to dash_case (aka snake_case) Class names are converted from dash-case to DashCase (aka CamelCase)","title":"A note for software developers using trestle."},{"location":"cli/#trestle-init","text":"This command will create a trestle project in the current directory with the necessary directory structure and trestle artefacts. For example, if we run trestle init in a directory, it will create the directory structure below for different artefacts: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 system-security-plans \u2502 \u251c\u2500\u2500 assessment-plans \u2502 \u251c\u2500\u2500 assessment-results \u2502 \u2514\u2500\u2500 plan-of-action-and-milestones \u251c\u2500\u2500 catalogs \u251c\u2500\u2500 profiles \u251c\u2500\u2500 component-definitions \u251c\u2500\u2500 system-security-plans \u251c\u2500\u2500 assessment-plans \u251c\u2500\u2500 assessment-results \u2514\u2500\u2500 plan-of-action-and-milestones .trestle directory is a special directory containing various trestle artefacts to help run various other commands. dist directory will contain the merged or assembled version of the models located on the source model directories (at the project root level) which are: catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results and plan-of-action-and-milestones . Notice that trestle is a highly opinionated tool and, therefore, the names of the files and directories that are created by any of the trestle commands and subcommands MUST NOT be changed manually.","title":"trestle init"},{"location":"cli/#trestle-create","text":"This command will create a bare-bones sample file for one of the OSCAL models. For example, trestle create catalog -o nist800-53 will create a sample catalog file, catalog.json in the catalog subdirectory, nist800-53 as shown below: . \u251c\u2500\u2500 .trestle \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u2514\u2500\u2500 catalog.json ... The following subcommands are currently supported: trestle create catalog : creates a directory structure containing a sample OSCAL catalog model under the catalogs folder. trestle create profile : creates a directory structure containing a sample OSCAL profile model under the profiles folder. trestle create component-definition : creates a directory structure containing a sample component-definition model under the component-definitions folder. trestle create system-security-plan : creates a directory structure containing a sample system-security-plan model under the system-security-plans folder. trestle create assessment-plan : creates a directory structure containing a sample assessment-plan under the assessment-plans folder. trestle create assessment-result : creates a directory structure containing a sample assessment-result under the assessment-results folder. trestle create plan-of-action-and-milestone : creates a directory structure containing a sample plan-of-action-and-milestone under the plan-of-action-and-milestones folder. The following options are supported: -o or --output : specifies the name/alias of a model. It is used as the prefix for the output filename under the dist directory and for naming the source subdirectories under catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results or plan-of-action-and-milestones . The user can edit the parts of the generated OSCAL model by modifying the sample content in those directories. The initial level of decomposition of each type of model varies according to the model type. This default or reference decomposition behaviour can be changed by modifying the rules in a .trestle/config file . These rules can be written as a sequence of trestle split commands. Passing -iof or --include-optional-fields will make trestle create generate a richer model containing all optional fields until finding recursion in the model (e.g controls within control).","title":"trestle create"},{"location":"cli/#trestle-import","text":"This command allows users to import existing OSCAL files so that they can be managed using trestle. For example trestle import -f /local_dir/existing_catalog.json -o my_existing_catalog will import existing_catalog.json into a new folder under catalogs as shown below: . \u251c\u2500\u2500 .trestle \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 my_existing_catalog \u2514\u2500\u2500 catalog.json ... The following options are supported: -f or --file : specifies the path of an existing OSCAL file or URL to a remote file. -o or --output : specifies the name/alias of a model. It is used as the prefix for the output filename under the dist directory and for naming the source subdirectories under catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results or plan-of-action-and-milestones . The --file option may be an absolute or relative path, and it may be a URL. For details on allowed formats please see the documentation for the href command. The file must be imported from outside the current trestle directory or an error will result. The import subcommand can determine the type of the model that is to be imported by the contents of the file. But the file name must end with an allowed json or yaml extension: .json, .yaml, .yml During the import process the file must pass the validate test described below for the command, validate . If the file does not pass validation a warning will be given describing the nature of the problem and the import will fail. Once a file has been imported it can be split into a rich tree of sub-components as shown at the top of this document. But the file must be imported first.","title":"trestle import"},{"location":"cli/#trestle-replicate","text":"This command allows users to replicate a certain OSCAL model (file and directory structure). For example trestle replicate catalog -i cat1 -o cat11 will replicate the Catalog cat1 into cat11 directory. It can also regenerate all the UUIDs as required.","title":"trestle replicate"},{"location":"cli/#trestle-split","text":"This command allows users to further decompose a trestle model into additional subcomponents. The following options are currently supported: -f or --file : this is optional and specifies the file path of the json/yaml file containing the elements that will be split. -e or --elements : specifies the model subcomponent element(s) (JSON/YAML property path) that is/are going to be split. Multiple elements can be specified at once using a comma-separated value, e.g -e 'catalog.metadata,catalog.groups' . Make sure to include the quotes that enclose the comma-separated paths. If the element is of JSON/YAML type array list and you want trestle to create a separate subcomponent file per array item, the element needs to be suffixed with .* , e.g. -e 'catalog.groups.*' . If the suffix is not specified, split will place all array items in only one separate subcomponent file, e.g. 'groups.json' . Again, make sure to include the quotes around the elements. If you just want to split a file into all its constituent parts and the file does not contain a simple list of objects, you can still use * and the file will be split into all its non-trivial elements. Thus if you split a catalog with -e catalog.* the result will be a new directory, catalog , containing files representing the large items, back-matter.json, groups.json and metadata.json , but there will still be a catalog.json file containing just the catalog's uuid . Small items such as strings and dates cannot be split off and will remain in the original model file that is being split. Here are some examples. Starting with a single catalog file, my_catalog/catalog.json , if we do trestle split -f catalog.json -e 'catalog.*' we end up with: catalogs \u2517 my_catalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json If I then split roles out of metadata as a single file containing a list of roles, trestle split -f catalog/metadata.json -e 'metadata.roles' I would end up with: catalogs \u2517 my_catalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 metadata \u2503 \u2503 \u2503 \u2517 roles.json \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json If instead I had specified -e 'metadata.roles.*' I would get: my_catalog \u2523 catalog \u2503 \u2523 metadata \u2503 \u2503 \u2517 roles \u2503 \u2503 \u2503 \u2523 00000__role.json \u2503 \u2503 \u2503 \u2517 00001__role.json \u2503 \u2523 back-matter.json \u2503 \u2523 groups.json \u2503 \u2517 metadata.json \u2517 catalog.json You can see there is no roles.json file anymore and instead there is a subdirectory, roles containing a list of files, one for each role . If the -f or --file option is not specified, the file to split will be determined from the elements specified, in the context of the current working directory. The current directory must be within a specific model (e.g. catalog or profile ), and the element paths must either be absolute (e.g. catalog.metadata.roles ) or relative to the current working directory. For example, if you are in catalogs/mycat/catalog/groups and you want to split the file 00000__group.json , you must use -f to specify the filename, and the element path can either be absolute, as catalog.group.* , or you can set the current working directory to where the file is and use element path group.* . This makes it easier to specify splits when deep in a directory structure. Every subdirectory in a trestle directory model should have a corresponding .json or .yaml file with the same name, except when that subdirectory corresponds to a list of items, such as catalog.groups . When those subcomponents are split/expanded each file or subdirectory under them represents an item of the collection. Because of that, if a corresponding groups.json | groups.yaml file were to exist, its contents would just be an empty representation of that collection and the user would need to be careful never to edit that file. Therefore, we decided not to create that corresponding file in those cases. Following the same logic, another exception is when all the fields from a .json | .yaml file are split, leaving the original file as an empty object. In that case, the file would be deleted as well. To inspect a file to see what elements can be split from it, use the describe command described below. It is also useful for inspection of files created by the split operation.","title":"trestle split"},{"location":"cli/#trestle-merge","text":"The trestle merge command is the reversal of trestle split . This command allows users to reverse the decomposition of a trestle model by aggregating subcomponents scattered across multiple files or directories into the parent JSON/YAML file. To merge a model, you have to first change working directory to the root model component directory that you want to merge a sub-component model into. The following option is required: -e or --elements : specifies the properties (JSON/YAML path) that will be merged, relative to the current working directory. This must contain at least 2 elements, where the last element is the model/sub-component to be merged into the second from last component. For example, in the command trestle merge -e 'catalog.metadata' , executed in the same directory where catalog.json or the split catalog directory exists, the property metadata from metadata.json or metadata.yaml would be moved/merged into catalog.json . If the metadata model has already been split into smaller sub-component models previously, those smaller sub-components are first recusively merged into metadata , before merging metadata subcomponent into catalog.json . To specify merging every sub-component split from a component, .* can be used. For example, trestle merge -e 'catalog.*' command, issued from the directory where catalog.json or catalog directory exists, will merge every single sub-component of that catalog back into the catalog.json .","title":"trestle merge"},{"location":"cli/#trestle-describe","text":"This command lets users inspect model files to explore contents using an optional element path. The command can work well in concert with split to show what each file contains, and probe within the contents to determine sub-components that can be extracted as separate files. Unlike split, describe only describes the contents of a single item, so the element path may not contain wildcards ( * ) or commas. For example, if a catalog file has been imported to catalogs/my_catalog/catalog.json then the commmand, trestle describe -f catalog.json might yield: Model file catalog.json is of type catalog.Catalog and contains: uuid: 613fca2d-704a-42e7-8e2b-b206fb92b456 metadata: common.Metadata params: None controls: None groups: list of 20 items of type catalog.Group back_matter: common.BackMatter Note that contents are listed even when they are empty (and therefore optional) so the full potential contents can be seen. Also note that if an item corresponds to a list of elements, the number and type of elements is provided. Finally, if an item is a simple string such as id , uuid or title , the string is shown directly up to a maximum of 100 characters. If the string is clipped it will be indicated by [truncated] at the end of the string. An element path can be specified to probe the contents, as in trestle describe -f catalog.json -e 'catalog.metadata.roles' . A possible response is: Model file catalog.json at element path catalog.metadata.roles is a list of 2 items of type common.Role You can also query individual elements, and elements of an element, e.g. trestle describe -f catalog.json -e 'catalog.groups.5.controls.3' Model file catalog.json at element path catalog.groups.5.controls.3 is of type catalog.Control and contains: id: cp-4 class_: SP800-53 title: Contingency Plan Testing params: list of 2 items of type common.Parameter props: list of 2 items of type common.Property links: list of 14 items of type common.Link parts: list of 2 items of type common.Part controls: list of 5 items of type catalog.Control (Note that the numbering starts at 0, so the .3 corresponds to the 4th element.) In all output from describe the type of the item shown corresponds to the python file and class of the corresponding OSCAL model in trestle. If you split items off a model so they end up in a subdirectory, the original file is referred to as a \"stripped\" model, with parts of it stripped off and only some elements remaining. For example, if you do trestle split -f catalog.json -e 'catalog.metadata' it will split off metadata from the original catalog.json file and place it in catalog/metadata.json . If you then do trestle describe -f catalog.json on the new file, it will say something like: Model file catalog.json is of type stripped.Catalog and contains: uuid: 613fca2d-704a-42e7-8e2b-b206fb92b456 params: None controls: None groups: list of 20 items of type catalog.Group back_matter: common.BackMatter Note that the type of the file is now stripped.Catalog and it no longer contains metadata . Even though metadata is no longer in the original .json file, trestle is still aware it is present in the model since it is properly placed as its own file in the subdirectory, catalog .","title":"trestle describe"},{"location":"cli/#trestle-partial-object-validate","text":"OSCAL objects are extremely large. Some systems may only be able to produce partial OSCAL objects. For example the tanium-to-oscal task produces the results attribute of an assessment-results object. trestle partial-object-validate allows the validation of any sub-element/attribute using element path. Using the example above trestle partial-object-validate -f results.json -e asssesment-results.results . The file is not required to be in the trestle project or required to be a specific file name.","title":"trestle partial-object-validate"},{"location":"cli/#example-valid-element-paths","text":"All element paths must be absolute e.g.: catalog.metadata catalog catalog.groups catalog.groups.group.controls.control.controls.control Remembering in the end you only care about the end type. So in this scenario catalog.groups.group.controls.control.controls.control is equivalent to catalog.controls.control .","title":"Example valid element-paths"},{"location":"cli/#trestle-href","text":"This command changes the href of an Import in a profile and is needed when generating an SSP (system security plan) with the author tool, ssp-generate . The Imports in a profile are used to load associated catalogs of controls and profiles, and must be available at the corresponding href uri. If an imported catalog is in the trestle directory then the href should be changed with a command of the form: trestle href -n my_profile -hr trestle://catalogs/my_catalog/catalog.json Similarly, if the item imported is a profile, a corresponding href should point to a json file in the profiles directory. Note that catalogs or profiles in the trestle directory are indicated by the trestle:// prefix, followed by the path from the trestle root directory to the actual catalog file. The profile itself, which is having its imports modified, is just indicated by its name with the -n option. If the profile has more than one import, you can display the corresponding hrefs with: trestle href -n my_profile This will give a numbered list of the hrefs. You can then change them individually by providing the corresponding item number: trestle href -n my_profile -i 1 -hr trestle://catalogs/my_catalog/catalog.json This will change the href indexed as 1 when the list was displayed. The href's are indexed starting from 0. The trestle href command can also be used to change the value back to the intended one prior to distribution of the profile. The provided href can be of form trestle:// , https:// , sftp:// , or file:/// . If file:/// is used, the path provided must be absolute - and on Windows it must include the drive letter followed by a slash. The only time a relative path is allowed is with the trestle:// heading. A username and password may be embedded in the url for https:// , and a CA certificate path will be searched from environment variables REQUESTS_CA_BUNDLE and CURL_CA_BUNDLE in that order. Authorization for sftp:// access relies on the user's private key being either active via ssh-agent or supplied via the environment variable SSH_KEY . In the latter case it must not require a passphrase prompt.","title":"trestle href"},{"location":"cli/#trestle-assemble","text":"This command assembles all contents (files and directories) representing a specific model into a single OSCAL file located under dist folder. For example, $TRESTLE_BASEDIR$ trestle assemble catalog -i nist800-53 will traverse the catalogs/nist800-53 directory and its children and combine all data into a OSCAL file that will be written to dist/catalogs/nist800-53.json . Note that the parts of catalog nist800-53 can be written in either YAML/JSON/XML (e.g. based on the file extension), however, the output will be generated as YAML/JSON/XML as desired. Trestle will infer the content type from the file extension and create the model representation appropriately in memory and then output in the desired format. Trestle assemble will also validate content as it assembles the files and make sure the contents are syntactically correct.","title":"trestle assemble"},{"location":"cli/#trestle-add","text":"This command allows users to add an OSCAL model to a subcomponent in source directory structure of the model. For example, $TRESTLE_BASEDIR/catalogs/nist800-53$ trestle add -f ./catalog.json -e catalog.metadata.roles will add the following property under the metadata property for a catalog that will be written to the appropriate file under catalogs/nist800-53 directory: \"roles\": [ { \"id\": \"REPLACE_ME\", \"title\": \"REPLACE_ME\" } Default values for mandatory datatypes will be like below. All UUID's will be populated by default whether or not they are mandatory. - DateTime: <Current date-time> - Boolean: False - Integer: 0 - String: REPLACE_ME - Float/Double: 0.00 - Id field: Auto generated UUID Passing -iof or --include-optional-fields will make trestle add generate a richer model containing all optional fields until finding recursion in the model (e.g controls within control).","title":"trestle add"},{"location":"cli/#trestle-remove","text":"The trestle remove command is the reversal of trestle add .","title":"trestle remove"},{"location":"cli/#trestle-validate","text":"Trestle validate is designed to perform a function to ensure integrity of a set of OSCAL files. This can be as simple as a schema validation within a single file or as complex as ensuring the integrity of a 'stack' of OSCAL files including potentially remote system state. Trestle validate the form `trestle validate -f FILE -i SPECIFIC_ITEM_OR_VALUE Trestle validates files according to a number of criteria, and it can operate on one or more files specified in different ways. validate returns a non-zero return code if there is any validation problem detected in a file. The current list of validation modes that get checked internally are: Mode Purpose duplicates Identify if duplicate uuid's are present oscal_version Confirm that the oscal version of the file is supported refs Confirm that all references in responsible parties are found in roles In addition to validating a single file you can validate all files of a given type with the -t option: trestle validate -t catalog And you can validate all models with the -a option: trestle validate -a Finally, you can validate a model based on its name using the -n option, along with the type of the model: trestle validate -t catalog -n my_catalog Note that when you Import a file it will perform a full validation on it first, and if it does not pass validation the file cannot be imported.","title":"trestle validate"},{"location":"cli/#trestle-tasks","text":"Open Shift Compliance Operator and Tanium are supported as 3rd party tools.","title":"trestle tasks"},{"location":"cli/#trestle-task-osco-to-oscal","text":"The trestle task osco-to-oscal command facilitates transformation of OpenShift Compliance Operator (OSCO) scan results .yaml files into OSCAL partial results .json files. Specify required config parameters to indicate the location of the input and the output. Specify optional config parameters to indicate the name of the oscal-metadata.yaml file, if any, and whether overwriting of existing output is permitted. Example command invocation: $TRESTLE_BASEDIR$ trestle task osco-to-oscal -c /home/user/task.config Example config: /home/user/task.config [task.osco-to-oscal] input-dir = /home/user/git/evidence/osco/input output-dir = /home/user/git/evidence/oscal/output oscal-metadata = oscal-metadata.yaml output-overwrite = true input Example input directory contents listing: /home/user/git/evidence/osco/input -rw-rw-r--. 1 user user 3832 Feb 2 09:36 oscal-metadata.yaml -rw-rw-r--. 1 user user 49132 Feb 2 06:12 ssg-ocp4-ds-cis-111.222.333.444-pod.yaml -rw-rw-r--. 1 user user 52747 Feb 2 06:41 ssg-ocp4-ds-cis-111.222.333.555-pod.yaml Example input OSCO scan result file contents (snippet): ssg-ocp4-ds-cis-111.222.333.444-pod.yaml display sample apiVersion: v1 data: exit-code: \"2\" results: | <?xml version=\"1.0\" encoding=\"UTF-8\"?> <TestResult xmlns=\"http://checklists.nist.gov/xccdf/1.2\" id=\"xccdf_org.open-scap_testresult_xccdf_org.ssgproject.content_profile_cis\" start-time=\"2020-08-03T02:26:26+00:00\" end-time=\"2020-08-03T02:26:26+00:00\" version=\"0.1.52\" test-system=\"cpe:/a:redhat:openscap:1.3.3\"> <benchmark href=\"/content/ssg-ocp4-ds.xml\" id=\"xccdf_org.ssgproject.content_benchmark_OCP-4\"/> <title>OSCAP Scan Result</title> <profile idref=\"xccdf_org.ssgproject.content_profile_cis\"/> <target>kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp</target> <target-facts> <fact name=\"urn:xccdf:fact:identifier\" type=\"string\">chroot:///host</fact> <fact name=\"urn:xccdf:fact:scanner:name\" type=\"string\">OpenSCAP</fact> <fact name=\"urn:xccdf:fact:scanner:version\" type=\"string\">1.3.3</fact> </target-facts> <target-id-ref system=\"http://scap.nist.gov/schema/asset-identification/1.1\" name=\"asset0\" href=\"\"/> <platform idref=\"cpe:/a:redhat:openshift_container_platform:4.1\"/> <platform idref=\"cpe:/a:machine\"/> <set-value idref=\"xccdf_org.ssgproject.content_value_ocp_data_root\">/kubernetes-api-resources</set-value> <set-value idref=\"xccdf_org.ssgproject.content_value_var_kube_authorization_mode\">Webhook</set-value> <set-value idref=\"xccdf_org.ssgproject.content_value_var_streaming_connection_timeouts\">5m</set-value> <rule-result idref=\"xccdf_org.ssgproject.content_rule_ocp_idp_no_htpasswd\" time=\"2020-08-03T02:26:26+00:00\" severity=\"medium\" weight=\"1.000000\"> <result>notselected</result> <ident system=\"https://nvd.nist.gov/cce/index.cfm\">CCE-84209-6</ident> </rule-result> <rule-result idref=\"xccdf_org.ssgproject.content_rule_accounts_restrict_service_account_tokens\" time=\"2020-08-03T02:26:26+00:00\" severity=\"medium\" weight=\"1.000000\"> <result>notchecked</result> <message severity=\"info\">No candidate or applicable check found.</message> </rule-result> <rule-result idref=\"xccdf_org.ssgproject.content_rule_accounts_unique_service_account\" time=\"2020-08-03T02:26:26+00:00\" severity=\"medium\" weight=\"1.000000\"> <result>notchecked</result> <message severity=\"info\">No candidate or applicable check found.</message> </rule-result> ... </TestResult> kind: ConfigMap metadata: annotations: compliance-remediations/processed: \"\" compliance.openshift.io/scan-error-msg: \"\" compliance.openshift.io/scan-result: NON-COMPLIANT openscap-scan-result/node: 111.222.333.444 creationTimestamp: \"2020-08-03T02:26:34Z\" labels: compliance-scan: ssg-ocp4-ds-cis name: ssg-ocp4-ds-cis-111.222.333.444-pod namespace: openshift-compliance resourceVersion: \"22693328\" selfLink: /api/v1/namespaces/openshift-compliance/configmaps/ssg-ocp4-ds-cis-111.222.333.444-pod uid: 1da3ea81-0a25-4512-ad86-7ac360246b5d Example input OSCAL metadata file contents: oscal-metadata.yaml display sample ssg-ocp4-ds-cis-111.222.333.444-pod: locker: https://github.mycorp.com/degenaro/evidence-locker namespace: xccdf benchmark: CIS Kubernetes Benchmark subject-references: component: uuid-ref: 56666738-0f9a-4e38-9aac-c0fad00a5821 type: component title: Red Hat OpenShift Kubernetes inventory-item: uuid-ref: 46aADFAC-A1fd-4Cf0-a6aA-d1AfAb3e0d3e type: inventory-item title: Pod properties: target: kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp target-ip: 111.222.333.444 cluster-name: ROKS-OpenSCAP-1 cluster-type: openshift cluster-region: us-south ssg-rhel7-ds-cis-111.222.333.444-pod: locker: https://github.mycorp.com/degenaro/evidence-locker namespace: xccdf benchmark: CIS Kubernetes Benchmark subject-references: component: uuid-ref: 89cfe7a7-ce6b-4699-aa7b-2f5739c72001 type: component title: RedHat Enterprise Linux 7.8 inventory-item: uuid-ref: 46aADFAC-A1fd-4Cf0-a6aA-d1AfAb3e0d3e type: inventory-item title: VM properties: target: kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp target-ip: 111.222.333.444 cluster-name: ROKS-OpenSCAP-1 cluster-type: openshift cluster-region: us-south metadata format The oscal_metadata.yaml file comprises one or more mappings. Below is shown the format of a single mapping. The items in angle brackets are to be replaced with desired values for augmenting the produced OSCAL. The mapping whose matches the [metadata][name] in the evidence for the corresponding embedded XML, if any, will be used for augmenting the produced OSCAL. <name>: locker: <locker> namespace: <namespace> benchmark: <benchmark> subject-references: component: uuid-ref: <uuid-ref-component> type: <component-type> title: <component-title> inventory-item: uuid-ref: <uuid-ref-inventory-item> type: <inventory-item-type> title: <inventory-item-title> properties: target: <target> cluster-name: <cluster-name> cluster-type: <cluster-type> cluster-region: <cluster-region> output Example output directory contents listing: /home/user/git/evidence/oscal/output -rw-rw-r--. 1 user user 49132 Feb 3 10:59 ssg-ocp4-ds-cis-111.222.333.444-pod.json -rw-rw-r--. 1 user user 52747 Feb 3 10:59 ssg-ocp4-ds-cis-111.222.333.555-pod.json Example output OSCAL Observations file contents (snippet): ssg-ocp4-ds-cis-111.222.333.444-pod.json display sample { \"observations\": [ { \"uuid\": \"56666738-0f9a-4e38-9aac-c0fad00a5821\", \"title\": \"xccdf_org.ssgproject.content_rule_ocp_idp_no_htpasswd\", \"description\": \"xccdf_org.ssgproject.content_rule_ocp_idp_no_htpasswd\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://osco\", \"class\": \"source\", \"value\": \"CIS Kubernetes Benchmark\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"56666738-0f9a-4e38-9aac-c0fad00a5821\", \"type\": \"component\", \"title\": \"Red Hat OpenShift Kubernetes\" }, { \"uuid-ref\": \"46aADFAC-A1fd-4Cf0-a6aA-d1AfAb3e0d3e\", \"type\": \"inventory-item\", \"title\": \"Pod\", \"props\": [ { \"name\": \"target\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp\" }, { \"name\": \"target-ip\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"111.222.333.444\" }, { \"name\": \"cluster-name\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"ROKS-OpenSCAP-1\" }, { \"name\": \"cluster-type\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"openshift\" }, { \"name\": \"cluster-region\", \"ns\": \"dns://osco\", \"class\": \"inventory-item\", \"value\": \"us-south\" } ] } ], \"relevant-evidence\": [ { \"href\": \"https://github.mycorp.com/degenaro/evidence-locker\", \"description\": \"Evidence location.\", \"props\": [ { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"class\": \"id\", \"value\": \"xccdf_org.ssgproject.content_rule_ocp_idp_no_htpasswd\" }, { \"name\": \"time\", \"ns\": \"dns://xccdf\", \"class\": \"timestamp\", \"value\": \"2020-08-03T02:26:26+00:00\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"class\": \"result\", \"value\": \"notselected\" } ] } ] }, ...","title":"trestle task osco-to-oscal"},{"location":"cli/#trestle-task-tanium-to-oscal","text":"The trestle task tanium-to-oscal command facilitates transformation of Tanuim reports, each input file comprising individual lines consumable as json , into OSCAL partial results .json files. Specify required config parameters to indicate the location of the input and the output. Specify optional config parameter output-overwrite to indicate whether overwriting of existing output is permitted. Specify optional config parameter timestamp as ISO 8601 formated string (e.g., 2021-02-24T19:31:13+00:00) to override the timestamp attached to each Observation. Example command invocation: $TRESTLE_BASEDIR$ trestle task tanium-to-oscal -c /home/user/task.config Example config: /home/user/task.config [task.tanium-to-oscal] input-dir = /home/user/git/compliance/tanium/input output-dir = /home/user/git/compliance/oscal/output output-overwrite = true input Example input directory contents listing: /home/user/git/compliance/tanium/input -rw-rw-r--. 1 degenaro degenaro 1830 Mar 7 08:23 Tanium.comply-nist-results Tanium.comply-nist-results display sample {\"IP Address\":\"fe80::3cd5:564b:940e:49ab\",\"Computer Name\":\"cmp-wn-2106.demo.tanium.local\",\"Comply - JovalCM Results[c2dc8749]\":[{\"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\",\"Benchmark Version\":\"1.5.0.1\",\"Profile\":\"Windows 10 - NIST 800-53\",\"ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\",\"Result\":\"pass\",\"Custom ID\":\"800-53: IA-5\",\"Version\":\"version: 1\"}],\"Count\":\"1\",\"Age\":\"600\"} {\"IP Address\":\"10.8.69.11\",\"Computer Name\":\"\",\"Comply - JovalCM Results[c2dc8749]\":[{\"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\",\"Benchmark Version\":\"1.5.0.1\",\"Profile\":\"Windows 10 - NIST 800-53\",\"ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.2_L1_Ensure_Maximum_password_age_is_set_to_60_or_fewer_days_but_not_0\",\"Result\":\"pass\",\"Custom ID\":\"800-53: IA-5\",\"Version\":\"version: 1\"}],\"Count\":\"1\",\"Age\":\"600\"} {\"IP Address\":\"10.8.69.11\",\"Computer Name\":\"cmp-wn-2106.demo.tanium.local\",\"Comply - JovalCM Results[c2dc8749]\":[{\"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\",\"Benchmark Version\":\"1.5.0.1\",\"Profile\":\"Windows 10 - NIST 800-53\",\"ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.3_L1_Ensure_Minimum_password_age_is_set_to_1_or_more_days\",\"Result\":\"fail\",\"Custom ID\":\"800-53: IA-5\",\"Version\":\"version: 1\"}],\"Count\":\"1\",\"Age\":\"600\"} {\"IP Address\":\"10.8.69.11\",\"Computer Name\":\"cmp-wn-2106.demo.tanium.local\",\"Comply - JovalCM Results[c2dc8749]\":[{\"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\",\"Benchmark Version\":\"1.5.0.1\",\"Profile\":\"Windows 10 - NIST 800-53\",\"ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.4_L1_Ensure_Minimum_password_length_is_set_to_14_or_more_characters\",\"Result\":\"pass\",\"Custom ID\":\"800-53: IA-5\",\"Version\":\"version: 1\"}],\"Count\":\"1\",\"Age\":\"600\"} output Example output directory contents listing: /home/user/git/compliance/oscal/output -rw-rw-r--. 1 degenaro degenaro 6479 Mar 7 08:25 Tanium.oscal.json Tanium.oscal.json display sample { \"results\": [ { \"uuid\": \"0ed0791e-5454-4d07-919f-15a0d806a5a8\", \"title\": \"Tanium\", \"description\": \"Tanium\", \"start\": \"2021-04-13T00:16:20.000+00:00\", \"local-definitions\": { \"inventory-items\": [ { \"uuid\": \"da8b87f6-2068-415f-94bb-e14e31b4f5c2\", \"description\": \"inventory\", \"props\": [ { \"name\": \"computer-name\", \"ns\": \"dns://tanium\", \"value\": \"cmp-wn-2106.demo.tanium.local\", \"class\": \" inventory-item\" }, { \"name\": \"computer-ip\", \"ns\": \"dns://tanium\", \"value\": \"fe80::3cd5:564b:940e:49ab\", \"class\": \" inventory-item\" }, { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"value\": \"Windows 10\", \"class\": \" inventory-item\" } ] }, { \"uuid\": \"f3ab87b2-70c1-4332-991e-c003d4314c0b\", \"description\": \"inventory\", \"props\": [ { \"name\": \"computer-name\", \"ns\": \"dns://tanium\", \"value\": \"\", \"class\": \" inventory-item\" }, { \"name\": \"computer-ip\", \"ns\": \"dns://tanium\", \"value\": \"10.8.69.11\", \"class\": \" inventory-item\" }, { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"value\": \"Windows 10\", \"class\": \" inventory-item\" } ] } ] }, \"reviewed-controls\": { \"control-selections\": [ {} ] }, \"observations\": [ { \"uuid\": \"b3250b66-fe6f-4ac0-be99-cb4ff093dc31\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"class\": \"source\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\", \"class\": \"id\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"pass\", \"class\": \"result\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"da8b87f6-2068-415f-94bb-e14e31b4f5c2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-04-13T00:16:20.000+00:00\" }, { \"uuid\": \"5ae9c133-c32d-44c5-b52e-5af4513cb94a\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.2_L1_Ensure_Maximum_password_age_is_set_to_60_or_fewer_days_but_not_0\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"class\": \"source\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.2_L1_Ensure_Maximum_password_age_is_set_to_60_or_fewer_days_but_not_0\", \"class\": \"id\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"pass\", \"class\": \"result\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"f3ab87b2-70c1-4332-991e-c003d4314c0b\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-04-13T00:16:20.000+00:00\" }, { \"uuid\": \"8d021edc-176e-4373-a3c4-a19e954c1e4d\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.3_L1_Ensure_Minimum_password_age_is_set_to_1_or_more_days\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"class\": \"source\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.3_L1_Ensure_Minimum_password_age_is_set_to_1_or_more_days\", \"class\": \"id\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"fail\", \"class\": \"result\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"f3ab87b2-70c1-4332-991e-c003d4314c0b\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-04-13T00:16:20.000+00:00\" }, { \"uuid\": \"36aa7551-d047-4f4a-9853-6ac63cfc9e48\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.4_L1_Ensure_Minimum_password_length_is_set_to_14_or_more_characters\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"class\": \"source\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.4_L1_Ensure_Minimum_password_length_is_set_to_14_or_more_characters\", \"class\": \"id\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"pass\", \"class\": \"result\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"f3ab87b2-70c1-4332-991e-c003d4314c0b\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-04-13T00:16:20.000+00:00\" } ], \"findings\": [ { \"uuid\": \"ba4e264f-0aee-4ead-9ee3-6161c5cc4ecb\", \"title\": \"800-53: IA-5\", \"description\": \"800-53: IA-5\", \"target\": { \"type\": \"objective-id\", \"id-ref\": \"800-53: IA-5\", \"props\": [ { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"value\": \"NIST 800-53\", \"class\": \"source\" }, { \"name\": \"id-ref\", \"ns\": \"dns://tanium\", \"value\": \"800-53: IA-5\", \"class\": \"source\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"value\": \"FAIL\", \"class\": \"STRVALUE\" } ], \"status\": \"not-satisfied\" }, \"related-observations\": [ { \"observation-uuid\": \"b3250b66-fe6f-4ac0-be99-cb4ff093dc31\" }, { \"observation-uuid\": \"5ae9c133-c32d-44c5-b52e-5af4513cb94a\" }, { \"observation-uuid\": \"8d021edc-176e-4373-a3c4-a19e954c1e4d\" }, { \"observation-uuid\": \"36aa7551-d047-4f4a-9853-6ac63cfc9e48\" } ] } ] } ] }","title":"trestle task tanium-to-oscal"},{"location":"cli/#trestle-task-xlsx-to-component-definition","text":"The trestle task xlsx-to-component-definition command facilitates transformation of an excel spread sheet into an OSCAL component-definition.json file. Specify in the config: location of catalog file location of spread sheet file work sheet name in the spread sheet file output directory to write the component-definition.json file whether or not to overwrite an existing component-definition.json file the organization name the organization remarks the namespace comma separated mappings from name to class the catalog URL the catalog title Example command invocation: $TRESTLE_BASEDIR$ trestle task xlsx-to-component-definition -c /home/user/task.config Example config: /home/user/task.config [task.xlsx-to-oscal-component-definition] catalog-file = nist-content/nist.gov/SP800-53/rev4/json/NIST_SP-800-53_rev4_catalog.json spread-sheet-file = /home/user/compliance/data/spread-sheet/best-practices.xlsx work-sheet-name = best_practices_controls output-dir = /home/user/compliance/data/tasks/xlsx/output output-overwrite = true org-name = International Business Machines org-remarks = IBM namespace = http://ibm.github.io/compliance-trestle/schemas/oscal/cd/ibm-cloud property-name-to-class = goal_name_id:scc_goal_name_id, goal_version:scc_goal_version catalog-url = https://github.com/usnistgov/oscal-content/blob/master/nist.gov/SP800-53/rev4/json/NIST_SP-800-53_rev4_catalog.json catalog-title = NIST Special Publication 800-53 Revision 4 catalog-file Example catalog-file: nist-content/nist.gov/SP800-53/rev4/json/NIST_SP-800-53_rev4_catalog.json spread-sheet-file Example spread-sheet-file: /home/user/compliance/data/spread-sheet/best-practices.xlsx output Example component-definition.json: /home/user/compliance/data/spread-sheet/best-practices.xlsx","title":"trestle task xlsx-to-component-definition"},{"location":"cli/#spread-sheet-to-component-definition-mapping","text":"display mapping table table, th, td { border: 1px solid black; border-collapse: collapse; } th, td { padding: 5px; } spread sheet column name component definition path comments ControlId implemented_requirement.property[name='goal_name_id'].value only used if column 'goal_name_id' is empty ControlText implemented_requirement.property[name='goal_name_id'].remarks transformation code replaces \"Check whether\" with \"Ensure\" in text Nist Mappings implemented_requirement.description heading may span multiple columns one value expected per column each entry is separated into control + statements (if any) ResourceTitle component.title component.description component.control-implementation.description + {text} goal_name_id implemented_requirement.property[name='goal_name_id'].value Version implemented_requirement.property[name='goal_version'].value Value from spread sheet is not currently used. Value '1.0' is hard coded. Parameter [optional parameter] implemented_requirement.set_parameter.param_id The expected text is in two parts separated by '\\n'. The text following the '\\n' is the value used. Values [alternatives] implemented_requirement.set_parameter.values The expected text is of the following format: v0, [v1, v2...] The value v0 is used.","title":"spread sheet to component definition mapping"},{"location":"demonstrations-content/","text":"Trestle demonstration projects and content \u00a4 Trestle has a number of demonstrations setup in the IBM/compliance-trestle-demos repository which is intended to be a single point of call for demonstrations and content. If you are interested in contributing a demonstration / content open a PR to the demonstration repo and a PR to this page . Demonstrations, where practical, should include instructions on how they were created. Current demonstrations \u00a4 Simple sdk examples. \u00a4 This folder contains a number of small examples for using the trestle OSCAL sdks. Australian government Information Security Manual (ISM) \u00a4 This demonstration uses trestle as an SDK for generating OSCAL files. This demonstration downloads all currently available versions of the Australian Government ISM from ACSC and converts those documents to a set of OSCAL catalogs and profiles. Read more about the demo here . arc42 architectural template enforcement using trestle author. \u00a4 arc42 have created a set open-source architecture documentation templates. This demonstration uses trestle author to enforce use of the (modified) arc42 templates. A CICD pipeline (using github actions) is used for this demonstration. The full repository, including working CICD is here . Read more about the demo here . Trestle flask microservice demonstration. \u00a4 trestle uses a python library called pydantic to form the underlying OSCAL object models. flask-pydantic introduces a mechanism which integrates pydantic models into flask, providing automated user input validation in one line of code. This demo accepts a catalog as a POSTed object, throwing errors if the catalog does not meet the schema, and returns the catalog in the response. Find the demonstration here . Creating a CIS controls catalog from an excel spreadsheet. \u00a4 The Centre for Internet Security (CIS) produce a number of cross industry standards for IT security including their platform specific benchmarks and a suite of controls . This demo converts a spreadsheet of those controls into a a catalog and three profiles. Creating an SSP using trestle author. \u00a4 trestle author ssp-generate and trestle author ssp-author allow users to generate first a set of markdown documents to allow easy editing of control responses and second to reassemble that information up into an OSCAL ssp document. This is a 'baseline' demonstration with more sophisticated updates expected in the near term. Trestle repository api ( trestle.core.repository ) \u00a4 trestle.core.repository is an API which abstracts users from the file system of a trestle repository. It provides a way for external developers to access a trestle repository without relying on presumptions (such as cwd being within the repository). Find the demo here . Converting a spreadsheet into a component-definition \u00a4 Plenty of compliance content exists today in spreadsheets. This demonstration show how to use the xlsx-to-oscal-component-definition MVP functionality. Task examples \u00a4 Spreadsheet to component definition \u00a4","title":"Demos"},{"location":"demonstrations-content/#trestle-demonstration-projects-and-content","text":"Trestle has a number of demonstrations setup in the IBM/compliance-trestle-demos repository which is intended to be a single point of call for demonstrations and content. If you are interested in contributing a demonstration / content open a PR to the demonstration repo and a PR to this page . Demonstrations, where practical, should include instructions on how they were created.","title":"Trestle demonstration projects and content"},{"location":"demonstrations-content/#current-demonstrations","text":"","title":"Current demonstrations"},{"location":"demonstrations-content/#simple-sdk-examples","text":"This folder contains a number of small examples for using the trestle OSCAL sdks.","title":"Simple sdk examples."},{"location":"demonstrations-content/#australian-government-information-security-manual-ism","text":"This demonstration uses trestle as an SDK for generating OSCAL files. This demonstration downloads all currently available versions of the Australian Government ISM from ACSC and converts those documents to a set of OSCAL catalogs and profiles. Read more about the demo here .","title":"Australian government Information Security Manual (ISM)"},{"location":"demonstrations-content/#arc42-architectural-template-enforcement-using-trestle-author","text":"arc42 have created a set open-source architecture documentation templates. This demonstration uses trestle author to enforce use of the (modified) arc42 templates. A CICD pipeline (using github actions) is used for this demonstration. The full repository, including working CICD is here . Read more about the demo here .","title":"arc42 architectural template enforcement using trestle author."},{"location":"demonstrations-content/#trestle-flask-microservice-demonstration","text":"trestle uses a python library called pydantic to form the underlying OSCAL object models. flask-pydantic introduces a mechanism which integrates pydantic models into flask, providing automated user input validation in one line of code. This demo accepts a catalog as a POSTed object, throwing errors if the catalog does not meet the schema, and returns the catalog in the response. Find the demonstration here .","title":"Trestle flask microservice demonstration."},{"location":"demonstrations-content/#creating-a-cis-controls-catalog-from-an-excel-spreadsheet","text":"The Centre for Internet Security (CIS) produce a number of cross industry standards for IT security including their platform specific benchmarks and a suite of controls . This demo converts a spreadsheet of those controls into a a catalog and three profiles.","title":"Creating a CIS controls catalog from an excel spreadsheet."},{"location":"demonstrations-content/#creating-an-ssp-using-trestle-author","text":"trestle author ssp-generate and trestle author ssp-author allow users to generate first a set of markdown documents to allow easy editing of control responses and second to reassemble that information up into an OSCAL ssp document. This is a 'baseline' demonstration with more sophisticated updates expected in the near term.","title":"Creating an SSP using trestle author."},{"location":"demonstrations-content/#trestle-repository-api-trestlecorerepository","text":"trestle.core.repository is an API which abstracts users from the file system of a trestle repository. It provides a way for external developers to access a trestle repository without relying on presumptions (such as cwd being within the repository). Find the demo here .","title":"Trestle repository api (trestle.core.repository)"},{"location":"demonstrations-content/#converting-a-spreadsheet-into-a-component-definition","text":"Plenty of compliance content exists today in spreadsheets. This demonstration show how to use the xlsx-to-oscal-component-definition MVP functionality.","title":"Converting a spreadsheet into a component-definition"},{"location":"demonstrations-content/#task-examples","text":"","title":"Task examples"},{"location":"demonstrations-content/#spreadsheet-to-component-definition","text":"","title":"Spreadsheet to component definition"},{"location":"errors/","text":"Known errors and limitations \u00a4 uft-8 encoding only \u00a4 Trestle supports only utf8 as a file text-encoding. If non-utf8 files are encountered, errors will be reported / thrown. Trestle provides a script that may be used to convert files to utf8 in a destructive manner that may change the file contents. WARNING: This script is potentially destructive and may remove / damage content. Ensure you have a backup before use.","title":"Known limitations"},{"location":"errors/#known-errors-and-limitations","text":"","title":"Known errors and limitations"},{"location":"errors/#uft-8-encoding-only","text":"Trestle supports only utf8 as a file text-encoding. If non-utf8 files are encountered, errors will be reported / thrown. Trestle provides a script that may be used to convert files to utf8 in a destructive manner that may change the file contents. WARNING: This script is potentially destructive and may remove / damage content. Ensure you have a backup before use.","title":"uft-8 encoding only"},{"location":"license/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"maintainers/","text":"Trestle was designed and opensourced by a team based at IBM Research - Australia and others around the world. The list includes: Christopher Butler - butler54 Bruno Marques - brunomarq Lenin Mehedy - leninmehedy Simon Metson - drsm79 Frank Suits - fsuits Jeff Tan - jeffdmgit Nebula Alam - aNebula Vikas Agarwal vikas-agarwal76 Lou Degenaro degenaro","title":"Maintainers"},{"location":"mkdocs_code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at chris.butler@au1.ibm.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"mkdocs_code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"mkdocs_code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"mkdocs_code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"mkdocs_code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"mkdocs_code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"mkdocs_code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at chris.butler@au1.ibm.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"mkdocs_code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"python_trestle_setup/","text":"Install trestle in a python virtual environment \u00a4 There are a few things you need to to start using trestle: Make sure you have a working and recent Python environment Set up a Python virtual environment Download and install trestle Confirm it is working properly Create a trestle workspace Confirm you have python installed \u00a4 Ensure you have a modern Python (3.7, 3.8, 3.9). $ python -V</code> Python 3.8.3</code> Setup a virtual environment \u00a4 There are many ways to do this on Windows, Mac and Linux and with different Python installations, so please consult the documentation associated with your platform. Below is how it works on a typical Linux platform. $ cd $ python -m venv venv.trestle $ source venv.trestle/bin/activate (venv.trestle)$ Ensure you have a modern pip (19.x or greater). (venv.trestle)$ python -m pip --version pip 19.2.3 from /home... You should probably upgrade your pip to the latest version with: (venv.trestle)$ python -m pip install --upgrade pip Details can be found at Installation - pip documentation Install trestle \u00a4 Install compliance-trestle . (venv.trestle)$ pip install compliance-trestle Looking in indexes: https://pypi.org/simple,... Confirm trestle is installed properly \u00a4 Check trestle viability (and view help). (venv.trestle)$ trestle -h usage: trestle [-h] {init,create,split,merge,replicate,add,remove,validate,import,task,assemble,version} ... Full help text Manage OSCAL files in a human friendly manner. positional arguments: {init,create,split,merge,replicate,add,remove,validate,import,task,assemble,version} init Initialize a trestle working directory. create Create a sample OSCAL model in trestle project. split Split subcomponents on a trestle model. merge Merge subcomponents on a trestle model. replicate Replicate a top level model within the trestle directory structure. add Add a subcomponent to an existing model. remove Remove a subcomponent to an existing model. validate Validate contents of a trestle model in different modes. import Import an existing full OSCAL model into the trestle project. task Run arbitrary trestle tasks in a simple and extensible methodology. assemble Assemble all subcomponents from a specified trestle model into a single JSON/YAML file under dist. version Output version info for trestle and OSCAL. optional arguments: -h, --help show this help message and exit Create a trestle workspace \u00a4 Create trestle workspace. (venv.trestle)$ mkdir trestle.workspace (venv.trestle)$ cd trestle.workspace (venv.trestle)$ trestle init Initialized trestle project successfully in /home/<user>/trestle.workspace Congratulations! You now have a working trestle workspace for safe manipulation of OSCAL documents!","title":"Installation"},{"location":"python_trestle_setup/#install-trestle-in-a-python-virtual-environment","text":"There are a few things you need to to start using trestle: Make sure you have a working and recent Python environment Set up a Python virtual environment Download and install trestle Confirm it is working properly Create a trestle workspace","title":"Install trestle in a python virtual environment"},{"location":"python_trestle_setup/#confirm-you-have-python-installed","text":"Ensure you have a modern Python (3.7, 3.8, 3.9). $ python -V</code> Python 3.8.3</code>","title":"Confirm you have python installed"},{"location":"python_trestle_setup/#setup-a-virtual-environment","text":"There are many ways to do this on Windows, Mac and Linux and with different Python installations, so please consult the documentation associated with your platform. Below is how it works on a typical Linux platform. $ cd $ python -m venv venv.trestle $ source venv.trestle/bin/activate (venv.trestle)$ Ensure you have a modern pip (19.x or greater). (venv.trestle)$ python -m pip --version pip 19.2.3 from /home... You should probably upgrade your pip to the latest version with: (venv.trestle)$ python -m pip install --upgrade pip Details can be found at Installation - pip documentation","title":"Setup a virtual environment"},{"location":"python_trestle_setup/#install-trestle","text":"Install compliance-trestle . (venv.trestle)$ pip install compliance-trestle Looking in indexes: https://pypi.org/simple,...","title":"Install trestle"},{"location":"python_trestle_setup/#confirm-trestle-is-installed-properly","text":"Check trestle viability (and view help). (venv.trestle)$ trestle -h usage: trestle [-h] {init,create,split,merge,replicate,add,remove,validate,import,task,assemble,version} ... Full help text Manage OSCAL files in a human friendly manner. positional arguments: {init,create,split,merge,replicate,add,remove,validate,import,task,assemble,version} init Initialize a trestle working directory. create Create a sample OSCAL model in trestle project. split Split subcomponents on a trestle model. merge Merge subcomponents on a trestle model. replicate Replicate a top level model within the trestle directory structure. add Add a subcomponent to an existing model. remove Remove a subcomponent to an existing model. validate Validate contents of a trestle model in different modes. import Import an existing full OSCAL model into the trestle project. task Run arbitrary trestle tasks in a simple and extensible methodology. assemble Assemble all subcomponents from a specified trestle model into a single JSON/YAML file under dist. version Output version info for trestle and OSCAL. optional arguments: -h, --help show this help message and exit","title":"Confirm trestle is installed properly"},{"location":"python_trestle_setup/#create-a-trestle-workspace","text":"Create trestle workspace. (venv.trestle)$ mkdir trestle.workspace (venv.trestle)$ cd trestle.workspace (venv.trestle)$ trestle init Initialized trestle project successfully in /home/<user>/trestle.workspace Congratulations! You now have a working trestle workspace for safe manipulation of OSCAL documents!","title":"Create a trestle workspace"},{"location":"trestle-task-spec/","text":"Trestle Task Specifications (v0.0.1) \u00a4 Table of Contents \u00a4 Purpose Users Scope Trestle commands Draft commands Future work Deploy commands Monitor commands Reporting commands Purpose \u00a4 This document contains detail on \"trestle tasks\": A definition of what the task it is and the usecases. The Abstractions provided by a task. The expectation for a task in terms of behaviour. Key identified workflows. Overview of trestle tasks \u00a4 The initial trestle apis were for performing a discrete set of operations on the files in the trestle directory. However, an arbitrary set of potential different tasks can be performed on top of OSCAL object. Many of these are \"workflow\" style items. For trestle tasks a simple interface has been designed: Tasks are considered independent. Interdependent use of tasks may be performed by is presumed to be performed outside of trestle e.g. a tool such as tekton is used to ensure fail-safety Trestle tasks are primarily configured via config files rather than the CLI. This allows us to maintain a relatively simple CLI interface. Principles for trestle tasks \u00a4 Trestle tasks must not take an object in the 'editing space' and move it to the 'published \"dist\" space'. Trestle tasks MAY NOT take content from both spaces at the same time. Trestle tasks MUST be able to be report on status as a task outcome Trestle tasks SHOULD be able to be rolled back if technicallly fesiable. If trestle tasks cannot be rolled back trestle actions should have a dry run mode / probing mode. Trestle tasks SHOULD use the internal actions framework to queue / rollback operations. Users \u00a4 Trestle developers Trestle stakeholders looking for improvements. Interaction styles to use tasks. \u00a4 Assumptions \u00a4 Users need to be able to select tasks tasks will need configuration information. Configuration information may be inconsistent acros various APIs Configuration information may include credentials tasks may be invoked as a python API call API call does may pass configuration manually. By default will use config trestle tasks tasks_name #uses default config file in .trestle directory trestle tasks tasks_name -c config.file # tasks will execute using user provided config file. trestle tasks -l returns all tasks with descriptions class MyTask(TasksBase): def __init__(self, config_object): def execute(self) returns succes criteria Reference tasks \u00a4 tasks 6: Target to component generation based on applicable controls. \u00a4 Inputs \u00a4 One target definition One profile Outputs \u00a4 One component definition Operation \u00a4 tasks 1: Creation of an sP from profile and component definition. \u00a4 Inputs \u00a4 1:N Component definitions with a total of M components () 1 or more profiles (profiles are recursive) (e.g. we need to collapse profiles) - List of components applicable which is a subset of the M components. Outputs \u00a4 Notes: \u00a4 Profile resolution is not required for first version (can be tested by ensuring profile only refers to a catalog object.) Component definitions in this use case are generic and will require a filtering both by applicable component and applicable controls. task 2: Partial SSP asembly from non-OSCAL artifacts or fragmentary artifacts \u00a4 task 3: AP Generation from SSP and inventory. \u00a4 task 4: Generation of pretty print OSCAL documents from json/yaml source \u00a4 task 5: Generation of asesment results with multiple sets of obserations \u00a4 task 7: SSP inventory injection (SSP + inventory => SSP with inventory.) \u00a4 task 8: SSP merging (service -> Platform): \u00a4 tasks 9: Approval integrated change detection. \u00a4 Open questions: \u00a4 Templating mechanisms. Inheritence of partial filled documents. Behaviour on overwrite control.","title":"Trestle Task Specifications (v0.0.1)"},{"location":"trestle-task-spec/#trestle-task-specifications-v001","text":"","title":"Trestle Task Specifications (v0.0.1)"},{"location":"trestle-task-spec/#table-of-contents","text":"Purpose Users Scope Trestle commands Draft commands Future work Deploy commands Monitor commands Reporting commands","title":"Table of Contents"},{"location":"trestle-task-spec/#purpose","text":"This document contains detail on \"trestle tasks\": A definition of what the task it is and the usecases. The Abstractions provided by a task. The expectation for a task in terms of behaviour. Key identified workflows.","title":"Purpose"},{"location":"trestle-task-spec/#overview-of-trestle-tasks","text":"The initial trestle apis were for performing a discrete set of operations on the files in the trestle directory. However, an arbitrary set of potential different tasks can be performed on top of OSCAL object. Many of these are \"workflow\" style items. For trestle tasks a simple interface has been designed: Tasks are considered independent. Interdependent use of tasks may be performed by is presumed to be performed outside of trestle e.g. a tool such as tekton is used to ensure fail-safety Trestle tasks are primarily configured via config files rather than the CLI. This allows us to maintain a relatively simple CLI interface.","title":"Overview of trestle tasks"},{"location":"trestle-task-spec/#principles-for-trestle-tasks","text":"Trestle tasks must not take an object in the 'editing space' and move it to the 'published \"dist\" space'. Trestle tasks MAY NOT take content from both spaces at the same time. Trestle tasks MUST be able to be report on status as a task outcome Trestle tasks SHOULD be able to be rolled back if technicallly fesiable. If trestle tasks cannot be rolled back trestle actions should have a dry run mode / probing mode. Trestle tasks SHOULD use the internal actions framework to queue / rollback operations.","title":"Principles for trestle tasks"},{"location":"trestle-task-spec/#users","text":"Trestle developers Trestle stakeholders looking for improvements.","title":"Users"},{"location":"trestle-task-spec/#interaction-styles-to-use-tasks","text":"","title":"Interaction styles to use tasks."},{"location":"trestle-task-spec/#assumptions","text":"Users need to be able to select tasks tasks will need configuration information. Configuration information may be inconsistent acros various APIs Configuration information may include credentials tasks may be invoked as a python API call API call does may pass configuration manually. By default will use config trestle tasks tasks_name #uses default config file in .trestle directory trestle tasks tasks_name -c config.file # tasks will execute using user provided config file. trestle tasks -l returns all tasks with descriptions class MyTask(TasksBase): def __init__(self, config_object): def execute(self) returns succes criteria","title":"Assumptions"},{"location":"trestle-task-spec/#reference-tasks","text":"","title":"Reference tasks"},{"location":"trestle-task-spec/#tasks-6-target-to-component-generation-based-on-applicable-controls","text":"","title":"tasks 6: Target to component generation based on applicable controls."},{"location":"trestle-task-spec/#inputs","text":"One target definition One profile","title":"Inputs"},{"location":"trestle-task-spec/#outputs","text":"One component definition","title":"Outputs"},{"location":"trestle-task-spec/#operation","text":"","title":"Operation"},{"location":"trestle-task-spec/#tasks-1-creation-of-an-sp-from-profile-and-component-definition","text":"","title":"tasks 1: Creation of an sP from profile and component definition."},{"location":"trestle-task-spec/#inputs_1","text":"1:N Component definitions with a total of M components () 1 or more profiles (profiles are recursive) (e.g. we need to collapse profiles) - List of components applicable which is a subset of the M components.","title":"Inputs"},{"location":"trestle-task-spec/#outputs_1","text":"","title":"Outputs"},{"location":"trestle-task-spec/#notes","text":"Profile resolution is not required for first version (can be tested by ensuring profile only refers to a catalog object.) Component definitions in this use case are generic and will require a filtering both by applicable component and applicable controls.","title":"Notes:"},{"location":"trestle-task-spec/#task-2-partial-ssp-asembly-from-non-oscal-artifacts-or-fragmentary-artifacts","text":"","title":"task 2: Partial SSP asembly from non-OSCAL artifacts or fragmentary artifacts"},{"location":"trestle-task-spec/#task-3-ap-generation-from-ssp-and-inventory","text":"","title":"task 3: AP Generation from SSP and inventory."},{"location":"trestle-task-spec/#task-4-generation-of-pretty-print-oscal-documents-from-jsonyaml-source","text":"","title":"task 4: Generation of pretty print OSCAL documents from json/yaml source"},{"location":"trestle-task-spec/#task-5-generation-of-asesment-results-with-multiple-sets-of-obserations","text":"","title":"task 5: Generation of asesment results with multiple sets of obserations"},{"location":"trestle-task-spec/#task-7-ssp-inventory-injection-ssp-inventory-ssp-with-inventory","text":"","title":"task 7: SSP inventory injection (SSP + inventory =&gt; SSP with inventory.)"},{"location":"trestle-task-spec/#task-8-ssp-merging-service-platform","text":"","title":"task 8: SSP merging (service -&gt; Platform):"},{"location":"trestle-task-spec/#tasks-9-approval-integrated-change-detection","text":"","title":"tasks 9: Approval integrated change detection."},{"location":"trestle-task-spec/#open-questions","text":"Templating mechanisms. Inheritence of partial filled documents. Behaviour on overwrite control.","title":"Open questions:"},{"location":"trestle_author/","text":"trestle CLI for governance of authored documents \u00a4 Overview \u00a4 The premise of trestle is to support managing compliance artifacts as code. When this is considered, many organisations using {github|gitlab|bitbucket} rely on markdown documents for documentary artifacts that may either directly or indirectly support compliance efforts. To support this trestle has the concept of 'governing' documents that are authored documents: Where structural conditions are enforced on the markdown documents to allow automation and to ensure business processes are met. Living in the GitOps world this capability is anchored with markdown files as the core of the workflows. Currently drawio files are also supported for a subset of enforcement mechanisms. Why is this capability in trestle? \u00a4 While trestle provides editing support for OSCAL there is an unfortunate truth that for some compliance workflows: OSCAL does not cover the lower level operational workflows. Some users will not be comfortable editing in json/yaml/xml formats The markdown centric workflows allow transition path where capability is being developed Governance mechanisms \u00a4 Markdown structural enforcement \u00a4 In order for trestle to enforce structure an approach has been taken for how to template markdown documents. There are two mechanism that are enforced: Enforcing a heading structure within the markdown document: Enforcing a structured header within the markdown document either by using yaml headers or a designated heading. For enforcing the heading structure the mechanism used is the following: Markdown headings As an example are considered to be nested based on the heading level (e.g. heading is below top level heading ). For a document to contain the structural requirements it must contain all the headings provided in the template, however, can contain additional nested templates. Given this template: # Template heading 1 # Template heading 2 ## Template sub heading The following document is acceptable: # Template heading 1 Content for heading one ## Non-required sub header Content for non-required sub header # Template heading 2 Content for heading two ## Template sub heading Content for template sub heading ### non required sub-sub heading This sub-sub heading is okay However, violations such as adding or removing a heading at a level that has been templated is not acceptable e.g.: # Template heading 1 Content for heading one ## Non-required sub header Content for non-required sub header # Template heading 2 Content for heading two ## Template sub heading Content for template sub heading ## sub heading that violates template This sub heading is NOT okay # Top level heading that is not okay For each of the headings - the text of the heading is enforced with one caveat: If the template heading text is wrapped in curly brackets {} then the name is not measured e.g. # {Insert title here} . Strict header / heading conformance mechanisms \u00a4 Two mechanisms are provided to enforce metadata within markdown documents. The first is the yaml header, as used by technologies such as jekyll, the second is a markdown 'governed heading` where templating of the content is enforced. Use of the yaml header is strongly encouraged as a first preference. --- yaml: header: - with some - structure more: information --- # The rest of my document The yaml header is structurally enforced my measuring whether the template key structure is reflected in the measured document. It does not measure values for yaml attributes. For the above markdown document the array value for yaml.header could be replaced with a single value or expanded. Enforcing the yaml header is enabled by -hv where available. For enforcing a governed heading the structural enforcement mechanism assumes that the key:value structure simply takes the form that following that for each line of content under the chosen heading the template content is a subset of the measured document, in the order provided in the template. This is performed after removing formatting (such as bolding), and any HTML comments. Given: # heading for strict enforcement my_key: **my_key_2:** my_other key with strange stuff?? The following heading would be acceptable. # heading for strict enforcement my_key: my value my_key_2: my value my_other key with strange stuff?? my value This capability, where available, is activated by --governed-heading or -gh Drawio enforcement mechanisms \u00a4 Drawio or diagrams.net is a diagramming platform which has significant use for architecture diagrams. In the context of governance of content trestle is supporting enforcement of metadata. Drawio (or mxgraph ) files have a set of data fields. In a drawio file this is available the edit menu as edit data . The diagram below shows how to access the (meta)data. The data presents as a set of key-value pairs which can be edited (see below). The data is bound to each tab in a drawio file. The trestle CLI currently expects that metadata (whether from the template or file to be measured) is in the first tab when editing the draw io file. trestle author governed-docs \u00a4 author docs is designed to support enforcing and generating templating markdown files within a single folder based on a task name. Currently author docs supports markdown files only. trestle author docs setup -tn my_task_name Create the necessary directory structures for running governed docs validation. A template file will be created in TRESTLE_ROOT/.trestle/author/my_task_name/template.md and be applied to all markdown files here: TRESTLE_ROOT/my_task_name/*.md . trestle author docs create-sample -tn my_task_name Creates a sample file in TRESTLE_ROOT/my_task_name/ trestle author docs template-validate -tn my_task_name Ensures that the markdown is parseable. If --governed-heading 'heading name' is passed it ensures that the required heading exists. trestle author docs validate -tn my_task_name validates the markdown, optionally with a --governed-heading or -hv yaml header based on this TRESTLE_ROOT/.trestle/author/my_task_name/template.md template to all markdown files here: TRESTLE_ROOT/my_task_name/*.md . Extra options \u00a4 recursive ( -r , --recurse ) \u00a4 By default author docs only indexes a flat directory. The recursive option allows the markdown files to be nested in sub-directories. Header only validation ( -hov , --header-only-validate ) \u00a4 Turns off the validation of the structure of the document and only validates the yaml header structure. trestle author folders \u00a4 `author folders is designed to allow the assembly of groups of templates where the folder assembly is the unique instance. Trestle author folders supports validation of both markdown and drawio files. Note that headers / metadata must be specified in each applicable template. For example given the following template setup using trestle author folders setup -tn my_task_2 trestle_root \u2523 .trestle \u2503 \u2523 author \u2503 \u2503 \u2517 my_task_2 \u2503 \u2503 \u2503 \u2523 a_template.md \u2503 \u2503 \u2503 \u2523 another_template.md \u2503 \u2503 \u2503 \u2517 template.drawio \u2503 \u2517 config.ini Each task folder is required to meet template requirements for both a_template.md , another_template.md , and template.drawio. The names, numbers, and nesting of folders is user specifiable, however, unlike docs the names must be carried over to each instances. Following the similar structure of docs , measurement occurs in the my_task_2 where this structure is enforced for every directory. trestle_root \u2523 .trestle \u2523 my_task_2 \u2503 \u2523 User_chosen_name \u2503 \u2503 \u2523 a_template.md \u2503 \u2503 \u2523 template.drawio \u2503 \u2503 \u2517 another_template.md \u2503 \u2517 Second_user_chosen_name \u2503 \u2503 \u2523 a_template.md \u2503 \u2503 \u2523 template.drawio \u2503 \u2503 \u2517 another_template.md Supported options \u00a4 Header validate ( -hv / --header-validate ) \u00a4 Validate the headers in markdown and metadata in drawio files. Header only validation ( -hov , --header-only-validate ) \u00a4 Turns off the validation of the structure of the document and only validates the yaml header structure and drawio files. trestle author headers \u00a4 Trestle author headers supports a different usecase that of docs and folders above: Some content is governed, however, it the content is non-standardized. The result: metadata but not content needs to be measured. author headers provides this functionality for drawio and markdown files. trestle author headers setup -tn my_task_name Create the necessary directory structures for running header only validation. Per supported file type (e.g. drawio and md) a template file will be generated with the format of template.{extension name} e.g. e.g.: trestle_root \u2523 .trestle \u2503 \u2523 md \u2503 \u2503 \u2517 my_task_2 \u2503 \u2503 \u2503 \u2523 template.md \u2503 \u2503 \u2503 \u2517 template.drawio \u2503 \u2517 config.ini trestle author headers template-validate -tn my_task_name Ensures that the respective template files are parseable. trestle author headers validate -tn my_task_name Will validate all files within the directory against the templates by matching the extensions. Supported options \u00a4 Recursive ( -r , --recurse ) \u00a4 By default author headers only indexes a flat directory. The recursive option allows the discovery of sub directories. Global ( -g , --global ) \u00a4 Allows a single set of templates defined in .trestle/author/__global__ to be applied to mulitple directories in trestle. If --task-name is not provided all folders in the repository will be measured. trestle author ssp-generate \u00a4 The ssp-generate sub-command creates a partial SSP (System Security Plan) from a profile and optional yaml header file. ssp-assemble (described below) can later assemble the markdown files into a single json SSP file. The profile contains a list of imports that are either a direct reference to a catalog, or an indirect reference via a profile. There may be multiple imports of either type, and referenced profiles may themselves import either catalogs or profiles. Each profile involved may specify the controls that should be imported, along with any modifications to those controls. This command internally creates a resolved profile catalog and generates a directory containing a set of markdown files, one for each control in the resolved catalog. Each markdown file has the optional yaml header embedded at the start of the file. Example usage for creation of the markdown: trestle author ssp-generate -p my_prof -y /my_yaml_dir/header.yaml -s 'ImplGuidance:Implementation Guidance,ExpectedEvidence:Expected Evidence' -o my_ssp In this example the profile has previously been imported into the trestle project directory. The profile itself must be in the trestle directory, but the imported catalogs and profiles may be URI's with href's as described below. The -s --section argument specifies the name of Parts in the control for which the corresponding prose should be included in the control's markdown file. Each colon-separated pair refers to the actual part name first, followed by the form that should be used in the heading for that section. This is done because the name itself may be abbreviated and lack needed spaces between words. (Note that the single quotes are required on Unix-like systems, but on Windows they are only needed if the contained string includes spaces, in which case double quotes should be used.) In the example above, the two sections loaded are ImplGuidance and ExpectedEvidence - and their aliases are provided with full spacing and spelling so the section headers will have proper titles. The output will be placed in the trestle subdirectory my_ssp with a subdirectory for each control group. If the imported catalogs or profiles are not at the URI pointed to by the Import href of the profile then the href should be changed using the trestle href command. The optional yaml header file can be anywhere in the file system. The resulting files look like this --- control-origination: - Service Provider Corporate - Service Provider System Specific responsible-roles: - Customer --- # ac-1 - Access Control Policy and Procedures ## Control Description - \\[a.\\] Develop, document, and disseminate to all personell: - \\[1.\\] A thorough access control policy that: - \\[(a)\\] Addresses purpose, scope, roles, responsibilities, management commitment, coordination among organizational entities, and compliance; and - \\[(b)\\] Is consistent with applicable laws, executive orders, directives, regulations, policies, standards, and guidelines; and - \\[2.\\] Procedures to facilitate the implementation of the access control policy and the associated access controls; - \\[b.\\] Designate an officer to manage the development, documentation, and dissemination of the access control policy and procedures; and - \\[c.\\] Review and update the current access control: - \\[1.\\] Policy weekly and following all meetings; and - \\[2.\\] Procedures monthly and following conferences. _______________________________________________________________________________ ## ac-1 Section Implementation Guidance Do it carefully. _______________________________________________________________________________ ## ac-1 Section Expected Evidence Detailed logs. _______________________________________________________________________________ ## ac-1 What is the solution and how is it implemented? _______________________________________________________________________________ ### Part a. Add control implementation description here. _______________________________________________________________________________ ### Part b. Add control implementation description here. _______________________________________________________________________________ ### Part c. Add control implementation description here. _______________________________________________________________________________ Each label in the ssp is wrapped in \\[ \\] to indicate it comes directly from the label in the control and is not generated by the markdown viewer. Keep in mind that the actual label is the same but with the \\[ \\] removed. Note that for each statement in the control description there is a corresponding response section in which to provide a detailed response for later inclusion in the final ssp as the control implementation. Also note that the optional final sections are provided, and labeled using the alias given at the command line. After generating the markdown for the resolved profile catalog you may then edit the files and provide text in the sections with Add control implementation... in them. But do not remove the horizontal rule lines or modify/remove the lines with ### Part in them. They are used to match the added prose to the corresponding control part description. If you edit the control markdown files you may run ssp-generate again and your edits will not be overwritten. When writing out the markdown for a control, any existing markdown for that control will be read and the response text for each part will be re-inserted into the new markdown file. If the new markdown has added parts the original responses will be placed correctly in the new file, but if any part is removed from the control in the update then any corresponding prose will be lost. trestle author ssp-assemble \u00a4 After manually edting the markdown and providing the responses for the control implementation requirements, the markdown can be assembled into a single json SSP file with: trestle author ssp-assemble -m my_ssp -o my_json_ssp This will assemble the markdown files in the my_ssp directory and create a json SSP with name my_json_ssp in the system-security-plans directory. As indicated for ssp-generate , please do not alter any of the horizontal rule lines or lines indicating the part or control id, e.g. ### Part a. . You may run ssp-generate and ssp-assemble repeatedly for the same markdown directory, allowing a continuous editing and updating cycle.","title":"CLI for authoring governed content"},{"location":"trestle_author/#trestle-cli-for-governance-of-authored-documents","text":"","title":"trestle CLI for governance of authored documents"},{"location":"trestle_author/#overview","text":"The premise of trestle is to support managing compliance artifacts as code. When this is considered, many organisations using {github|gitlab|bitbucket} rely on markdown documents for documentary artifacts that may either directly or indirectly support compliance efforts. To support this trestle has the concept of 'governing' documents that are authored documents: Where structural conditions are enforced on the markdown documents to allow automation and to ensure business processes are met. Living in the GitOps world this capability is anchored with markdown files as the core of the workflows. Currently drawio files are also supported for a subset of enforcement mechanisms.","title":"Overview"},{"location":"trestle_author/#why-is-this-capability-in-trestle","text":"While trestle provides editing support for OSCAL there is an unfortunate truth that for some compliance workflows: OSCAL does not cover the lower level operational workflows. Some users will not be comfortable editing in json/yaml/xml formats The markdown centric workflows allow transition path where capability is being developed","title":"Why is this capability in trestle?"},{"location":"trestle_author/#governance-mechanisms","text":"","title":"Governance mechanisms"},{"location":"trestle_author/#markdown-structural-enforcement","text":"In order for trestle to enforce structure an approach has been taken for how to template markdown documents. There are two mechanism that are enforced: Enforcing a heading structure within the markdown document: Enforcing a structured header within the markdown document either by using yaml headers or a designated heading. For enforcing the heading structure the mechanism used is the following: Markdown headings As an example are considered to be nested based on the heading level (e.g. heading is below top level heading ). For a document to contain the structural requirements it must contain all the headings provided in the template, however, can contain additional nested templates. Given this template: # Template heading 1 # Template heading 2 ## Template sub heading The following document is acceptable: # Template heading 1 Content for heading one ## Non-required sub header Content for non-required sub header # Template heading 2 Content for heading two ## Template sub heading Content for template sub heading ### non required sub-sub heading This sub-sub heading is okay However, violations such as adding or removing a heading at a level that has been templated is not acceptable e.g.: # Template heading 1 Content for heading one ## Non-required sub header Content for non-required sub header # Template heading 2 Content for heading two ## Template sub heading Content for template sub heading ## sub heading that violates template This sub heading is NOT okay # Top level heading that is not okay For each of the headings - the text of the heading is enforced with one caveat: If the template heading text is wrapped in curly brackets {} then the name is not measured e.g. # {Insert title here} .","title":"Markdown structural enforcement"},{"location":"trestle_author/#strict-header-heading-conformance-mechanisms","text":"Two mechanisms are provided to enforce metadata within markdown documents. The first is the yaml header, as used by technologies such as jekyll, the second is a markdown 'governed heading` where templating of the content is enforced. Use of the yaml header is strongly encouraged as a first preference. --- yaml: header: - with some - structure more: information --- # The rest of my document The yaml header is structurally enforced my measuring whether the template key structure is reflected in the measured document. It does not measure values for yaml attributes. For the above markdown document the array value for yaml.header could be replaced with a single value or expanded. Enforcing the yaml header is enabled by -hv where available. For enforcing a governed heading the structural enforcement mechanism assumes that the key:value structure simply takes the form that following that for each line of content under the chosen heading the template content is a subset of the measured document, in the order provided in the template. This is performed after removing formatting (such as bolding), and any HTML comments. Given: # heading for strict enforcement my_key: **my_key_2:** my_other key with strange stuff?? The following heading would be acceptable. # heading for strict enforcement my_key: my value my_key_2: my value my_other key with strange stuff?? my value This capability, where available, is activated by --governed-heading or -gh","title":"Strict header / heading conformance mechanisms"},{"location":"trestle_author/#drawio-enforcement-mechanisms","text":"Drawio or diagrams.net is a diagramming platform which has significant use for architecture diagrams. In the context of governance of content trestle is supporting enforcement of metadata. Drawio (or mxgraph ) files have a set of data fields. In a drawio file this is available the edit menu as edit data . The diagram below shows how to access the (meta)data. The data presents as a set of key-value pairs which can be edited (see below). The data is bound to each tab in a drawio file. The trestle CLI currently expects that metadata (whether from the template or file to be measured) is in the first tab when editing the draw io file.","title":"Drawio enforcement mechanisms"},{"location":"trestle_author/#trestle-author-governed-docs","text":"author docs is designed to support enforcing and generating templating markdown files within a single folder based on a task name. Currently author docs supports markdown files only. trestle author docs setup -tn my_task_name Create the necessary directory structures for running governed docs validation. A template file will be created in TRESTLE_ROOT/.trestle/author/my_task_name/template.md and be applied to all markdown files here: TRESTLE_ROOT/my_task_name/*.md . trestle author docs create-sample -tn my_task_name Creates a sample file in TRESTLE_ROOT/my_task_name/ trestle author docs template-validate -tn my_task_name Ensures that the markdown is parseable. If --governed-heading 'heading name' is passed it ensures that the required heading exists. trestle author docs validate -tn my_task_name validates the markdown, optionally with a --governed-heading or -hv yaml header based on this TRESTLE_ROOT/.trestle/author/my_task_name/template.md template to all markdown files here: TRESTLE_ROOT/my_task_name/*.md .","title":"trestle author governed-docs"},{"location":"trestle_author/#extra-options","text":"","title":"Extra options"},{"location":"trestle_author/#recursive-r-recurse","text":"By default author docs only indexes a flat directory. The recursive option allows the markdown files to be nested in sub-directories.","title":"recursive (-r, --recurse)"},{"location":"trestle_author/#header-only-validation-hov-header-only-validate","text":"Turns off the validation of the structure of the document and only validates the yaml header structure.","title":"Header only validation (-hov, --header-only-validate)"},{"location":"trestle_author/#trestle-author-folders","text":"`author folders is designed to allow the assembly of groups of templates where the folder assembly is the unique instance. Trestle author folders supports validation of both markdown and drawio files. Note that headers / metadata must be specified in each applicable template. For example given the following template setup using trestle author folders setup -tn my_task_2 trestle_root \u2523 .trestle \u2503 \u2523 author \u2503 \u2503 \u2517 my_task_2 \u2503 \u2503 \u2503 \u2523 a_template.md \u2503 \u2503 \u2503 \u2523 another_template.md \u2503 \u2503 \u2503 \u2517 template.drawio \u2503 \u2517 config.ini Each task folder is required to meet template requirements for both a_template.md , another_template.md , and template.drawio. The names, numbers, and nesting of folders is user specifiable, however, unlike docs the names must be carried over to each instances. Following the similar structure of docs , measurement occurs in the my_task_2 where this structure is enforced for every directory. trestle_root \u2523 .trestle \u2523 my_task_2 \u2503 \u2523 User_chosen_name \u2503 \u2503 \u2523 a_template.md \u2503 \u2503 \u2523 template.drawio \u2503 \u2503 \u2517 another_template.md \u2503 \u2517 Second_user_chosen_name \u2503 \u2503 \u2523 a_template.md \u2503 \u2503 \u2523 template.drawio \u2503 \u2503 \u2517 another_template.md","title":"trestle author folders"},{"location":"trestle_author/#supported-options","text":"","title":"Supported options"},{"location":"trestle_author/#header-validate-hv-header-validate","text":"Validate the headers in markdown and metadata in drawio files.","title":"Header validate (-hv/--header-validate)"},{"location":"trestle_author/#header-only-validation-hov-header-only-validate_1","text":"Turns off the validation of the structure of the document and only validates the yaml header structure and drawio files.","title":"Header only validation (-hov, --header-only-validate)"},{"location":"trestle_author/#trestle-author-headers","text":"Trestle author headers supports a different usecase that of docs and folders above: Some content is governed, however, it the content is non-standardized. The result: metadata but not content needs to be measured. author headers provides this functionality for drawio and markdown files. trestle author headers setup -tn my_task_name Create the necessary directory structures for running header only validation. Per supported file type (e.g. drawio and md) a template file will be generated with the format of template.{extension name} e.g. e.g.: trestle_root \u2523 .trestle \u2503 \u2523 md \u2503 \u2503 \u2517 my_task_2 \u2503 \u2503 \u2503 \u2523 template.md \u2503 \u2503 \u2503 \u2517 template.drawio \u2503 \u2517 config.ini trestle author headers template-validate -tn my_task_name Ensures that the respective template files are parseable. trestle author headers validate -tn my_task_name Will validate all files within the directory against the templates by matching the extensions.","title":"trestle author headers"},{"location":"trestle_author/#supported-options_1","text":"","title":"Supported options"},{"location":"trestle_author/#recursive-r-recurse_1","text":"By default author headers only indexes a flat directory. The recursive option allows the discovery of sub directories.","title":"Recursive (-r, --recurse)"},{"location":"trestle_author/#global-g-global","text":"Allows a single set of templates defined in .trestle/author/__global__ to be applied to mulitple directories in trestle. If --task-name is not provided all folders in the repository will be measured.","title":"Global (-g, --global)"},{"location":"trestle_author/#trestle-author-ssp-generate","text":"The ssp-generate sub-command creates a partial SSP (System Security Plan) from a profile and optional yaml header file. ssp-assemble (described below) can later assemble the markdown files into a single json SSP file. The profile contains a list of imports that are either a direct reference to a catalog, or an indirect reference via a profile. There may be multiple imports of either type, and referenced profiles may themselves import either catalogs or profiles. Each profile involved may specify the controls that should be imported, along with any modifications to those controls. This command internally creates a resolved profile catalog and generates a directory containing a set of markdown files, one for each control in the resolved catalog. Each markdown file has the optional yaml header embedded at the start of the file. Example usage for creation of the markdown: trestle author ssp-generate -p my_prof -y /my_yaml_dir/header.yaml -s 'ImplGuidance:Implementation Guidance,ExpectedEvidence:Expected Evidence' -o my_ssp In this example the profile has previously been imported into the trestle project directory. The profile itself must be in the trestle directory, but the imported catalogs and profiles may be URI's with href's as described below. The -s --section argument specifies the name of Parts in the control for which the corresponding prose should be included in the control's markdown file. Each colon-separated pair refers to the actual part name first, followed by the form that should be used in the heading for that section. This is done because the name itself may be abbreviated and lack needed spaces between words. (Note that the single quotes are required on Unix-like systems, but on Windows they are only needed if the contained string includes spaces, in which case double quotes should be used.) In the example above, the two sections loaded are ImplGuidance and ExpectedEvidence - and their aliases are provided with full spacing and spelling so the section headers will have proper titles. The output will be placed in the trestle subdirectory my_ssp with a subdirectory for each control group. If the imported catalogs or profiles are not at the URI pointed to by the Import href of the profile then the href should be changed using the trestle href command. The optional yaml header file can be anywhere in the file system. The resulting files look like this --- control-origination: - Service Provider Corporate - Service Provider System Specific responsible-roles: - Customer --- # ac-1 - Access Control Policy and Procedures ## Control Description - \\[a.\\] Develop, document, and disseminate to all personell: - \\[1.\\] A thorough access control policy that: - \\[(a)\\] Addresses purpose, scope, roles, responsibilities, management commitment, coordination among organizational entities, and compliance; and - \\[(b)\\] Is consistent with applicable laws, executive orders, directives, regulations, policies, standards, and guidelines; and - \\[2.\\] Procedures to facilitate the implementation of the access control policy and the associated access controls; - \\[b.\\] Designate an officer to manage the development, documentation, and dissemination of the access control policy and procedures; and - \\[c.\\] Review and update the current access control: - \\[1.\\] Policy weekly and following all meetings; and - \\[2.\\] Procedures monthly and following conferences. _______________________________________________________________________________ ## ac-1 Section Implementation Guidance Do it carefully. _______________________________________________________________________________ ## ac-1 Section Expected Evidence Detailed logs. _______________________________________________________________________________ ## ac-1 What is the solution and how is it implemented? _______________________________________________________________________________ ### Part a. Add control implementation description here. _______________________________________________________________________________ ### Part b. Add control implementation description here. _______________________________________________________________________________ ### Part c. Add control implementation description here. _______________________________________________________________________________ Each label in the ssp is wrapped in \\[ \\] to indicate it comes directly from the label in the control and is not generated by the markdown viewer. Keep in mind that the actual label is the same but with the \\[ \\] removed. Note that for each statement in the control description there is a corresponding response section in which to provide a detailed response for later inclusion in the final ssp as the control implementation. Also note that the optional final sections are provided, and labeled using the alias given at the command line. After generating the markdown for the resolved profile catalog you may then edit the files and provide text in the sections with Add control implementation... in them. But do not remove the horizontal rule lines or modify/remove the lines with ### Part in them. They are used to match the added prose to the corresponding control part description. If you edit the control markdown files you may run ssp-generate again and your edits will not be overwritten. When writing out the markdown for a control, any existing markdown for that control will be read and the response text for each part will be re-inserted into the new markdown file. If the new markdown has added parts the original responses will be placed correctly in the new file, but if any part is removed from the control in the update then any corresponding prose will be lost.","title":"trestle author ssp-generate"},{"location":"trestle_author/#trestle-author-ssp-assemble","text":"After manually edting the markdown and providing the responses for the control implementation requirements, the markdown can be assembled into a single json SSP file with: trestle author ssp-assemble -m my_ssp -o my_json_ssp This will assemble the markdown files in the my_ssp directory and create a json SSP with name my_json_ssp in the system-security-plans directory. As indicated for ssp-generate , please do not alter any of the horizontal rule lines or lines indicating the part or control id, e.g. ### Part a. . You may run ssp-generate and ssp-assemble repeatedly for the same markdown directory, allowing a continuous editing and updating cycle.","title":"trestle author ssp-assemble"},{"location":"api_reference/trestle.cli/","text":"trestle.cli \u00a4 Starting point for the Trestle CLI. logger \u00a4 Classes \u00a4 Trestle ( CommandPlusDocs ) \u00a4 Manage OSCAL files in a human friendly manner. subcommands \u00a4 Functions \u00a4 run () \u00a4 Run the trestle cli. Source code in trestle/cli.py def run () -> None : \"\"\"Run the trestle cli.\"\"\" log . set_global_logging_levels () logger . debug ( 'Main entry point.' ) exit ( Trestle () . run ()) handler: python","title":"cli"},{"location":"api_reference/trestle.cli/#trestle.cli","text":"Starting point for the Trestle CLI.","title":"cli"},{"location":"api_reference/trestle.cli/#trestle.cli.logger","text":"","title":"logger"},{"location":"api_reference/trestle.cli/#trestle.cli-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.cli/#trestle.cli.Trestle","text":"Manage OSCAL files in a human friendly manner.","title":"Trestle"},{"location":"api_reference/trestle.cli/#trestle.cli.Trestle.subcommands","text":"","title":"subcommands"},{"location":"api_reference/trestle.cli/#trestle.cli-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.cli/#trestle.cli.run","text":"Run the trestle cli. Source code in trestle/cli.py def run () -> None : \"\"\"Run the trestle cli.\"\"\" log . set_global_logging_levels () logger . debug ( 'Main entry point.' ) exit ( Trestle () . run ()) handler: python","title":"run()"},{"location":"api_reference/trestle.core.all_validator/","text":"trestle.core.all_validator \u00a4 Validate based on all registered validators. Classes \u00a4 AllValidator ( Validator ) \u00a4 Validator to confirm the model passes all registered validation tests. Methods \u00a4 error_msg ( self ) \u00a4 Return information on which validation failed. Source code in trestle/core/all_validator.py def error_msg ( self ) -> str : \"\"\"Return information on which validation failed.\"\"\" return self . last_failure_msg model_is_valid ( self , model ) \u00a4 Validate an oscal model against all available validators in the trestle library. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool True (valid) if the model passed all registered validators. Source code in trestle/core/all_validator.py def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Validate an oscal model against all available validators in the trestle library. args: model: An Oscal model that can be passed to the validator. returns: True (valid) if the model passed all registered validators. \"\"\" self . last_failure_msg = self . __doc__ for val in vfact . validator_factory . get_all (): if val != self : if not val . model_is_valid ( model ): self . last_failure_msg = val . error_msg () return False return True handler: python","title":"all_validator"},{"location":"api_reference/trestle.core.all_validator/#trestle.core.all_validator","text":"Validate based on all registered validators.","title":"all_validator"},{"location":"api_reference/trestle.core.all_validator/#trestle.core.all_validator-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.all_validator/#trestle.core.all_validator.AllValidator","text":"Validator to confirm the model passes all registered validation tests.","title":"AllValidator"},{"location":"api_reference/trestle.core.all_validator/#trestle.core.all_validator.AllValidator-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.all_validator/#trestle.core.all_validator.AllValidator.error_msg","text":"Return information on which validation failed. Source code in trestle/core/all_validator.py def error_msg ( self ) -> str : \"\"\"Return information on which validation failed.\"\"\" return self . last_failure_msg","title":"error_msg()"},{"location":"api_reference/trestle.core.all_validator/#trestle.core.all_validator.AllValidator.model_is_valid","text":"Validate an oscal model against all available validators in the trestle library. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool True (valid) if the model passed all registered validators. Source code in trestle/core/all_validator.py def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Validate an oscal model against all available validators in the trestle library. args: model: An Oscal model that can be passed to the validator. returns: True (valid) if the model passed all registered validators. \"\"\" self . last_failure_msg = self . __doc__ for val in vfact . validator_factory . get_all (): if val != self : if not val . model_is_valid ( model ): self . last_failure_msg = val . error_msg () return False return True handler: python","title":"model_is_valid()"},{"location":"api_reference/trestle.core.base_model/","text":"trestle.core.base_model \u00a4 Pydantic base model for use within trestle project and associated configuration. The heart of the current OSCAL model within trestle is based on pydantic ( https://pydantic-docs.helpmanual.io/ ) which itself is a veneer on-top of python data classes. Functionality here defines a base-model which all trestle oscal data models inherit from. This allows additional functionality to be easily inserted. I can write a comment in here and you can even edit on the same line. logger \u00a4 Classes \u00a4 OscalBaseModel ( BaseModel ) pydantic-model \u00a4 Trestle defined pydantic base model for use with OSCAL pydantic dataclasses. This BaseModel provides two types of functionality: 1. Overrides default configuation of the pydantic library with behaviours required for trestle 2. Provides utility functions for trestle which are specific to OSCAL and the naming schema associated with it. Classes \u00a4 Config \u00a4 Overriding configuration class for pydantic base model, for use with OSCAL data classes. allow_population_by_field_name \u00a4 extra \u00a4 json_encoders \u00a4 validate_assignment \u00a4 Methods \u00a4 alias_to_field_map () classmethod \u00a4 Create a map from field alias to field. Returns: Type Description Dict[str, pydantic.fields.ModelField] A dict which has key's of aliases and Fields as values. Source code in trestle/core/base_model.py @classmethod def alias_to_field_map ( cls ) -> Dict [ str , ModelField ]: \"\"\"Create a map from field alias to field. Returns: A dict which has key's of aliases and Fields as values. \"\"\" alias_to_field : Dict [ str , ModelField ] = {} for field in cls . __fields__ . values (): alias_to_field [ field . alias ] = field return alias_to_field copy_from ( self , existing_oscal_object ) \u00a4 Copy operation that implicitly does type conversion. Typically would be used to set an attribute, however, does not need to be. Deals with two scenarios: 1) Casting across oscal models of equivalent type. The purpose if this is to cross class spaces. 2) The same as above where the item is an array style object which does not correctly serialize to a dict. 3) if the from and 'to' objects are root schema elements the copy operation will copy the root element to the value. Parameters: Name Type Description Default existing_oscal_object OscalBaseModel The oscal object where fields are copied from. required Source code in trestle/core/base_model.py def copy_from ( self , existing_oscal_object : 'OscalBaseModel' ) -> None : \"\"\" Copy operation that implicitly does type conversion. Typically would be used to set an attribute, however, does not need to be. Deals with two scenarios: 1) Casting across oscal models of equivalent type. The purpose if this is to cross class spaces. 2) The same as above where the item is an array style object which does not correctly serialize to a dict. 3) if the from and 'to' objects are root schema elements the copy operation will copy the root element to the value. Args: existing_oscal_object: The oscal object where fields are copied from. \"\"\" recast_object = existing_oscal_object . copy_to ( self . __class__ ) for raw_field in self . __dict__ . keys (): self . __dict__ [ raw_field ] = recast_object . __dict__ [ raw_field ] copy_to ( self , new_oscal_type ) \u00a4 Opportunistic copy operation between similar types of data classes. Due to the way in which oscal is constructed we get a set of similar / the same definition across various oscal models. Due to the lack of guarantees that they are the same we cannot easily 'collapse' the mode. Parameters: Name Type Description Default new_oscal_type Type[OscalBaseModel] The desired type of oscal model required Returns: Type Description OscalBaseModel Opportunistic copy of the data into the new model type. Source code in trestle/core/base_model.py def copy_to ( self , new_oscal_type : Type [ 'OscalBaseModel' ]) -> 'OscalBaseModel' : \"\"\" Opportunistic copy operation between similar types of data classes. Due to the way in which oscal is constructed we get a set of similar / the same definition across various oscal models. Due to the lack of guarantees that they are the same we cannot easily 'collapse' the mode. Args: new_oscal_type: The desired type of oscal model Returns: Opportunistic copy of the data into the new model type. \"\"\" logger . debug ( 'Copy to started' ) if self . __class__ . __name__ == new_oscal_type . __name__ : logger . debug ( 'Json based copy' ) # Note: Json based oppportunistic copy return new_oscal_type . parse_raw ( self . json ( exclude_none = True , by_alias = True )) if ( '__root__' in self . __fields__ and len ( self . __fields__ ) == 1 and '__root__' in new_oscal_type . __fields__ and len ( new_oscal_type . __fields__ ) == 1 ): logger . debug ( 'Root element based copy too' ) return new_oscal_type . parse_obj ( self . __root__ ) # bad place here. raise err . TrestleError ( 'Provided inconsistent classes to copy to methodology.' ) create_stripped_model_type ( stripped_fields = None , stripped_fields_aliases = None ) classmethod \u00a4 Create a pydantic model, which is derived from the current model, but missing certain fields. OSCAL mandates a 'strict' schema (e.g. unless otherwise stated no additional fields), and certain fields are mandatory. Given this the corresponding dataclasses are also strict. Workflows with trestle require missing mandatory fields. This allows creation of derivative models missing certain fields. Parameters: Name Type Description Default stripped_fields Optional[List[str]] The fields to be removed from the current data class. None stripped_fields_aliases Optional[List[str]] The fields to be removed from the current data class provided by alias. None Returns: Type Description Type[OscalBaseModel] Pydantic data class thta can be used to instanciate a model. Exceptions: Type Description TrestleError If user provided both stripped_fields and stripped_field_aliases or neither. TrestleError If incorrect aliases or field names are provided. Source code in trestle/core/base_model.py @classmethod def create_stripped_model_type ( cls , stripped_fields : Optional [ List [ str ]] = None , stripped_fields_aliases : Optional [ List [ str ]] = None ) -> Type [ 'OscalBaseModel' ]: \"\"\"Create a pydantic model, which is derived from the current model, but missing certain fields. OSCAL mandates a 'strict' schema (e.g. unless otherwise stated no additional fields), and certain fields are mandatory. Given this the corresponding dataclasses are also strict. Workflows with trestle require missing mandatory fields. This allows creation of derivative models missing certain fields. Args: stripped_fields: The fields to be removed from the current data class. stripped_fields_aliases: The fields to be removed from the current data class provided by alias. Returns: Pydantic data class thta can be used to instanciate a model. Raises: TrestleError: If user provided both stripped_fields and stripped_field_aliases or neither. TrestleError: If incorrect aliases or field names are provided. \"\"\" if stripped_fields is not None and stripped_fields_aliases is not None : raise err . TrestleError ( 'Either \"stripped_fields\" or \"stripped_fields_aliases\" need to be passed, not both.' ) elif stripped_fields is None and stripped_fields_aliases is None : raise err . TrestleError ( 'Exactly one of \"stripped_fields\" or \"stripped_fields_aliases\" must be provided' ) # create alias to field_name mapping excluded_fields = [] if stripped_fields is not None : excluded_fields = stripped_fields elif stripped_fields_aliases is not None : alias_to_field = cls . alias_to_field_map () try : excluded_fields = [ alias_to_field [ key ] . name for key in stripped_fields_aliases ] except KeyError as e : raise err . TrestleError ( f 'Field { str ( e ) } does not exist in the model' ) current_fields = cls . __fields__ new_fields_for_model = {} # Build field list for current_mfield in current_fields . values (): if current_mfield . name in excluded_fields : continue # Validate name in the field # Cehcke behaviour with an alias if current_mfield . required : new_fields_for_model [ current_mfield . name ] = ( current_mfield . outer_type_ , Field ( ... , title = current_mfield . name , alias = current_mfield . alias )) else : new_fields_for_model [ current_mfield . name ] = ( Optional [ current_mfield . outer_type_ ], Field ( None , title = current_mfield . name , alias = current_mfield . alias ) ) new_model = create_model ( cls . __name__ , __base__ = OscalBaseModel , ** new_fields_for_model ) # type: ignore # TODO: This typing cast should NOT be necessary. Potentially fixable with a fix to pydantic. Issue #175 new_model = cast ( Type [ OscalBaseModel ], new_model ) return new_model get_collection_type () classmethod \u00a4 If the type wraps an collection, return the collection type. Returns: Type Description Union[Type[List[Any]], Type[Dict[Any, Any]]] The collection type. Exceptions: Type Description err.TrestleError if not a wrapper of the collection type. Source code in trestle/core/base_model.py @classmethod def get_collection_type ( cls ) -> Union [ Type [ List [ Any ]], Type [ Dict [ Any , Any ]]]: \"\"\" If the type wraps an collection, return the collection type. Returns: The collection type. Raises: err.TrestleError: if not a wrapper of the collection type. \"\"\" if not cls . is_collection_container (): raise err . TrestleError ( 'OscalBaseModel is not wrapping a collection type' ) return get_origin ( cls . __fields__ [ '__root__' ] . outer_type_ ) get_field_by_alias ( self , field_alias ) \u00a4 Convert field alias to a field. Source code in trestle/core/base_model.py def get_field_by_alias ( self , field_alias : str ) -> Any : \"\"\"Convert field alias to a field.\"\"\" attr_field = self . alias_to_field_map () . get ( field_alias , None ) return attr_field get_field_value_by_alias ( self , attr_alias ) \u00a4 Get attribute value by field alias. Source code in trestle/core/base_model.py def get_field_value_by_alias ( self , attr_alias : str ) -> Optional [ Any ]: \"\"\"Get attribute value by field alias.\"\"\" # TODO: can this be restricted beyond Any easily. attr_field = self . get_field_by_alias ( attr_alias ) if isinstance ( attr_field , ModelField ): return getattr ( self , attr_field . name , None ) return None is_collection_container () classmethod \u00a4 Determine whether a pydantic model has being created to wrap a collection primitive (e.g a list or dict). In performing model decomposition it is possible using trestle framework to automatically generate a model which looks like class Foo(OscalBaseModel): root : List[Bar] Returns: Type Description bool Boolean on if it meets the above criteria When these cases exist we need special handling of the type information. Source code in trestle/core/base_model.py @classmethod def is_collection_container ( cls ) -> bool : \"\"\" Determine whether a pydantic model has being created to wrap a collection primitive (e.g a list or dict). In performing model decomposition it is possible using trestle framework to automatically generate a model which looks like class Foo(OscalBaseModel): __root__: List[Bar] Returns: Boolean on if it meets the above criteria When these cases exist we need special handling of the type information. \"\"\" # Additional sanity check on field length if len ( cls . __fields__ ) == 1 and '__root__' in cls . __fields__ . keys (): # This is now a __root__ key only model if is_collection_field_type ( cls . __fields__ [ '__root__' ] . outer_type_ ): return True return False oscal_dict ( self ) \u00a4 Return a dictionary including the root wrapping object key. Source code in trestle/core/base_model.py def oscal_dict ( self ) -> Dict [ str , Any ]: \"\"\"Return a dictionary including the root wrapping object key.\"\"\" class_name = self . __class__ . __name__ result = {} result [ classname_to_alias ( class_name , 'json' )] = self . dict ( by_alias = True , exclude_none = True ) return result oscal_read ( path ) classmethod \u00a4 Read OSCAL objects. Handles the fact OSCAL wraps top level elements and also deals with both yaml and json. Parameters: Name Type Description Default path Path The path of the oscal object to read. required Returns: Type Description OscalBaseModel The oscal object read into trestle oscal models. Source code in trestle/core/base_model.py @classmethod def oscal_read ( cls , path : pathlib . Path ) -> 'OscalBaseModel' : \"\"\" Read OSCAL objects. Handles the fact OSCAL wraps top level elements and also deals with both yaml and json. Args: path: The path of the oscal object to read. Returns: The oscal object read into trestle oscal models. \"\"\" # Create the wrapper model. alias = classname_to_alias ( cls . __name__ , 'json' ) content_type = FileContentType . to_content_type ( path . suffix ) logger . debug ( f 'oscal_read content type { content_type } and alias { alias } from { path } ' ) if not path . exists (): logger . warning ( f 'path does not exist in oscal_read: { path } ' ) return None obj : Dict [ str , Any ] = {} try : if content_type == FileContentType . YAML : yaml = YAML ( typ = 'safe' ) fh = path . open ( 'r' , encoding = const . FILE_ENCODING ) obj = yaml . load ( fh ) fh . close () elif content_type == FileContentType . JSON : obj = load_file ( path , json_loads = cls . __config__ . json_loads , ) except Exception as e : raise err . TrestleError ( f 'Error loading file { path } { str ( e ) } ' ) try : if not len ( obj ) == 1 : logger . error ( 'Provided oscal file does not have a single top level key wrapping it.' ) logger . error ( f 'It has { len ( obj ) } keys.' ) raise err . TrestleError ( 'Invalid OSCAL file structure, multiple base keys.' ) parsed = cls . parse_obj ( obj [ alias ]) except KeyError : logger . error ( f 'Provided oscal file does not have top level key: { alias } ' ) raise err . TrestleError ( f 'Provided oscal file does not have top level key key: { alias } ' ) except Exception as e : raise err . TrestleError ( f 'Error parsing file { path } { str ( e ) } ' ) return parsed oscal_serialize_json ( self , pretty = False ) \u00a4 Return an 'oscal wrapped' json object serialized in a compressed form. Parameters: Name Type Description Default pretty bool Whether or not to pretty-print json output or have in compressed form. False Returns: Type Description str Oscal model serialized to a json object including packaging inside of a single top level key. Source code in trestle/core/base_model.py def oscal_serialize_json ( self , pretty : bool = False ) -> str : \"\"\" Return an 'oscal wrapped' json object serialized in a compressed form. Args: pretty: Whether or not to pretty-print json output or have in compressed form. Returns: Oscal model serialized to a json object including packaging inside of a single top level key. \"\"\" if pretty : wrapped = self . _oscal_wrap () wrapped_str = wrapped . json ( exclude_none = True , by_alias = True , indent = 2 , ensure_ascii = False ) else : # Ma class_name = self . __class__ . __name__ tl_alias = classname_to_alias ( class_name , 'json' ) raw_model = self . json ( exclude_none = True , by_alias = True , ensure_ascii = False ) wrapped_str = f ' {{ \" { tl_alias } \": { raw_model } }} ' return wrapped_str oscal_write ( self , path ) \u00a4 Write out a pydantic data model in an oscal friendly way. OSCAL schema mandates that top level elements are wrapped in a singular json/yaml field. This function handles both json and yaml output as well as formatting of the json. Parameters: Name Type Description Default path Path The output file location for the oscal object. required Exceptions: Type Description err.TrestleError If a unknown file extension is provided. Source code in trestle/core/base_model.py def oscal_write ( self , path : pathlib . Path ) -> None : \"\"\" Write out a pydantic data model in an oscal friendly way. OSCAL schema mandates that top level elements are wrapped in a singular json/yaml field. This function handles both json and yaml output as well as formatting of the json. Args: path: The output file location for the oscal object. Raises: err.TrestleError: If a unknown file extension is provided. \"\"\" content_type = FileContentType . to_content_type ( path . suffix ) # The output will have \\r\\n newlines on windows and \\n newlines elsewhere write_file = pathlib . Path ( path ) . open ( 'w' , encoding = const . FILE_ENCODING ) if content_type == FileContentType . YAML : yaml = YAML ( typ = 'safe' ) yaml . dump ( yaml . load ( self . oscal_serialize_json ()), write_file ) elif content_type == FileContentType . JSON : write_file . write ( self . oscal_serialize_json ( pretty = True )) # Flush / close required (by experience) due to flushing issues in tests. write_file . flush () write_file . close () stripped_instance ( self , stripped_fields = None , stripped_fields_aliases = None ) \u00a4 Return a new model instance with the specified fields being stripped. Parameters: Name Type Description Default stripped_fields List[str] The fields to be removed from the current data class. None stripped_fields_aliases List[str] The fields to be removed from the current data class provided by alias. None Returns: Type Description OscalBaseModel The current datamodel with the fields provided removed in a derivate (run time created) data model. Exceptions: Type Description err.TrestleError If user provided both stripped_fields and stripped_field_aliases or neither. err.TrestleError If incorrect aliases or field names are provided. Source code in trestle/core/base_model.py def stripped_instance ( self , stripped_fields : List [ str ] = None , stripped_fields_aliases : List [ str ] = None ) -> 'OscalBaseModel' : \"\"\"Return a new model instance with the specified fields being stripped. Args: stripped_fields: The fields to be removed from the current data class. stripped_fields_aliases: The fields to be removed from the current data class provided by alias. Returns: The current datamodel with the fields provided removed in a derivate (run time created) data model. Raises: err.TrestleError: If user provided both stripped_fields and stripped_field_aliases or neither. err.TrestleError: If incorrect aliases or field names are provided. \"\"\" # stripped class type stripped_class : Type [ OscalBaseModel ] = self . create_stripped_model_type ( stripped_fields = stripped_fields , stripped_fields_aliases = stripped_fields_aliases ) # remaining values remaining_values = {} for field in self . __fields__ . values (): if field . name in stripped_class . __fields__ : remaining_values [ field . name ] = self . __dict__ [ field . name ] # create stripped model instance # TODO: Not sure if we can avoid type escapes here stripped_instance = stripped_class ( ** remaining_values ) # type: ignore return stripped_instance Functions \u00a4 robust_datetime_serialization ( input_dt ) \u00a4 Return a nicely formatted string for in a format compatible with OSCAL specifications. Parameters: Name Type Description Default input_dt datetime Input datetime to convert to a string. required Returns: Type Description str String in isoformat to the millisecond enforcing that timezone offset is provided. Exceptions: Type Description TrestleError Error is raised if datetime object does not contain sufficient timezone information. Source code in trestle/core/base_model.py def robust_datetime_serialization ( input_dt : datetime . datetime ) -> str : \"\"\"Return a nicely formatted string for in a format compatible with OSCAL specifications. Args: input_dt: Input datetime to convert to a string. Returns: String in isoformat to the millisecond enforcing that timezone offset is provided. Raises: TrestleError: Error is raised if datetime object does not contain sufficient timezone information. \"\"\" # fail if the input datetime is not aware - ie it has no associated timezone if input_dt . tzinfo is None : raise err . TrestleError ( 'Missing timezone in datetime' ) if input_dt . tzinfo . utcoffset ( input_dt ) is None : raise err . TrestleError ( 'Missing utcoffset in datetime' ) # use this leave in original timezone rather than utc # return input_dt.astimezone().isoformat(timespec='milliseconds') noqa: E800 # force it to be utc return input_dt . astimezone ( datetime . timezone . utc ) . isoformat ( timespec = 'milliseconds' ) handler: python","title":"base_model"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model","text":"Pydantic base model for use within trestle project and associated configuration. The heart of the current OSCAL model within trestle is based on pydantic ( https://pydantic-docs.helpmanual.io/ ) which itself is a veneer on-top of python data classes. Functionality here defines a base-model which all trestle oscal data models inherit from. This allows additional functionality to be easily inserted. I can write a comment in here and you can even edit on the same line.","title":"base_model"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel","text":"Trestle defined pydantic base model for use with OSCAL pydantic dataclasses. This BaseModel provides two types of functionality: 1. Overrides default configuation of the pydantic library with behaviours required for trestle 2. Provides utility functions for trestle which are specific to OSCAL and the naming schema associated with it.","title":"OscalBaseModel"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.Config","text":"Overriding configuration class for pydantic base model, for use with OSCAL data classes. allow_population_by_field_name \u00a4 extra \u00a4 json_encoders \u00a4 validate_assignment \u00a4","title":"Config"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.alias_to_field_map","text":"Create a map from field alias to field. Returns: Type Description Dict[str, pydantic.fields.ModelField] A dict which has key's of aliases and Fields as values. Source code in trestle/core/base_model.py @classmethod def alias_to_field_map ( cls ) -> Dict [ str , ModelField ]: \"\"\"Create a map from field alias to field. Returns: A dict which has key's of aliases and Fields as values. \"\"\" alias_to_field : Dict [ str , ModelField ] = {} for field in cls . __fields__ . values (): alias_to_field [ field . alias ] = field return alias_to_field","title":"alias_to_field_map()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.copy_from","text":"Copy operation that implicitly does type conversion. Typically would be used to set an attribute, however, does not need to be. Deals with two scenarios: 1) Casting across oscal models of equivalent type. The purpose if this is to cross class spaces. 2) The same as above where the item is an array style object which does not correctly serialize to a dict. 3) if the from and 'to' objects are root schema elements the copy operation will copy the root element to the value. Parameters: Name Type Description Default existing_oscal_object OscalBaseModel The oscal object where fields are copied from. required Source code in trestle/core/base_model.py def copy_from ( self , existing_oscal_object : 'OscalBaseModel' ) -> None : \"\"\" Copy operation that implicitly does type conversion. Typically would be used to set an attribute, however, does not need to be. Deals with two scenarios: 1) Casting across oscal models of equivalent type. The purpose if this is to cross class spaces. 2) The same as above where the item is an array style object which does not correctly serialize to a dict. 3) if the from and 'to' objects are root schema elements the copy operation will copy the root element to the value. Args: existing_oscal_object: The oscal object where fields are copied from. \"\"\" recast_object = existing_oscal_object . copy_to ( self . __class__ ) for raw_field in self . __dict__ . keys (): self . __dict__ [ raw_field ] = recast_object . __dict__ [ raw_field ]","title":"copy_from()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.copy_to","text":"Opportunistic copy operation between similar types of data classes. Due to the way in which oscal is constructed we get a set of similar / the same definition across various oscal models. Due to the lack of guarantees that they are the same we cannot easily 'collapse' the mode. Parameters: Name Type Description Default new_oscal_type Type[OscalBaseModel] The desired type of oscal model required Returns: Type Description OscalBaseModel Opportunistic copy of the data into the new model type. Source code in trestle/core/base_model.py def copy_to ( self , new_oscal_type : Type [ 'OscalBaseModel' ]) -> 'OscalBaseModel' : \"\"\" Opportunistic copy operation between similar types of data classes. Due to the way in which oscal is constructed we get a set of similar / the same definition across various oscal models. Due to the lack of guarantees that they are the same we cannot easily 'collapse' the mode. Args: new_oscal_type: The desired type of oscal model Returns: Opportunistic copy of the data into the new model type. \"\"\" logger . debug ( 'Copy to started' ) if self . __class__ . __name__ == new_oscal_type . __name__ : logger . debug ( 'Json based copy' ) # Note: Json based oppportunistic copy return new_oscal_type . parse_raw ( self . json ( exclude_none = True , by_alias = True )) if ( '__root__' in self . __fields__ and len ( self . __fields__ ) == 1 and '__root__' in new_oscal_type . __fields__ and len ( new_oscal_type . __fields__ ) == 1 ): logger . debug ( 'Root element based copy too' ) return new_oscal_type . parse_obj ( self . __root__ ) # bad place here. raise err . TrestleError ( 'Provided inconsistent classes to copy to methodology.' )","title":"copy_to()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.create_stripped_model_type","text":"Create a pydantic model, which is derived from the current model, but missing certain fields. OSCAL mandates a 'strict' schema (e.g. unless otherwise stated no additional fields), and certain fields are mandatory. Given this the corresponding dataclasses are also strict. Workflows with trestle require missing mandatory fields. This allows creation of derivative models missing certain fields. Parameters: Name Type Description Default stripped_fields Optional[List[str]] The fields to be removed from the current data class. None stripped_fields_aliases Optional[List[str]] The fields to be removed from the current data class provided by alias. None Returns: Type Description Type[OscalBaseModel] Pydantic data class thta can be used to instanciate a model. Exceptions: Type Description TrestleError If user provided both stripped_fields and stripped_field_aliases or neither. TrestleError If incorrect aliases or field names are provided. Source code in trestle/core/base_model.py @classmethod def create_stripped_model_type ( cls , stripped_fields : Optional [ List [ str ]] = None , stripped_fields_aliases : Optional [ List [ str ]] = None ) -> Type [ 'OscalBaseModel' ]: \"\"\"Create a pydantic model, which is derived from the current model, but missing certain fields. OSCAL mandates a 'strict' schema (e.g. unless otherwise stated no additional fields), and certain fields are mandatory. Given this the corresponding dataclasses are also strict. Workflows with trestle require missing mandatory fields. This allows creation of derivative models missing certain fields. Args: stripped_fields: The fields to be removed from the current data class. stripped_fields_aliases: The fields to be removed from the current data class provided by alias. Returns: Pydantic data class thta can be used to instanciate a model. Raises: TrestleError: If user provided both stripped_fields and stripped_field_aliases or neither. TrestleError: If incorrect aliases or field names are provided. \"\"\" if stripped_fields is not None and stripped_fields_aliases is not None : raise err . TrestleError ( 'Either \"stripped_fields\" or \"stripped_fields_aliases\" need to be passed, not both.' ) elif stripped_fields is None and stripped_fields_aliases is None : raise err . TrestleError ( 'Exactly one of \"stripped_fields\" or \"stripped_fields_aliases\" must be provided' ) # create alias to field_name mapping excluded_fields = [] if stripped_fields is not None : excluded_fields = stripped_fields elif stripped_fields_aliases is not None : alias_to_field = cls . alias_to_field_map () try : excluded_fields = [ alias_to_field [ key ] . name for key in stripped_fields_aliases ] except KeyError as e : raise err . TrestleError ( f 'Field { str ( e ) } does not exist in the model' ) current_fields = cls . __fields__ new_fields_for_model = {} # Build field list for current_mfield in current_fields . values (): if current_mfield . name in excluded_fields : continue # Validate name in the field # Cehcke behaviour with an alias if current_mfield . required : new_fields_for_model [ current_mfield . name ] = ( current_mfield . outer_type_ , Field ( ... , title = current_mfield . name , alias = current_mfield . alias )) else : new_fields_for_model [ current_mfield . name ] = ( Optional [ current_mfield . outer_type_ ], Field ( None , title = current_mfield . name , alias = current_mfield . alias ) ) new_model = create_model ( cls . __name__ , __base__ = OscalBaseModel , ** new_fields_for_model ) # type: ignore # TODO: This typing cast should NOT be necessary. Potentially fixable with a fix to pydantic. Issue #175 new_model = cast ( Type [ OscalBaseModel ], new_model ) return new_model","title":"create_stripped_model_type()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.get_collection_type","text":"If the type wraps an collection, return the collection type. Returns: Type Description Union[Type[List[Any]], Type[Dict[Any, Any]]] The collection type. Exceptions: Type Description err.TrestleError if not a wrapper of the collection type. Source code in trestle/core/base_model.py @classmethod def get_collection_type ( cls ) -> Union [ Type [ List [ Any ]], Type [ Dict [ Any , Any ]]]: \"\"\" If the type wraps an collection, return the collection type. Returns: The collection type. Raises: err.TrestleError: if not a wrapper of the collection type. \"\"\" if not cls . is_collection_container (): raise err . TrestleError ( 'OscalBaseModel is not wrapping a collection type' ) return get_origin ( cls . __fields__ [ '__root__' ] . outer_type_ )","title":"get_collection_type()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.get_field_by_alias","text":"Convert field alias to a field. Source code in trestle/core/base_model.py def get_field_by_alias ( self , field_alias : str ) -> Any : \"\"\"Convert field alias to a field.\"\"\" attr_field = self . alias_to_field_map () . get ( field_alias , None ) return attr_field","title":"get_field_by_alias()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.get_field_value_by_alias","text":"Get attribute value by field alias. Source code in trestle/core/base_model.py def get_field_value_by_alias ( self , attr_alias : str ) -> Optional [ Any ]: \"\"\"Get attribute value by field alias.\"\"\" # TODO: can this be restricted beyond Any easily. attr_field = self . get_field_by_alias ( attr_alias ) if isinstance ( attr_field , ModelField ): return getattr ( self , attr_field . name , None ) return None","title":"get_field_value_by_alias()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.is_collection_container","text":"Determine whether a pydantic model has being created to wrap a collection primitive (e.g a list or dict). In performing model decomposition it is possible using trestle framework to automatically generate a model which looks like class Foo(OscalBaseModel): root : List[Bar] Returns: Type Description bool Boolean on if it meets the above criteria When these cases exist we need special handling of the type information. Source code in trestle/core/base_model.py @classmethod def is_collection_container ( cls ) -> bool : \"\"\" Determine whether a pydantic model has being created to wrap a collection primitive (e.g a list or dict). In performing model decomposition it is possible using trestle framework to automatically generate a model which looks like class Foo(OscalBaseModel): __root__: List[Bar] Returns: Boolean on if it meets the above criteria When these cases exist we need special handling of the type information. \"\"\" # Additional sanity check on field length if len ( cls . __fields__ ) == 1 and '__root__' in cls . __fields__ . keys (): # This is now a __root__ key only model if is_collection_field_type ( cls . __fields__ [ '__root__' ] . outer_type_ ): return True return False","title":"is_collection_container()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.oscal_dict","text":"Return a dictionary including the root wrapping object key. Source code in trestle/core/base_model.py def oscal_dict ( self ) -> Dict [ str , Any ]: \"\"\"Return a dictionary including the root wrapping object key.\"\"\" class_name = self . __class__ . __name__ result = {} result [ classname_to_alias ( class_name , 'json' )] = self . dict ( by_alias = True , exclude_none = True ) return result","title":"oscal_dict()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.oscal_read","text":"Read OSCAL objects. Handles the fact OSCAL wraps top level elements and also deals with both yaml and json. Parameters: Name Type Description Default path Path The path of the oscal object to read. required Returns: Type Description OscalBaseModel The oscal object read into trestle oscal models. Source code in trestle/core/base_model.py @classmethod def oscal_read ( cls , path : pathlib . Path ) -> 'OscalBaseModel' : \"\"\" Read OSCAL objects. Handles the fact OSCAL wraps top level elements and also deals with both yaml and json. Args: path: The path of the oscal object to read. Returns: The oscal object read into trestle oscal models. \"\"\" # Create the wrapper model. alias = classname_to_alias ( cls . __name__ , 'json' ) content_type = FileContentType . to_content_type ( path . suffix ) logger . debug ( f 'oscal_read content type { content_type } and alias { alias } from { path } ' ) if not path . exists (): logger . warning ( f 'path does not exist in oscal_read: { path } ' ) return None obj : Dict [ str , Any ] = {} try : if content_type == FileContentType . YAML : yaml = YAML ( typ = 'safe' ) fh = path . open ( 'r' , encoding = const . FILE_ENCODING ) obj = yaml . load ( fh ) fh . close () elif content_type == FileContentType . JSON : obj = load_file ( path , json_loads = cls . __config__ . json_loads , ) except Exception as e : raise err . TrestleError ( f 'Error loading file { path } { str ( e ) } ' ) try : if not len ( obj ) == 1 : logger . error ( 'Provided oscal file does not have a single top level key wrapping it.' ) logger . error ( f 'It has { len ( obj ) } keys.' ) raise err . TrestleError ( 'Invalid OSCAL file structure, multiple base keys.' ) parsed = cls . parse_obj ( obj [ alias ]) except KeyError : logger . error ( f 'Provided oscal file does not have top level key: { alias } ' ) raise err . TrestleError ( f 'Provided oscal file does not have top level key key: { alias } ' ) except Exception as e : raise err . TrestleError ( f 'Error parsing file { path } { str ( e ) } ' ) return parsed","title":"oscal_read()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.oscal_serialize_json","text":"Return an 'oscal wrapped' json object serialized in a compressed form. Parameters: Name Type Description Default pretty bool Whether or not to pretty-print json output or have in compressed form. False Returns: Type Description str Oscal model serialized to a json object including packaging inside of a single top level key. Source code in trestle/core/base_model.py def oscal_serialize_json ( self , pretty : bool = False ) -> str : \"\"\" Return an 'oscal wrapped' json object serialized in a compressed form. Args: pretty: Whether or not to pretty-print json output or have in compressed form. Returns: Oscal model serialized to a json object including packaging inside of a single top level key. \"\"\" if pretty : wrapped = self . _oscal_wrap () wrapped_str = wrapped . json ( exclude_none = True , by_alias = True , indent = 2 , ensure_ascii = False ) else : # Ma class_name = self . __class__ . __name__ tl_alias = classname_to_alias ( class_name , 'json' ) raw_model = self . json ( exclude_none = True , by_alias = True , ensure_ascii = False ) wrapped_str = f ' {{ \" { tl_alias } \": { raw_model } }} ' return wrapped_str","title":"oscal_serialize_json()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.oscal_write","text":"Write out a pydantic data model in an oscal friendly way. OSCAL schema mandates that top level elements are wrapped in a singular json/yaml field. This function handles both json and yaml output as well as formatting of the json. Parameters: Name Type Description Default path Path The output file location for the oscal object. required Exceptions: Type Description err.TrestleError If a unknown file extension is provided. Source code in trestle/core/base_model.py def oscal_write ( self , path : pathlib . Path ) -> None : \"\"\" Write out a pydantic data model in an oscal friendly way. OSCAL schema mandates that top level elements are wrapped in a singular json/yaml field. This function handles both json and yaml output as well as formatting of the json. Args: path: The output file location for the oscal object. Raises: err.TrestleError: If a unknown file extension is provided. \"\"\" content_type = FileContentType . to_content_type ( path . suffix ) # The output will have \\r\\n newlines on windows and \\n newlines elsewhere write_file = pathlib . Path ( path ) . open ( 'w' , encoding = const . FILE_ENCODING ) if content_type == FileContentType . YAML : yaml = YAML ( typ = 'safe' ) yaml . dump ( yaml . load ( self . oscal_serialize_json ()), write_file ) elif content_type == FileContentType . JSON : write_file . write ( self . oscal_serialize_json ( pretty = True )) # Flush / close required (by experience) due to flushing issues in tests. write_file . flush () write_file . close ()","title":"oscal_write()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.OscalBaseModel.stripped_instance","text":"Return a new model instance with the specified fields being stripped. Parameters: Name Type Description Default stripped_fields List[str] The fields to be removed from the current data class. None stripped_fields_aliases List[str] The fields to be removed from the current data class provided by alias. None Returns: Type Description OscalBaseModel The current datamodel with the fields provided removed in a derivate (run time created) data model. Exceptions: Type Description err.TrestleError If user provided both stripped_fields and stripped_field_aliases or neither. err.TrestleError If incorrect aliases or field names are provided. Source code in trestle/core/base_model.py def stripped_instance ( self , stripped_fields : List [ str ] = None , stripped_fields_aliases : List [ str ] = None ) -> 'OscalBaseModel' : \"\"\"Return a new model instance with the specified fields being stripped. Args: stripped_fields: The fields to be removed from the current data class. stripped_fields_aliases: The fields to be removed from the current data class provided by alias. Returns: The current datamodel with the fields provided removed in a derivate (run time created) data model. Raises: err.TrestleError: If user provided both stripped_fields and stripped_field_aliases or neither. err.TrestleError: If incorrect aliases or field names are provided. \"\"\" # stripped class type stripped_class : Type [ OscalBaseModel ] = self . create_stripped_model_type ( stripped_fields = stripped_fields , stripped_fields_aliases = stripped_fields_aliases ) # remaining values remaining_values = {} for field in self . __fields__ . values (): if field . name in stripped_class . __fields__ : remaining_values [ field . name ] = self . __dict__ [ field . name ] # create stripped model instance # TODO: Not sure if we can avoid type escapes here stripped_instance = stripped_class ( ** remaining_values ) # type: ignore return stripped_instance","title":"stripped_instance()"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.core.base_model/#trestle.core.base_model.robust_datetime_serialization","text":"Return a nicely formatted string for in a format compatible with OSCAL specifications. Parameters: Name Type Description Default input_dt datetime Input datetime to convert to a string. required Returns: Type Description str String in isoformat to the millisecond enforcing that timezone offset is provided. Exceptions: Type Description TrestleError Error is raised if datetime object does not contain sufficient timezone information. Source code in trestle/core/base_model.py def robust_datetime_serialization ( input_dt : datetime . datetime ) -> str : \"\"\"Return a nicely formatted string for in a format compatible with OSCAL specifications. Args: input_dt: Input datetime to convert to a string. Returns: String in isoformat to the millisecond enforcing that timezone offset is provided. Raises: TrestleError: Error is raised if datetime object does not contain sufficient timezone information. \"\"\" # fail if the input datetime is not aware - ie it has no associated timezone if input_dt . tzinfo is None : raise err . TrestleError ( 'Missing timezone in datetime' ) if input_dt . tzinfo . utcoffset ( input_dt ) is None : raise err . TrestleError ( 'Missing utcoffset in datetime' ) # use this leave in original timezone rather than utc # return input_dt.astimezone().isoformat(timespec='milliseconds') noqa: E800 # force it to be utc return input_dt . astimezone ( datetime . timezone . utc ) . isoformat ( timespec = 'milliseconds' ) handler: python","title":"robust_datetime_serialization()"},{"location":"api_reference/trestle.core.commands.add/","text":"trestle.core.commands.add \u00a4 Trestle Add Command. logger \u00a4 Classes \u00a4 AddCmd ( CommandPlusDocs ) \u00a4 Add an OSCAL object to the provided file based on element path. This CLI takes input a filename and a list of comma-seperated element path. Element paths are based on the json field names. Examples of element paths: catalog.metadata catalog.controls.control assessment-results.results. The method first finds the parent model from the file and loads the file into the model. Then the method executes 'add' for each of the element paths specified. name \u00a4 Methods \u00a4 add ( element_path , parent_element , include_optional ) classmethod \u00a4 For a element_path, add a child model to the parent_element of a given parent_model. First we find the child model at the specified element path and instantiate it with default values. Then we check if there's already existing element at that path, in which case we append the child model to the existing list of dict. Then we set up an action plan to update the model (specified by file_path) in memory, create a file at the same location and write the file. We update the parent_element to prepare for next adds in the chain Source code in trestle/core/commands/add.py @classmethod def add ( cls , element_path : ElementPath , parent_element : Element , include_optional : bool ): \"\"\"For a element_path, add a child model to the parent_element of a given parent_model. First we find the child model at the specified element path and instantiate it with default values. Then we check if there's already existing element at that path, in which case we append the child model to the existing list of dict. Then we set up an action plan to update the model (specified by file_path) in memory, create a file at the same location and write the file. We update the parent_element to prepare for next adds in the chain \"\"\" if '*' in element_path . get_full_path_parts (): raise err . TrestleError ( 'trestle add does not support Wildcard element path.' ) # Get child model try : child_model = element_path . get_type ( type ( parent_element . get ())) # Create child element with sample values child_object = gens . generate_sample_model ( child_model , include_optional = include_optional ) if parent_element . get_at ( element_path ) is not None : # The element already exists if type ( parent_element . get_at ( element_path )) is list : child_object = parent_element . get_at ( element_path ) + child_object elif type ( parent_element . get_at ( element_path )) is dict : child_object = { ** parent_element . get_at ( element_path ), ** child_object } else : raise err . TrestleError ( 'Already exists and is not a list or dictionary.' ) except Exception as e : raise err . TrestleError ( f 'Bad element path. { str ( e ) } ' ) update_action = UpdateAction ( sub_element = child_object , dest_element = parent_element , sub_element_path = element_path ) parent_element = parent_element . set_at ( element_path , child_object ) return update_action , parent_element handler: python","title":"add"},{"location":"api_reference/trestle.core.commands.add/#trestle.core.commands.add","text":"Trestle Add Command.","title":"add"},{"location":"api_reference/trestle.core.commands.add/#trestle.core.commands.add.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.add/#trestle.core.commands.add-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.add/#trestle.core.commands.add.AddCmd","text":"Add an OSCAL object to the provided file based on element path. This CLI takes input a filename and a list of comma-seperated element path. Element paths are based on the json field names. Examples of element paths: catalog.metadata catalog.controls.control assessment-results.results. The method first finds the parent model from the file and loads the file into the model. Then the method executes 'add' for each of the element paths specified.","title":"AddCmd"},{"location":"api_reference/trestle.core.commands.add/#trestle.core.commands.add.AddCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.add/#trestle.core.commands.add.AddCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.add/#trestle.core.commands.add.AddCmd.add","text":"For a element_path, add a child model to the parent_element of a given parent_model. First we find the child model at the specified element path and instantiate it with default values. Then we check if there's already existing element at that path, in which case we append the child model to the existing list of dict. Then we set up an action plan to update the model (specified by file_path) in memory, create a file at the same location and write the file. We update the parent_element to prepare for next adds in the chain Source code in trestle/core/commands/add.py @classmethod def add ( cls , element_path : ElementPath , parent_element : Element , include_optional : bool ): \"\"\"For a element_path, add a child model to the parent_element of a given parent_model. First we find the child model at the specified element path and instantiate it with default values. Then we check if there's already existing element at that path, in which case we append the child model to the existing list of dict. Then we set up an action plan to update the model (specified by file_path) in memory, create a file at the same location and write the file. We update the parent_element to prepare for next adds in the chain \"\"\" if '*' in element_path . get_full_path_parts (): raise err . TrestleError ( 'trestle add does not support Wildcard element path.' ) # Get child model try : child_model = element_path . get_type ( type ( parent_element . get ())) # Create child element with sample values child_object = gens . generate_sample_model ( child_model , include_optional = include_optional ) if parent_element . get_at ( element_path ) is not None : # The element already exists if type ( parent_element . get_at ( element_path )) is list : child_object = parent_element . get_at ( element_path ) + child_object elif type ( parent_element . get_at ( element_path )) is dict : child_object = { ** parent_element . get_at ( element_path ), ** child_object } else : raise err . TrestleError ( 'Already exists and is not a list or dictionary.' ) except Exception as e : raise err . TrestleError ( f 'Bad element path. { str ( e ) } ' ) update_action = UpdateAction ( sub_element = child_object , dest_element = parent_element , sub_element_path = element_path ) parent_element = parent_element . set_at ( element_path , child_object ) return update_action , parent_element handler: python","title":"add()"},{"location":"api_reference/trestle.core.commands.assemble/","text":"trestle.core.commands.assemble \u00a4 Trestle Assemble Command. logger \u00a4 Classes \u00a4 AssembleCmd ( CommandPlusDocs ) \u00a4 Assemble all subcomponents from a specified trestle model into a single JSON/YAML file under dist. name \u00a4 Methods \u00a4 assemble_model ( model_alias , object_type , args ) classmethod \u00a4 Assemble a top level OSCAL model within the trestle dist directory. Source code in trestle/core/commands/assemble.py @classmethod def assemble_model ( cls , model_alias : str , object_type : Type [ TopLevelOscalModel ], args : argparse . Namespace ) -> int : \"\"\"Assemble a top level OSCAL model within the trestle dist directory.\"\"\" log . set_log_level_from_args ( args ) logger . info ( f 'Assembling models of type { model_alias } .' ) trestle_root = args . trestle_root # trestle root is set via command line in args. Default is cwd. if not trestle_root or not fs . is_valid_project_root ( args . trestle_root ): logger . error ( f 'Given directory { trestle_root } is not a trestle project.' ) return 1 model_names = [] if 'name' in args and args . name : model_names = [ args . name ] logger . info ( f 'Assembling single model of type { model_alias } : { args . name } .' ) else : model_names = fs . get_models_of_type ( model_alias , trestle_root ) nmodels = len ( model_names ) logger . info ( f 'Assembling { nmodels } found models of type { model_alias } .' ) if len ( model_names ) == 0 : logger . info ( f 'No models found to assemble of type { model_alias } .' ) return 0 for model_name in model_names : # contruct path to the model file name root_model_dir = trestle_root / fs . model_type_to_model_dir ( model_alias ) try : model_file_type = fs . get_contextual_file_type ( root_model_dir / model_name ) except Exception as e : logger . error ( 'No files found in the specified model directory.' ) logger . debug ( e ) return 1 model_file_name = f ' { model_alias }{ FileContentType . to_file_extension ( model_file_type ) } ' root_model_filepath = root_model_dir / model_name / model_file_name if not root_model_filepath . exists (): logger . error ( f 'No top level model file at { root_model_dir } ' ) return 1 # distributed load _ , _ , assembled_model = load_distributed ( root_model_filepath , args . trestle_root ) plural_alias = fs . model_type_to_model_dir ( model_alias ) assembled_model_dir = trestle_root / const . TRESTLE_DIST_DIR / plural_alias assembled_model_filepath = assembled_model_dir / f ' { model_name } . { args . extension } ' plan = Plan () plan . add_action ( CreatePathAction ( assembled_model_filepath , True )) plan . add_action ( WriteFileAction ( assembled_model_filepath , Element ( assembled_model ), FileContentType . to_content_type ( f '. { args . extension } ' ) ) ) try : plan . simulate () plan . execute () except Exception as e : logger . error ( 'Unknown error executing trestle create operations. Rolling back.' ) logger . debug ( e ) return 1 return 0 handler: python","title":"assemble"},{"location":"api_reference/trestle.core.commands.assemble/#trestle.core.commands.assemble","text":"Trestle Assemble Command.","title":"assemble"},{"location":"api_reference/trestle.core.commands.assemble/#trestle.core.commands.assemble.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.assemble/#trestle.core.commands.assemble-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.assemble/#trestle.core.commands.assemble.AssembleCmd","text":"Assemble all subcomponents from a specified trestle model into a single JSON/YAML file under dist.","title":"AssembleCmd"},{"location":"api_reference/trestle.core.commands.assemble/#trestle.core.commands.assemble.AssembleCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.assemble/#trestle.core.commands.assemble.AssembleCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.assemble/#trestle.core.commands.assemble.AssembleCmd.assemble_model","text":"Assemble a top level OSCAL model within the trestle dist directory. Source code in trestle/core/commands/assemble.py @classmethod def assemble_model ( cls , model_alias : str , object_type : Type [ TopLevelOscalModel ], args : argparse . Namespace ) -> int : \"\"\"Assemble a top level OSCAL model within the trestle dist directory.\"\"\" log . set_log_level_from_args ( args ) logger . info ( f 'Assembling models of type { model_alias } .' ) trestle_root = args . trestle_root # trestle root is set via command line in args. Default is cwd. if not trestle_root or not fs . is_valid_project_root ( args . trestle_root ): logger . error ( f 'Given directory { trestle_root } is not a trestle project.' ) return 1 model_names = [] if 'name' in args and args . name : model_names = [ args . name ] logger . info ( f 'Assembling single model of type { model_alias } : { args . name } .' ) else : model_names = fs . get_models_of_type ( model_alias , trestle_root ) nmodels = len ( model_names ) logger . info ( f 'Assembling { nmodels } found models of type { model_alias } .' ) if len ( model_names ) == 0 : logger . info ( f 'No models found to assemble of type { model_alias } .' ) return 0 for model_name in model_names : # contruct path to the model file name root_model_dir = trestle_root / fs . model_type_to_model_dir ( model_alias ) try : model_file_type = fs . get_contextual_file_type ( root_model_dir / model_name ) except Exception as e : logger . error ( 'No files found in the specified model directory.' ) logger . debug ( e ) return 1 model_file_name = f ' { model_alias }{ FileContentType . to_file_extension ( model_file_type ) } ' root_model_filepath = root_model_dir / model_name / model_file_name if not root_model_filepath . exists (): logger . error ( f 'No top level model file at { root_model_dir } ' ) return 1 # distributed load _ , _ , assembled_model = load_distributed ( root_model_filepath , args . trestle_root ) plural_alias = fs . model_type_to_model_dir ( model_alias ) assembled_model_dir = trestle_root / const . TRESTLE_DIST_DIR / plural_alias assembled_model_filepath = assembled_model_dir / f ' { model_name } . { args . extension } ' plan = Plan () plan . add_action ( CreatePathAction ( assembled_model_filepath , True )) plan . add_action ( WriteFileAction ( assembled_model_filepath , Element ( assembled_model ), FileContentType . to_content_type ( f '. { args . extension } ' ) ) ) try : plan . simulate () plan . execute () except Exception as e : logger . error ( 'Unknown error executing trestle create operations. Rolling back.' ) logger . debug ( e ) return 1 return 0 handler: python","title":"assemble_model()"},{"location":"api_reference/trestle.core.commands.author.command/","text":"trestle.core.commands.author.command \u00a4 Trestle author command. Umbrella command for all markdown related transformations logger \u00a4 Classes \u00a4 AuthorCmd ( CommandPlusDocs ) \u00a4 trestle author, a collection of commands for authoring compliance content outside of OSCAL. name \u00a4 subcommands \u00a4 handler: python","title":"command"},{"location":"api_reference/trestle.core.commands.author.command/#trestle.core.commands.author.command","text":"Trestle author command. Umbrella command for all markdown related transformations","title":"command"},{"location":"api_reference/trestle.core.commands.author.command/#trestle.core.commands.author.command.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.author.command/#trestle.core.commands.author.command-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.author.command/#trestle.core.commands.author.command.AuthorCmd","text":"trestle author, a collection of commands for authoring compliance content outside of OSCAL.","title":"AuthorCmd"},{"location":"api_reference/trestle.core.commands.author.command/#trestle.core.commands.author.command.AuthorCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.author.command/#trestle.core.commands.author.command.AuthorCmd.subcommands","text":"handler: python","title":"subcommands"},{"location":"api_reference/trestle.core.commands.author.common/","text":"trestle.core.commands.author.common \u00a4 AuthorCommonCommands - reusable utilities to increase code base abstraction for author command. logger \u00a4 Classes \u00a4 AuthorCommonCommand ( CommandPlusDocs ) \u00a4 Extension for the subset of commands that operate using the common mode structure. Methods \u00a4 rel_dir ( self , path ) \u00a4 Stringify a directory relative to trestle root. Source code in trestle/core/commands/author/common.py def rel_dir ( self , path : pathlib . Path ) -> str : \"\"\"Stringify a directory relative to trestle root.\"\"\" return str ( path . relative_to ( self . trestle_root )) handler: python","title":"common"},{"location":"api_reference/trestle.core.commands.author.common/#trestle.core.commands.author.common","text":"AuthorCommonCommands - reusable utilities to increase code base abstraction for author command.","title":"common"},{"location":"api_reference/trestle.core.commands.author.common/#trestle.core.commands.author.common.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.author.common/#trestle.core.commands.author.common-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.author.common/#trestle.core.commands.author.common.AuthorCommonCommand","text":"Extension for the subset of commands that operate using the common mode structure.","title":"AuthorCommonCommand"},{"location":"api_reference/trestle.core.commands.author.common/#trestle.core.commands.author.common.AuthorCommonCommand-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.author.common/#trestle.core.commands.author.common.AuthorCommonCommand.rel_dir","text":"Stringify a directory relative to trestle root. Source code in trestle/core/commands/author/common.py def rel_dir ( self , path : pathlib . Path ) -> str : \"\"\"Stringify a directory relative to trestle root.\"\"\" return str ( path . relative_to ( self . trestle_root )) handler: python","title":"rel_dir()"},{"location":"api_reference/trestle.core.commands.author.consts/","text":"trestle.core.commands.author.consts \u00a4 Constants associated with trestle author commands to decrease duplication. gh_help \u00a4 gh_long \u00a4 gh_short \u00a4 global_help \u00a4 global_long \u00a4 global_short \u00a4 header_validate_help \u00a4 hov_help \u00a4 hov_long \u00a4 hov_short \u00a4 long_header_validate \u00a4 long_readme_validate \u00a4 mode_arg_name \u00a4 mode_choices \u00a4 readme_validate_folders_help \u00a4 readme_validate_help \u00a4 recurse_help \u00a4 recurse_long \u00a4 recurse_short \u00a4 reference_templates \u00a4 short_header_validate \u00a4 short_readme_validate \u00a4 task_name_long \u00a4 task_name_short \u00a4 handler: python","title":"consts"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts","text":"Constants associated with trestle author commands to decrease duplication.","title":"consts"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.gh_help","text":"","title":"gh_help"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.gh_long","text":"","title":"gh_long"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.gh_short","text":"","title":"gh_short"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.global_help","text":"","title":"global_help"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.global_long","text":"","title":"global_long"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.global_short","text":"","title":"global_short"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.header_validate_help","text":"","title":"header_validate_help"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.hov_help","text":"","title":"hov_help"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.hov_long","text":"","title":"hov_long"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.hov_short","text":"","title":"hov_short"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.long_header_validate","text":"","title":"long_header_validate"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.long_readme_validate","text":"","title":"long_readme_validate"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.mode_arg_name","text":"","title":"mode_arg_name"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.mode_choices","text":"","title":"mode_choices"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.readme_validate_folders_help","text":"","title":"readme_validate_folders_help"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.readme_validate_help","text":"","title":"readme_validate_help"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.recurse_help","text":"","title":"recurse_help"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.recurse_long","text":"","title":"recurse_long"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.recurse_short","text":"","title":"recurse_short"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.reference_templates","text":"","title":"reference_templates"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.short_header_validate","text":"","title":"short_header_validate"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.short_readme_validate","text":"","title":"short_readme_validate"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.task_name_long","text":"","title":"task_name_long"},{"location":"api_reference/trestle.core.commands.author.consts/#trestle.core.commands.author.consts.task_name_short","text":"handler: python","title":"task_name_short"},{"location":"api_reference/trestle.core.commands.author.docs/","text":"trestle.core.commands.author.docs \u00a4 Trestle author docs sub-command. logger \u00a4 Classes \u00a4 Docs ( AuthorCommonCommand ) \u00a4 Markdown governed documents - enforcing consistent markdown across a set of files. name \u00a4 template_name \u00a4 Methods \u00a4 create_sample ( self ) \u00a4 Presuming the template exists, copy into a sample markdown file with an index. Source code in trestle/core/commands/author/docs.py def create_sample ( self ) -> int : \"\"\"Presuming the template exists, copy into a sample markdown file with an index.\"\"\" template_file = self . template_dir / self . template_name if not self . _validate_template_dir (): logger . error ( 'Aborting setup' ) return 1 if not template_file . is_file (): logger . error ( 'No template file ... exiting.' ) return 1 index = 0 while True : candidate_task = self . task_path / f ' { self . task_name } _ { index : 03d } .md' if candidate_task . is_file (): index = index + 1 else : shutil . copy ( str ( template_file ), str ( candidate_task )) break return 0 setup_template_governed_docs ( self ) \u00a4 Create structure to allow markdown template enforcement. Returns: Type Description int Unix return code. Source code in trestle/core/commands/author/docs.py def setup_template_governed_docs ( self ) -> int : \"\"\"Create structure to allow markdown template enforcement. Returns: Unix return code. \"\"\" if not self . task_path . exists (): self . task_path . mkdir ( exist_ok = True , parents = True ) elif self . task_path . is_file (): logger . error ( f 'Task path: { self . rel_dir ( self . task_path ) } is a file not a directory.' ) return 1 if not self . template_dir . exists (): self . template_dir . mkdir ( exist_ok = True , parents = True ) elif self . template_dir . is_file (): logger . error ( f 'Template path: { self . rel_dir ( self . template_dir ) } is a file not a directory.' ) return 1 logger . debug ( self . template_dir ) if not self . _validate_template_dir (): logger . error ( 'Aborting setup' ) return 1 template_file = self . template_dir / self . template_name if template_file . is_file (): return 0 reference_template = pathlib . Path ( resource_filename ( 'trestle.resources' , 'template.md' )) . resolve () shutil . copy ( reference_template , template_file ) logger . info ( f 'Template file setup for task { self . task_name } at { self . rel_dir ( template_file ) } ' ) logger . info ( f 'Task directory is { self . rel_dir ( self . task_path ) } ' ) return 0 template_validate ( self , heading , validate_header , validate_only_header ) \u00a4 Validate that the template is acceptable markdown. Source code in trestle/core/commands/author/docs.py def template_validate ( self , heading : str , validate_header : bool , validate_only_header : bool ) -> int : \"\"\"Validate that the template is acceptable markdown.\"\"\" template_file = self . template_dir / self . template_name if not self . _validate_template_dir (): logger . error ( 'Aborting setup' ) return 1 if not template_file . is_file (): logger . error ( f 'Required template file: { self . rel_dir ( template_file ) } does not exist. Exiting.' ) return 1 try : _ = markdown_validator . MarkdownValidator ( template_file , validate_header , validate_only_header , heading ) except Exception as ex : logger . error ( f 'Template for task { self . task_name } failed to validate due to { ex } ' ) return 1 logger . info ( f 'TEMPLATES VALID: { self . task_name } ' ) return 0 validate ( self , governed_heading , validate_header , validate_only_header , recurse , readme_validate ) \u00a4 Validate task. Parameters: Name Type Description Default governed_heading str A heading for which structural enforcement (see online docs). required validate_header bool Whether or not to validate the key structure of the yaml header to the markdown document. required validate_only_header bool Whether to validate just the yaml header. required recurse bool Whether to allow validated files to be in a directory tree. required readme_validate bool Whether to validate readme files, otherwise they will be ignored. required Returns: Type Description int Return code to be used for the command. Source code in trestle/core/commands/author/docs.py def validate ( self , governed_heading : str , validate_header : bool , validate_only_header : bool , recurse : bool , readme_validate : bool ) -> int : \"\"\" Validate task. Args: governed_heading: A heading for which structural enforcement (see online docs). validate_header: Whether or not to validate the key structure of the yaml header to the markdown document. validate_only_header: Whether to validate just the yaml header. recurse: Whether to allow validated files to be in a directory tree. readme_validate: Whether to validate readme files, otherwise they will be ignored. Returns: Return code to be used for the command. \"\"\" if not self . task_path . is_dir (): logger . error ( f 'Task directory { self . rel_dir ( self . task_path ) } does not exist. Exiting validate.' ) template_file = self . template_dir / self . template_name if not template_file . is_file (): logger . error ( f 'Required template file: { self . rel_dir ( template_file ) } does not exist. Exiting.' ) return 1 return self . _validate_dir ( template_file , governed_heading , self . task_path , validate_header , validate_only_header , recurse , readme_validate ) handler: python","title":"docs"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs","text":"Trestle author docs sub-command.","title":"docs"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.Docs","text":"Markdown governed documents - enforcing consistent markdown across a set of files.","title":"Docs"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.Docs.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.Docs.template_name","text":"","title":"template_name"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.Docs-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.Docs.create_sample","text":"Presuming the template exists, copy into a sample markdown file with an index. Source code in trestle/core/commands/author/docs.py def create_sample ( self ) -> int : \"\"\"Presuming the template exists, copy into a sample markdown file with an index.\"\"\" template_file = self . template_dir / self . template_name if not self . _validate_template_dir (): logger . error ( 'Aborting setup' ) return 1 if not template_file . is_file (): logger . error ( 'No template file ... exiting.' ) return 1 index = 0 while True : candidate_task = self . task_path / f ' { self . task_name } _ { index : 03d } .md' if candidate_task . is_file (): index = index + 1 else : shutil . copy ( str ( template_file ), str ( candidate_task )) break return 0","title":"create_sample()"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.Docs.setup_template_governed_docs","text":"Create structure to allow markdown template enforcement. Returns: Type Description int Unix return code. Source code in trestle/core/commands/author/docs.py def setup_template_governed_docs ( self ) -> int : \"\"\"Create structure to allow markdown template enforcement. Returns: Unix return code. \"\"\" if not self . task_path . exists (): self . task_path . mkdir ( exist_ok = True , parents = True ) elif self . task_path . is_file (): logger . error ( f 'Task path: { self . rel_dir ( self . task_path ) } is a file not a directory.' ) return 1 if not self . template_dir . exists (): self . template_dir . mkdir ( exist_ok = True , parents = True ) elif self . template_dir . is_file (): logger . error ( f 'Template path: { self . rel_dir ( self . template_dir ) } is a file not a directory.' ) return 1 logger . debug ( self . template_dir ) if not self . _validate_template_dir (): logger . error ( 'Aborting setup' ) return 1 template_file = self . template_dir / self . template_name if template_file . is_file (): return 0 reference_template = pathlib . Path ( resource_filename ( 'trestle.resources' , 'template.md' )) . resolve () shutil . copy ( reference_template , template_file ) logger . info ( f 'Template file setup for task { self . task_name } at { self . rel_dir ( template_file ) } ' ) logger . info ( f 'Task directory is { self . rel_dir ( self . task_path ) } ' ) return 0","title":"setup_template_governed_docs()"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.Docs.template_validate","text":"Validate that the template is acceptable markdown. Source code in trestle/core/commands/author/docs.py def template_validate ( self , heading : str , validate_header : bool , validate_only_header : bool ) -> int : \"\"\"Validate that the template is acceptable markdown.\"\"\" template_file = self . template_dir / self . template_name if not self . _validate_template_dir (): logger . error ( 'Aborting setup' ) return 1 if not template_file . is_file (): logger . error ( f 'Required template file: { self . rel_dir ( template_file ) } does not exist. Exiting.' ) return 1 try : _ = markdown_validator . MarkdownValidator ( template_file , validate_header , validate_only_header , heading ) except Exception as ex : logger . error ( f 'Template for task { self . task_name } failed to validate due to { ex } ' ) return 1 logger . info ( f 'TEMPLATES VALID: { self . task_name } ' ) return 0","title":"template_validate()"},{"location":"api_reference/trestle.core.commands.author.docs/#trestle.core.commands.author.docs.Docs.validate","text":"Validate task. Parameters: Name Type Description Default governed_heading str A heading for which structural enforcement (see online docs). required validate_header bool Whether or not to validate the key structure of the yaml header to the markdown document. required validate_only_header bool Whether to validate just the yaml header. required recurse bool Whether to allow validated files to be in a directory tree. required readme_validate bool Whether to validate readme files, otherwise they will be ignored. required Returns: Type Description int Return code to be used for the command. Source code in trestle/core/commands/author/docs.py def validate ( self , governed_heading : str , validate_header : bool , validate_only_header : bool , recurse : bool , readme_validate : bool ) -> int : \"\"\" Validate task. Args: governed_heading: A heading for which structural enforcement (see online docs). validate_header: Whether or not to validate the key structure of the yaml header to the markdown document. validate_only_header: Whether to validate just the yaml header. recurse: Whether to allow validated files to be in a directory tree. readme_validate: Whether to validate readme files, otherwise they will be ignored. Returns: Return code to be used for the command. \"\"\" if not self . task_path . is_dir (): logger . error ( f 'Task directory { self . rel_dir ( self . task_path ) } does not exist. Exiting validate.' ) template_file = self . template_dir / self . template_name if not template_file . is_file (): logger . error ( f 'Required template file: { self . rel_dir ( template_file ) } does not exist. Exiting.' ) return 1 return self . _validate_dir ( template_file , governed_heading , self . task_path , validate_header , validate_only_header , recurse , readme_validate ) handler: python","title":"validate()"},{"location":"api_reference/trestle.core.commands.author.folders/","text":"trestle.core.commands.author.folders \u00a4 Trestle author docs sub-command. logger \u00a4 Classes \u00a4 Folders ( AuthorCommonCommand ) \u00a4 Markdown governed folders - enforcing consistent files and templates across directories. name \u00a4 Methods \u00a4 create_sample ( self ) \u00a4 Create a sample folder within the task and populate with template content. Returns: Type Description int Unix return code for running sample as a command. Source code in trestle/core/commands/author/folders.py def create_sample ( self ) -> int : \"\"\" Create a sample folder within the task and populate with template content. Returns: Unix return code for running sample as a command. \"\"\" ii = 0 while True : sample_path = self . task_path / f 'sample_folder_ { ii } ' if sample_path . exists (): ii = ii + 1 continue shutil . copytree ( str ( self . template_dir ), str ( sample_path )) return 0 setup_template ( self ) \u00a4 Create structure to allow markdown template enforcement. Source code in trestle/core/commands/author/folders.py def setup_template ( self ) -> int : \"\"\"Create structure to allow markdown template enforcement.\"\"\" if not self . task_path . exists (): self . task_path . mkdir ( exist_ok = True , parents = True ) elif self . task_path . is_file (): logger . error ( f 'Task path: { self . rel_dir ( self . task_path ) } is a file not a directory.' ) return 1 if not self . template_dir . exists (): self . template_dir . mkdir ( exist_ok = True , parents = True ) elif self . template_dir . is_file (): logger . error ( f 'Template path: { self . rel_dir ( self . template_dir ) } is a file not a directory.' ) return 1 template_file_a_md = self . template_dir / 'a_template.md' template_file_another_md = self . template_dir / 'another_template.md' template_file_drawio = self . template_dir / 'architecture.drawio' md_template = pathlib . Path ( resource_filename ( 'trestle.resources' , 'template.md' )) . resolve () drawio_template = pathlib . Path ( resource_filename ( 'trestle.resources' , 'template.drawio' )) . resolve () shutil . copy ( md_template , template_file_a_md ) shutil . copy ( md_template , template_file_another_md ) shutil . copy ( drawio_template , template_file_drawio ) return 0 template_validate ( self , validate_header , validate_only_header , heading , readme_validate ) \u00a4 Validate that the template is acceptable markdown. Source code in trestle/core/commands/author/folders.py def template_validate ( self , validate_header : bool , validate_only_header : bool , heading : str , readme_validate : bool ) -> int : \"\"\"Validate that the template is acceptable markdown.\"\"\" if not self . template_dir . is_dir (): logger . error ( f 'Template directory { self . rel_dir ( self . template_dir ) } for task { self . task_name } does not exist.' ) return 1 # get list of files: template_files = self . template_dir . rglob ( '*' ) for template_file in template_files : if not fs . local_and_visible ( template_file ): continue elif template_file . is_dir (): continue elif template_file . suffix . lower () == '.md' : if not readme_validate and template_file . name == 'readme.md' : logger . error ( 'Template directory contains a readme.md file and readme validation is off.' ) return 1 try : _ = markdown_validator . MarkdownValidator ( template_file , validate_header , validate_only_header , heading ) except Exception as ex : logger . error ( f 'Template file { self . rel_dir ( template_file ) } for task { self . task_name } ' + f ' failed to validate due to { ex } ' ) return 1 elif template_file . suffix . lower () . lstrip ( '.' ) == 'drawio' : try : _ = draw_io . DrawIOMetadataValidator ( template_file ) except Exception as ex : logger . error ( f 'Template file { self . rel_dir ( template_file ) } for task { self . task_name } ' + f ' failed to validate due to { ex } ' ) return 1 else : logger . info ( f 'File: { self . rel_dir ( template_file ) } within the template directory was ignored' + 'as it is not markdown.' ) logger . info ( f 'TEMPLATES VALID: { self . task_name } .' ) return 0 validate ( self , validate_header , validate_only_header , governed_heading , readme_validate ) \u00a4 Validate task. Source code in trestle/core/commands/author/folders.py def validate ( self , validate_header : bool , validate_only_header : bool , governed_heading : str , readme_validate : bool ) -> int : \"\"\"Validate task.\"\"\" if not self . task_path . is_dir (): logger . error ( f 'Task directory { self . task_path } does not exist. Exiting validate.' ) return 1 for task_instance in self . task_path . iterdir (): if task_instance . is_dir (): if fs . is_symlink ( task_instance ): continue result = self . _measure_template_folder ( self . template_dir , task_instance , validate_header , validate_only_header , governed_heading , readme_validate ) if not result : logger . error ( 'Governed-folder validation failed for task' + f ' { self . task_name } on directory { self . rel_dir ( task_instance ) } ' ) return 1 else : logger . warning ( f 'Unexpected file { self . rel_dir ( task_instance ) } identified in { self . task_name } ' + ' directory, ignoring.' ) return 0 handler: python","title":"folders"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders","text":"Trestle author docs sub-command.","title":"folders"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders.Folders","text":"Markdown governed folders - enforcing consistent files and templates across directories.","title":"Folders"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders.Folders.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders.Folders-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders.Folders.create_sample","text":"Create a sample folder within the task and populate with template content. Returns: Type Description int Unix return code for running sample as a command. Source code in trestle/core/commands/author/folders.py def create_sample ( self ) -> int : \"\"\" Create a sample folder within the task and populate with template content. Returns: Unix return code for running sample as a command. \"\"\" ii = 0 while True : sample_path = self . task_path / f 'sample_folder_ { ii } ' if sample_path . exists (): ii = ii + 1 continue shutil . copytree ( str ( self . template_dir ), str ( sample_path )) return 0","title":"create_sample()"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders.Folders.setup_template","text":"Create structure to allow markdown template enforcement. Source code in trestle/core/commands/author/folders.py def setup_template ( self ) -> int : \"\"\"Create structure to allow markdown template enforcement.\"\"\" if not self . task_path . exists (): self . task_path . mkdir ( exist_ok = True , parents = True ) elif self . task_path . is_file (): logger . error ( f 'Task path: { self . rel_dir ( self . task_path ) } is a file not a directory.' ) return 1 if not self . template_dir . exists (): self . template_dir . mkdir ( exist_ok = True , parents = True ) elif self . template_dir . is_file (): logger . error ( f 'Template path: { self . rel_dir ( self . template_dir ) } is a file not a directory.' ) return 1 template_file_a_md = self . template_dir / 'a_template.md' template_file_another_md = self . template_dir / 'another_template.md' template_file_drawio = self . template_dir / 'architecture.drawio' md_template = pathlib . Path ( resource_filename ( 'trestle.resources' , 'template.md' )) . resolve () drawio_template = pathlib . Path ( resource_filename ( 'trestle.resources' , 'template.drawio' )) . resolve () shutil . copy ( md_template , template_file_a_md ) shutil . copy ( md_template , template_file_another_md ) shutil . copy ( drawio_template , template_file_drawio ) return 0","title":"setup_template()"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders.Folders.template_validate","text":"Validate that the template is acceptable markdown. Source code in trestle/core/commands/author/folders.py def template_validate ( self , validate_header : bool , validate_only_header : bool , heading : str , readme_validate : bool ) -> int : \"\"\"Validate that the template is acceptable markdown.\"\"\" if not self . template_dir . is_dir (): logger . error ( f 'Template directory { self . rel_dir ( self . template_dir ) } for task { self . task_name } does not exist.' ) return 1 # get list of files: template_files = self . template_dir . rglob ( '*' ) for template_file in template_files : if not fs . local_and_visible ( template_file ): continue elif template_file . is_dir (): continue elif template_file . suffix . lower () == '.md' : if not readme_validate and template_file . name == 'readme.md' : logger . error ( 'Template directory contains a readme.md file and readme validation is off.' ) return 1 try : _ = markdown_validator . MarkdownValidator ( template_file , validate_header , validate_only_header , heading ) except Exception as ex : logger . error ( f 'Template file { self . rel_dir ( template_file ) } for task { self . task_name } ' + f ' failed to validate due to { ex } ' ) return 1 elif template_file . suffix . lower () . lstrip ( '.' ) == 'drawio' : try : _ = draw_io . DrawIOMetadataValidator ( template_file ) except Exception as ex : logger . error ( f 'Template file { self . rel_dir ( template_file ) } for task { self . task_name } ' + f ' failed to validate due to { ex } ' ) return 1 else : logger . info ( f 'File: { self . rel_dir ( template_file ) } within the template directory was ignored' + 'as it is not markdown.' ) logger . info ( f 'TEMPLATES VALID: { self . task_name } .' ) return 0","title":"template_validate()"},{"location":"api_reference/trestle.core.commands.author.folders/#trestle.core.commands.author.folders.Folders.validate","text":"Validate task. Source code in trestle/core/commands/author/folders.py def validate ( self , validate_header : bool , validate_only_header : bool , governed_heading : str , readme_validate : bool ) -> int : \"\"\"Validate task.\"\"\" if not self . task_path . is_dir (): logger . error ( f 'Task directory { self . task_path } does not exist. Exiting validate.' ) return 1 for task_instance in self . task_path . iterdir (): if task_instance . is_dir (): if fs . is_symlink ( task_instance ): continue result = self . _measure_template_folder ( self . template_dir , task_instance , validate_header , validate_only_header , governed_heading , readme_validate ) if not result : logger . error ( 'Governed-folder validation failed for task' + f ' { self . task_name } on directory { self . rel_dir ( task_instance ) } ' ) return 1 else : logger . warning ( f 'Unexpected file { self . rel_dir ( task_instance ) } identified in { self . task_name } ' + ' directory, ignoring.' ) return 0 handler: python","title":"validate()"},{"location":"api_reference/trestle.core.commands.author.headers/","text":"trestle.core.commands.author.headers \u00a4 Trestle author headers command. logger \u00a4 Classes \u00a4 Headers ( AuthorCommonCommand ) \u00a4 Enforce header / metadata across file types supported by author (markdown and drawio). name \u00a4 Methods \u00a4 create_sample ( self ) \u00a4 Create sample object, this always defaults to markdown. Source code in trestle/core/commands/author/headers.py def create_sample ( self ) -> int : \"\"\"Create sample object, this always defaults to markdown.\"\"\" logger . info ( 'Header only validation does not support sample creation.' ) logger . info ( 'Exiting' ) return 0 setup ( self ) \u00a4 Create template directory and templates. Source code in trestle/core/commands/author/headers.py def setup ( self ) -> int : \"\"\"Create template directory and templates.\"\"\" # Step 1 - validation if self . task_name and not self . task_path . exists (): self . task_path . mkdir ( exist_ok = True , parents = True ) elif self . task_name and self . task_path . is_file (): logger . error ( f 'Task path: { self . rel_dir ( self . task_path ) } is a file not a directory.' ) return 1 if not self . template_dir . exists (): self . template_dir . mkdir ( exist_ok = True , parents = True ) logger . info ( f 'Populating template files to { self . rel_dir ( self . template_dir ) } ' ) for template in author_const . reference_templates . values (): template_path = pathlib . Path ( resource_filename ( 'trestle.resources' , template )) . resolve () destination_path = self . template_dir / template shutil . copy ( template_path , destination_path ) logger . info ( f 'Template directory populated { self . rel_dir ( destination_path ) } ' ) return 0 template_validate ( self ) \u00a4 Validate the integrity of the template files. Source code in trestle/core/commands/author/headers.py def template_validate ( self ) -> int : \"\"\"Validate the integrity of the template files.\"\"\" logger . info ( 'Checking template file integrity' ) for template_file in self . template_dir . iterdir (): if ( template_file . name not in author_const . reference_templates . values () and template_file . name . lower () != 'readme.md' ): logger . error ( f 'Unexpected template file { self . rel_dir ( template_file ) } ' ) logger . error ( 'Exiting' ) return 1 if template_file . suffix == '.md' : try : _ = MarkdownValidator ( template_file , True , True ) except Exception as ex : logger . error ( f 'Template for task { self . task_name } failed to validate due to { ex } ' ) return 1 elif template_file . suffix == '.drawio' : try : _ = DrawIOMetadataValidator ( template_file ) except Exception as ex : logger . error ( f 'Template for task { self . task_name } failed to validate due to { ex } ' ) return 1 logger . info ( 'Templates validated' ) return 0 validate ( self , recurse , readme_validate ) \u00a4 Run validation based on available templates. Source code in trestle/core/commands/author/headers.py def validate ( self , recurse : bool , readme_validate : bool ) -> int : \"\"\"Run validation based on available templates.\"\"\" template_lut = self . _discover_templates () paths = [] if self . task_name : if not self . task_path . is_dir (): logger . error ( f 'Task directory { self . rel_dir ( self . task_path ) } does not exist. Exiting validate.' ) paths = [ self . task_path ] else : for path in self . trestle_root . iterdir (): if not fs . is_hidden ( path ): paths . append ( path ) for path in paths : try : valid = self . _validate_dir ( template_lut , path , recurse , readme_validate ) if not valid : logger . info ( f 'validation failed on { path } ' ) return 1 except Exception as e : logger . error ( f 'Error during header validation on { path } { e } ' ) logger . error ( 'Aborting' ) return 1 return 0 handler: python","title":"headers"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers","text":"Trestle author headers command.","title":"headers"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers.Headers","text":"Enforce header / metadata across file types supported by author (markdown and drawio).","title":"Headers"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers.Headers.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers.Headers-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers.Headers.create_sample","text":"Create sample object, this always defaults to markdown. Source code in trestle/core/commands/author/headers.py def create_sample ( self ) -> int : \"\"\"Create sample object, this always defaults to markdown.\"\"\" logger . info ( 'Header only validation does not support sample creation.' ) logger . info ( 'Exiting' ) return 0","title":"create_sample()"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers.Headers.setup","text":"Create template directory and templates. Source code in trestle/core/commands/author/headers.py def setup ( self ) -> int : \"\"\"Create template directory and templates.\"\"\" # Step 1 - validation if self . task_name and not self . task_path . exists (): self . task_path . mkdir ( exist_ok = True , parents = True ) elif self . task_name and self . task_path . is_file (): logger . error ( f 'Task path: { self . rel_dir ( self . task_path ) } is a file not a directory.' ) return 1 if not self . template_dir . exists (): self . template_dir . mkdir ( exist_ok = True , parents = True ) logger . info ( f 'Populating template files to { self . rel_dir ( self . template_dir ) } ' ) for template in author_const . reference_templates . values (): template_path = pathlib . Path ( resource_filename ( 'trestle.resources' , template )) . resolve () destination_path = self . template_dir / template shutil . copy ( template_path , destination_path ) logger . info ( f 'Template directory populated { self . rel_dir ( destination_path ) } ' ) return 0","title":"setup()"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers.Headers.template_validate","text":"Validate the integrity of the template files. Source code in trestle/core/commands/author/headers.py def template_validate ( self ) -> int : \"\"\"Validate the integrity of the template files.\"\"\" logger . info ( 'Checking template file integrity' ) for template_file in self . template_dir . iterdir (): if ( template_file . name not in author_const . reference_templates . values () and template_file . name . lower () != 'readme.md' ): logger . error ( f 'Unexpected template file { self . rel_dir ( template_file ) } ' ) logger . error ( 'Exiting' ) return 1 if template_file . suffix == '.md' : try : _ = MarkdownValidator ( template_file , True , True ) except Exception as ex : logger . error ( f 'Template for task { self . task_name } failed to validate due to { ex } ' ) return 1 elif template_file . suffix == '.drawio' : try : _ = DrawIOMetadataValidator ( template_file ) except Exception as ex : logger . error ( f 'Template for task { self . task_name } failed to validate due to { ex } ' ) return 1 logger . info ( 'Templates validated' ) return 0","title":"template_validate()"},{"location":"api_reference/trestle.core.commands.author.headers/#trestle.core.commands.author.headers.Headers.validate","text":"Run validation based on available templates. Source code in trestle/core/commands/author/headers.py def validate ( self , recurse : bool , readme_validate : bool ) -> int : \"\"\"Run validation based on available templates.\"\"\" template_lut = self . _discover_templates () paths = [] if self . task_name : if not self . task_path . is_dir (): logger . error ( f 'Task directory { self . rel_dir ( self . task_path ) } does not exist. Exiting validate.' ) paths = [ self . task_path ] else : for path in self . trestle_root . iterdir (): if not fs . is_hidden ( path ): paths . append ( path ) for path in paths : try : valid = self . _validate_dir ( template_lut , path , recurse , readme_validate ) if not valid : logger . info ( f 'validation failed on { path } ' ) return 1 except Exception as e : logger . error ( f 'Error during header validation on { path } { e } ' ) logger . error ( 'Aborting' ) return 1 return 0 handler: python","title":"validate()"},{"location":"api_reference/trestle.core.commands.author.ssp/","text":"trestle.core.commands.author.ssp \u00a4 Create ssp from catalog and profile. logger \u00a4 Classes \u00a4 SSPAssemble ( AuthorCommonCommand ) \u00a4 SSP command Assemble SSP into json format from a directory of markdown files. name \u00a4 SSPGenerate ( AuthorCommonCommand ) \u00a4 SSP command Generate SSP in markdown form from Profile. name \u00a4 SSPManager \u00a4 Manage generation of SSP in markdown format from profile and assembly of edited markdown into json SSP. Methods \u00a4 __init__ ( self ) special \u00a4 Initialize the class. Source code in trestle/core/commands/author/ssp.py def __init__ ( self ): \"\"\"Initialize the class.\"\"\" self . _param_dict : Dict [ str , str ] = {} self . _md_file : Optional [ MDWriter ] = None self . _alters : List [ prof . Alter ] = [] self . _sections : Dict [ str , str ] = {} assemble_ssp ( self , trestle_root , md_name , ssp_name ) \u00a4 Assemble the markdown directory into a json ssp model file. In normal operation the markdown would have been edited to provide implementation responses. These responses are captured as prose in the ssp json file. Parameters: Name Type Description Default trestle_root Path The trestle root directory required md_name str The name of the directory containing the markdown control files for the ssp required ssp_name str The output name of the ssp json file to be created from the assembly required Returns: Type Description int 0 on success, 1 otherwise Source code in trestle/core/commands/author/ssp.py def assemble_ssp ( self , trestle_root : pathlib . Path , md_name : str , ssp_name : str ) -> int : \"\"\" Assemble the markdown directory into a json ssp model file. In normal operation the markdown would have been edited to provide implementation responses. These responses are captured as prose in the ssp json file. Args: trestle_root: The trestle root directory md_name: The name of the directory containing the markdown control files for the ssp ssp_name: The output name of the ssp json file to be created from the assembly Returns: 0 on success, 1 otherwise \"\"\" # find all groups in the markdown dir group_ids = [] md_dir = trestle_root / md_name for gdir in md_dir . glob ( '*/' ): group_ids . append ( str ( gdir . stem )) # generate the one dummy component that implementations will refer to in by_components component : ossp . SystemComponent = gens . generate_sample_model ( ossp . SystemComponent ) component . description = 'Dummy component created by trestle' # create system implementation to hold the dummy component system_imp : ossp . SystemImplementation = gens . generate_sample_model ( ossp . SystemImplementation ) system_imp . components = [ component ] # create implementation requirements for each control, linked to the dummy component uuid imp_reqs : List [ ossp . ImplementedRequirement ] = [] for group_id in group_ids : group_path = md_dir / group_id for control_file in group_path . glob ( '*.md' ): imp_reqs . extend ( self . _get_implementations ( control_file , component )) # create a control implementation to hold the implementation requirements control_imp : ossp . ControlImplementation = gens . generate_sample_model ( ossp . ControlImplementation ) control_imp . implemented_requirements = imp_reqs control_imp . description = const . SSP_SYSTEM_CONTROL_IMPLEMENTATION_TEXT # create a sample ssp to hold all the parts ssp = gens . generate_sample_model ( ossp . SystemSecurityPlan ) # insert the parts into the ssp ssp . control_implementation = control_imp ssp . system_implementation = system_imp import_profile : ossp . ImportProfile = gens . generate_sample_model ( ossp . ImportProfile ) import_profile . href = 'REPLACE_ME' ssp . import_profile = import_profile # write out the ssp as json ssp_dir = trestle_root / ( 'system-security-plans/' + ssp_name ) ssp_dir . mkdir ( exist_ok = True , parents = True ) ssp . oscal_write ( ssp_dir / 'system-security-plan.json' ) return 0 generate_ssp ( self , trestle_root , profile_path , md_path , sections , yaml_header ) \u00a4 Generate a partial ssp in markdown format from a profile and yaml header. The catalog contains a list of controls and the profile selects a subset of them in groups. The profile also specifies parameters for the controls. The result is a directory of markdown files, one for each control in the profile. Each control has the yaml header at the top. Parameters: Name Type Description Default trestle_root Path The trestle root directory required profile_path Path File path for OSCAL profile required md_path Path The directory into which the markdown controls are written required sections Optional[Dict[str, str]] A comma separated list of id:alias separated by colon to specify optional additional sections to be written out. The id corresponds to the name found in the profile parts for the corresponding section, and the alias is the nicer version to be printed out in the section header of the markdown. required yaml_header dict The dictionary corresponding to the desired contents of the yaml header at the top of each markdown file. If the dict is empty no yaml header is included. required Returns: Type Description int 0 on success, 1 otherwise Source code in trestle/core/commands/author/ssp.py def generate_ssp ( self , trestle_root : pathlib . Path , profile_path : pathlib . Path , md_path : pathlib . Path , sections : Optional [ Dict [ str , str ]], yaml_header : dict ) -> int : \"\"\" Generate a partial ssp in markdown format from a profile and yaml header. The catalog contains a list of controls and the profile selects a subset of them in groups. The profile also specifies parameters for the controls. The result is a directory of markdown files, one for each control in the profile. Each control has the yaml header at the top. Args: trestle_root: The trestle root directory profile_path: File path for OSCAL profile md_path: The directory into which the markdown controls are written sections: A comma separated list of id:alias separated by colon to specify optional additional sections to be written out. The id corresponds to the name found in the profile parts for the corresponding section, and the alias is the nicer version to be printed out in the section header of the markdown. yaml_header: The dictionary corresponding to the desired contents of the yaml header at the top of each markdown file. If the dict is empty no yaml header is included. Returns: 0 on success, 1 otherwise \"\"\" logging . debug ( f 'Generate ssp in { md_path } from profile { profile_path } ' ) # create the directory in which to write the control markdown files md_path . mkdir ( exist_ok = True , parents = True ) profile_resolver = ProfileResolver () resolved_catalog = profile_resolver . get_resolved_profile_catalog ( trestle_root , profile_path ) catalog_interface = CatalogInterface ( resolved_catalog ) # write out the controls for control in catalog_interface . get_all_controls ( True ): group_id , group_title , _ = catalog_interface . get_group_info ( control . id ) out_path = md_path / group_id self . _write_control ( out_path , control , group_title , yaml_header , sections ) return 0 get_all_implementation_prose ( control_file ) staticmethod \u00a4 Find all labels and associated prose in this control. Parameters: Name Type Description Default control_file Path path to the control markdown file required Returns: Type Description Dict[str, List[str]] Dictionary of part labels and corresponding prose read from the markdown file. Source code in trestle/core/commands/author/ssp.py @staticmethod def get_all_implementation_prose ( control_file : pathlib . Path ) -> Dict [ str , List [ str ]]: \"\"\" Find all labels and associated prose in this control. Args: control_file: path to the control markdown file Returns: Dictionary of part labels and corresponding prose read from the markdown file. \"\"\" if not control_file . exists (): return {} ii = 0 lines : List [ str ] = [] with control_file . open ( 'r' ) as f : raw_lines = f . readlines () lines = [ line . strip ( ' \\r\\n ' ) for line in raw_lines ] # keep moving down through the file picking up labels and prose responses : Dict [ str , List [ str ]] = {} while True : ii , part_label , prose_lines = SSPManager . _get_label_prose ( ii , lines ) if ii < 0 : break clean_label = SSPManager . _strip_bad_chars ( part_label ) responses [ clean_label ] = prose_lines return responses handler: python","title":"ssp"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp","text":"Create ssp from catalog and profile.","title":"ssp"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPAssemble","text":"SSP command Assemble SSP into json format from a directory of markdown files.","title":"SSPAssemble"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPAssemble.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPGenerate","text":"SSP command Generate SSP in markdown form from Profile.","title":"SSPGenerate"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPGenerate.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPManager","text":"Manage generation of SSP in markdown format from profile and assembly of edited markdown into json SSP.","title":"SSPManager"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPManager-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPManager.__init__","text":"Initialize the class. Source code in trestle/core/commands/author/ssp.py def __init__ ( self ): \"\"\"Initialize the class.\"\"\" self . _param_dict : Dict [ str , str ] = {} self . _md_file : Optional [ MDWriter ] = None self . _alters : List [ prof . Alter ] = [] self . _sections : Dict [ str , str ] = {}","title":"__init__()"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPManager.assemble_ssp","text":"Assemble the markdown directory into a json ssp model file. In normal operation the markdown would have been edited to provide implementation responses. These responses are captured as prose in the ssp json file. Parameters: Name Type Description Default trestle_root Path The trestle root directory required md_name str The name of the directory containing the markdown control files for the ssp required ssp_name str The output name of the ssp json file to be created from the assembly required Returns: Type Description int 0 on success, 1 otherwise Source code in trestle/core/commands/author/ssp.py def assemble_ssp ( self , trestle_root : pathlib . Path , md_name : str , ssp_name : str ) -> int : \"\"\" Assemble the markdown directory into a json ssp model file. In normal operation the markdown would have been edited to provide implementation responses. These responses are captured as prose in the ssp json file. Args: trestle_root: The trestle root directory md_name: The name of the directory containing the markdown control files for the ssp ssp_name: The output name of the ssp json file to be created from the assembly Returns: 0 on success, 1 otherwise \"\"\" # find all groups in the markdown dir group_ids = [] md_dir = trestle_root / md_name for gdir in md_dir . glob ( '*/' ): group_ids . append ( str ( gdir . stem )) # generate the one dummy component that implementations will refer to in by_components component : ossp . SystemComponent = gens . generate_sample_model ( ossp . SystemComponent ) component . description = 'Dummy component created by trestle' # create system implementation to hold the dummy component system_imp : ossp . SystemImplementation = gens . generate_sample_model ( ossp . SystemImplementation ) system_imp . components = [ component ] # create implementation requirements for each control, linked to the dummy component uuid imp_reqs : List [ ossp . ImplementedRequirement ] = [] for group_id in group_ids : group_path = md_dir / group_id for control_file in group_path . glob ( '*.md' ): imp_reqs . extend ( self . _get_implementations ( control_file , component )) # create a control implementation to hold the implementation requirements control_imp : ossp . ControlImplementation = gens . generate_sample_model ( ossp . ControlImplementation ) control_imp . implemented_requirements = imp_reqs control_imp . description = const . SSP_SYSTEM_CONTROL_IMPLEMENTATION_TEXT # create a sample ssp to hold all the parts ssp = gens . generate_sample_model ( ossp . SystemSecurityPlan ) # insert the parts into the ssp ssp . control_implementation = control_imp ssp . system_implementation = system_imp import_profile : ossp . ImportProfile = gens . generate_sample_model ( ossp . ImportProfile ) import_profile . href = 'REPLACE_ME' ssp . import_profile = import_profile # write out the ssp as json ssp_dir = trestle_root / ( 'system-security-plans/' + ssp_name ) ssp_dir . mkdir ( exist_ok = True , parents = True ) ssp . oscal_write ( ssp_dir / 'system-security-plan.json' ) return 0","title":"assemble_ssp()"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPManager.generate_ssp","text":"Generate a partial ssp in markdown format from a profile and yaml header. The catalog contains a list of controls and the profile selects a subset of them in groups. The profile also specifies parameters for the controls. The result is a directory of markdown files, one for each control in the profile. Each control has the yaml header at the top. Parameters: Name Type Description Default trestle_root Path The trestle root directory required profile_path Path File path for OSCAL profile required md_path Path The directory into which the markdown controls are written required sections Optional[Dict[str, str]] A comma separated list of id:alias separated by colon to specify optional additional sections to be written out. The id corresponds to the name found in the profile parts for the corresponding section, and the alias is the nicer version to be printed out in the section header of the markdown. required yaml_header dict The dictionary corresponding to the desired contents of the yaml header at the top of each markdown file. If the dict is empty no yaml header is included. required Returns: Type Description int 0 on success, 1 otherwise Source code in trestle/core/commands/author/ssp.py def generate_ssp ( self , trestle_root : pathlib . Path , profile_path : pathlib . Path , md_path : pathlib . Path , sections : Optional [ Dict [ str , str ]], yaml_header : dict ) -> int : \"\"\" Generate a partial ssp in markdown format from a profile and yaml header. The catalog contains a list of controls and the profile selects a subset of them in groups. The profile also specifies parameters for the controls. The result is a directory of markdown files, one for each control in the profile. Each control has the yaml header at the top. Args: trestle_root: The trestle root directory profile_path: File path for OSCAL profile md_path: The directory into which the markdown controls are written sections: A comma separated list of id:alias separated by colon to specify optional additional sections to be written out. The id corresponds to the name found in the profile parts for the corresponding section, and the alias is the nicer version to be printed out in the section header of the markdown. yaml_header: The dictionary corresponding to the desired contents of the yaml header at the top of each markdown file. If the dict is empty no yaml header is included. Returns: 0 on success, 1 otherwise \"\"\" logging . debug ( f 'Generate ssp in { md_path } from profile { profile_path } ' ) # create the directory in which to write the control markdown files md_path . mkdir ( exist_ok = True , parents = True ) profile_resolver = ProfileResolver () resolved_catalog = profile_resolver . get_resolved_profile_catalog ( trestle_root , profile_path ) catalog_interface = CatalogInterface ( resolved_catalog ) # write out the controls for control in catalog_interface . get_all_controls ( True ): group_id , group_title , _ = catalog_interface . get_group_info ( control . id ) out_path = md_path / group_id self . _write_control ( out_path , control , group_title , yaml_header , sections ) return 0","title":"generate_ssp()"},{"location":"api_reference/trestle.core.commands.author.ssp/#trestle.core.commands.author.ssp.SSPManager.get_all_implementation_prose","text":"Find all labels and associated prose in this control. Parameters: Name Type Description Default control_file Path path to the control markdown file required Returns: Type Description Dict[str, List[str]] Dictionary of part labels and corresponding prose read from the markdown file. Source code in trestle/core/commands/author/ssp.py @staticmethod def get_all_implementation_prose ( control_file : pathlib . Path ) -> Dict [ str , List [ str ]]: \"\"\" Find all labels and associated prose in this control. Args: control_file: path to the control markdown file Returns: Dictionary of part labels and corresponding prose read from the markdown file. \"\"\" if not control_file . exists (): return {} ii = 0 lines : List [ str ] = [] with control_file . open ( 'r' ) as f : raw_lines = f . readlines () lines = [ line . strip ( ' \\r\\n ' ) for line in raw_lines ] # keep moving down through the file picking up labels and prose responses : Dict [ str , List [ str ]] = {} while True : ii , part_label , prose_lines = SSPManager . _get_label_prose ( ii , lines ) if ii < 0 : break clean_label = SSPManager . _strip_bad_chars ( part_label ) responses [ clean_label ] = prose_lines return responses handler: python","title":"get_all_implementation_prose()"},{"location":"api_reference/trestle.core.commands.cmd_utils/","text":"trestle.core.commands.cmd_utils \u00a4 Trestle command related utilities. Functions \u00a4 model_type_is_too_granular ( model_type ) \u00a4 Is an model_type too fine to split. Source code in trestle/core/commands/cmd_utils.py def model_type_is_too_granular ( model_type : Type [ Any ]) -> bool : \"\"\"Is an model_type too fine to split.\"\"\" if utils . is_collection_field_type ( model_type ): return False if hasattr ( model_type , '__fields__' ) and '__root__' in model_type . __fields__ : return True if model_type . __name__ in [ 'str' , 'ConstrainedStrValue' , 'int' , 'float' , 'datetime' ]: return True return False parse_chain ( model_obj , path_parts , relative_path = None ) \u00a4 Parse the model chain starting from the beginning. Parameters: Name Type Description Default model_obj Optional[trestle.core.base_model.OscalBaseModel] Model to use for inspecting available elements, if available or none required path_parts List[str] list of string paths to parse including wildcards required relative_path Optional[pathlib.Path] Optional relative path (w.r.t trestle project root directory) None Returns: Type Description List[trestle.core.models.elements.ElementPath] List of ElementPath Source code in trestle/core/commands/cmd_utils.py def parse_chain ( model_obj : Union [ OscalBaseModel , None ], path_parts : List [ str ], relative_path : Optional [ pathlib . Path ] = None ) -> List [ ElementPath ]: \"\"\"Parse the model chain starting from the beginning. Args: model_obj: Model to use for inspecting available elements, if available or none path_parts: list of string paths to parse including wildcards relative_path: Optional relative path (w.r.t trestle project root directory) Returns: List of ElementPath \"\"\" element_paths : List [ ElementPath ] = [] sub_model = model_obj have_model_to_parse = model_obj is not None prev_element_path = None latest_path = None parent_model = path_parts [ 0 ] i = 1 while i < len ( path_parts ): p = path_parts [ i ] # if hit wildcard create element path up to this point if p == ElementPath . WILDCARD and len ( element_paths ) > 0 : # append wildcard to the latest element path latest_path = element_paths . pop () if latest_path . get_last () == ElementPath . WILDCARD : raise TrestleError ( f 'Invalid element path with consecutive { ElementPath . WILDCARD } ' ) latest_path_str = ElementPath . PATH_SEPARATOR . join ([ latest_path . to_string (), p ]) element_path = ElementPath ( latest_path_str , latest_path . get_parent ()) else : # create and append element_path # at this point sub_model may be a list of items # new element path is needed only if any of the items contains the desired part if p != ElementPath . WILDCARD : new_attrib = utils . dash_to_underscore ( p ) if isinstance ( sub_model , list ): for item in sub_model : # go into the list and find one with requested part sub_item = getattr ( item , new_attrib , None ) if sub_item is not None : sub_model = sub_item break else : sub_model = getattr ( sub_model , new_attrib , None ) if have_model_to_parse and sub_model is None : return element_paths p = ElementPath . PATH_SEPARATOR . join ([ parent_model , p ]) element_path = ElementPath ( p , parent_path = prev_element_path ) # If the path has wildcard and there are more parts later, # get the parent model for the alias path # If path has wildcard and it does not refer to a list, then there can be nothing after * if element_path . get_last () == ElementPath . WILDCARD : full_path_str = ElementPath . PATH_SEPARATOR . join ( element_path . get_full_path_parts ()[: - 1 ]) parent_model = fs . get_singular_alias ( full_path_str , relative_path ) # Does wildcard mean we need to inspect the sub_model to determine what can be split off from it? # If it has __root__ it may mean it contains a list of objects and should be split as a list if isinstance ( sub_model , OscalBaseModel ): root = getattr ( sub_model , '__root__' , None ) if root is None or not isinstance ( root , list ): # Cannot have parts beyond * if it isn't a list if i < len ( path_parts ) - 1 : raise TrestleError ( f 'Cannot split beyond * when the wildcard does not refer to a list. Path: { path_parts } ' ) for key in sub_model . __fields__ . keys (): # only create element path is item is present in the sub_model if getattr ( sub_model , key , None ) is None : continue new_alias = utils . underscore_to_dash ( key ) new_path = full_path_str + '.' + new_alias if not split_is_too_fine ( new_path , model_obj ): # to add parts of an element, need to add two links # prev_element_path may be None, for example catalog.* if prev_element_path is not None : element_paths . append ( prev_element_path ) element_paths . append ( ElementPath ( parent_model + '.' + new_alias , latest_path )) # Since wildcard is last in the chain when splitting an oscal model we are done return element_paths else : parent_model = element_path . get_element_name () # store values for next cycle prev_element_path = element_path element_paths . append ( element_path ) i += 1 return element_paths parse_element_arg ( model_obj , element_arg , relative_path = None ) \u00a4 Parse an element arg string into a list of ElementPath. Parameters: Name Type Description Default model_obj Optional[trestle.core.base_model.OscalBaseModel] The OscalBaseModel being inspected to determine available elements that can be split required element_arg str Single element path, as a string. required relative_path Optional[pathlib.Path] Optional relative path (from trestle root) used to validate element args are valid. None Returns: Type Description List[trestle.core.models.elements.ElementPath] The requested parsed list of ElementPath for use in split Source code in trestle/core/commands/cmd_utils.py def parse_element_arg ( model_obj : Union [ OscalBaseModel , None ], element_arg : str , relative_path : Optional [ pathlib . Path ] = None ) -> List [ ElementPath ]: \"\"\"Parse an element arg string into a list of ElementPath. Args: model_obj: The OscalBaseModel being inspected to determine available elements that can be split element_arg: Single element path, as a string. relative_path: Optional relative path (from trestle root) used to validate element args are valid. Returns: The requested parsed list of ElementPath for use in split \"\"\" element_arg = element_arg . strip () if element_arg == '*' : raise TrestleError ( 'Invalid element path containing only a single wildcard.' ) if element_arg == '' : raise TrestleError ( 'Invalid element path is empty string.' ) # search for wildcards and create paths with its parent path path_parts = element_arg . split ( ElementPath . PATH_SEPARATOR ) if len ( path_parts ) <= 1 : raise TrestleError ( f 'Invalid element path \" { element_arg } \" with only one element and no wildcard' ) element_paths = parse_chain ( model_obj , path_parts , relative_path ) if len ( element_paths ) <= 0 : # don't complain if nothing to split pass return element_paths parse_element_args ( model , element_args , relative_path = None ) \u00a4 Parse element args into a list of ElementPath. The element paths are either simple links of two elements, or two elements followed by *. The * represents either a list of the items in that element, or a splitting of that element into its parts. The only parts split off are the non-trivial ones determined by the granularity check. contextual_mode specifies if the path is a valid project model path or not. For example, if we are processing a metadata.parties.*, we need to know which metadata we are processing. If we pass contextual_mode=true, we can infer the root model by inspecting the file directory If contextual_mode=False, then the path must include the full path, e.g. catalog.metadata.parties. instead of just metadata.parties. When the * represents splitting a model rather than a list, the model is inspected for what parts are available, and for each new part two element paths are created, one for the parent to the current element, and another from the current element to the child. A path may have multiple *'s, but only the final one can represent splitting a model. Parameters: Name Type Description Default model Optional[trestle.core.base_model.OscalBaseModel] The OscalBaseModel being inspected to determine available elements that can be split required element_args List[str] List of str representing links in the chain of element paths to be parsed required relative_path Optional[pathlib.Path] Optional relative path (from trestle root) used to validate element args are valid. None Returns: Type Description List[trestle.core.models.elements.ElementPath] The requested parsed list of ElementPath for use in split Source code in trestle/core/commands/cmd_utils.py def parse_element_args ( model : Union [ OscalBaseModel , None ], element_args : List [ str ], relative_path : Optional [ pathlib . Path ] = None ) -> List [ ElementPath ]: \"\"\"Parse element args into a list of ElementPath. The element paths are either simple links of two elements, or two elements followed by *. The * represents either a list of the items in that element, or a splitting of that element into its parts. The only parts split off are the non-trivial ones determined by the granularity check. contextual_mode specifies if the path is a valid project model path or not. For example, if we are processing a metadata.parties.*, we need to know which metadata we are processing. If we pass contextual_mode=true, we can infer the root model by inspecting the file directory If contextual_mode=False, then the path must include the full path, e.g. catalog.metadata.parties.* instead of just metadata.parties.* When the * represents splitting a model rather than a list, the model is inspected for what parts are available, and for each new part two element paths are created, one for the parent to the current element, and another from the current element to the child. A path may have multiple *'s, but only the final one can represent splitting a model. Args: model: The OscalBaseModel being inspected to determine available elements that can be split element_args: List of str representing links in the chain of element paths to be parsed relative_path: Optional relative path (from trestle root) used to validate element args are valid. Returns: The requested parsed list of ElementPath for use in split \"\"\" # collect all paths element_paths : List [ ElementPath ] = [] for element_arg in element_args : paths = parse_element_arg ( model , element_arg , relative_path ) element_paths . extend ( paths ) return element_paths split_is_too_fine ( split_paths , model_obj ) \u00a4 Determine if the element path list goes too fine, e.g. individual strings. Source code in trestle/core/commands/cmd_utils.py def split_is_too_fine ( split_paths : str , model_obj : OscalBaseModel ) -> bool : \"\"\"Determine if the element path list goes too fine, e.g. individual strings.\"\"\" for split_path in split_paths . split ( ',' ): # find model type one level above if finishing with '.*' model_type = ElementPath ( split_path . rstrip ( '.*' )) . get_type ( type ( model_obj )) if model_type_is_too_granular ( model_type ): return True return False to_model_file_name ( model_obj , file_prefix , content_type ) \u00a4 Return the file name for the item. Source code in trestle/core/commands/cmd_utils.py def to_model_file_name ( model_obj : OscalBaseModel , file_prefix : str , content_type : FileContentType ) -> str : \"\"\"Return the file name for the item.\"\"\" file_ext = FileContentType . to_file_extension ( content_type ) model_type = utils . classname_to_alias ( type ( model_obj ) . __name__ , 'json' ) file_name = f ' { file_prefix }{ const . IDX_SEP }{ model_type }{ file_ext } ' return file_name handler: python","title":"cmd_utils"},{"location":"api_reference/trestle.core.commands.cmd_utils/#trestle.core.commands.cmd_utils","text":"Trestle command related utilities.","title":"cmd_utils"},{"location":"api_reference/trestle.core.commands.cmd_utils/#trestle.core.commands.cmd_utils-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.core.commands.cmd_utils/#trestle.core.commands.cmd_utils.model_type_is_too_granular","text":"Is an model_type too fine to split. Source code in trestle/core/commands/cmd_utils.py def model_type_is_too_granular ( model_type : Type [ Any ]) -> bool : \"\"\"Is an model_type too fine to split.\"\"\" if utils . is_collection_field_type ( model_type ): return False if hasattr ( model_type , '__fields__' ) and '__root__' in model_type . __fields__ : return True if model_type . __name__ in [ 'str' , 'ConstrainedStrValue' , 'int' , 'float' , 'datetime' ]: return True return False","title":"model_type_is_too_granular()"},{"location":"api_reference/trestle.core.commands.cmd_utils/#trestle.core.commands.cmd_utils.parse_chain","text":"Parse the model chain starting from the beginning. Parameters: Name Type Description Default model_obj Optional[trestle.core.base_model.OscalBaseModel] Model to use for inspecting available elements, if available or none required path_parts List[str] list of string paths to parse including wildcards required relative_path Optional[pathlib.Path] Optional relative path (w.r.t trestle project root directory) None Returns: Type Description List[trestle.core.models.elements.ElementPath] List of ElementPath Source code in trestle/core/commands/cmd_utils.py def parse_chain ( model_obj : Union [ OscalBaseModel , None ], path_parts : List [ str ], relative_path : Optional [ pathlib . Path ] = None ) -> List [ ElementPath ]: \"\"\"Parse the model chain starting from the beginning. Args: model_obj: Model to use for inspecting available elements, if available or none path_parts: list of string paths to parse including wildcards relative_path: Optional relative path (w.r.t trestle project root directory) Returns: List of ElementPath \"\"\" element_paths : List [ ElementPath ] = [] sub_model = model_obj have_model_to_parse = model_obj is not None prev_element_path = None latest_path = None parent_model = path_parts [ 0 ] i = 1 while i < len ( path_parts ): p = path_parts [ i ] # if hit wildcard create element path up to this point if p == ElementPath . WILDCARD and len ( element_paths ) > 0 : # append wildcard to the latest element path latest_path = element_paths . pop () if latest_path . get_last () == ElementPath . WILDCARD : raise TrestleError ( f 'Invalid element path with consecutive { ElementPath . WILDCARD } ' ) latest_path_str = ElementPath . PATH_SEPARATOR . join ([ latest_path . to_string (), p ]) element_path = ElementPath ( latest_path_str , latest_path . get_parent ()) else : # create and append element_path # at this point sub_model may be a list of items # new element path is needed only if any of the items contains the desired part if p != ElementPath . WILDCARD : new_attrib = utils . dash_to_underscore ( p ) if isinstance ( sub_model , list ): for item in sub_model : # go into the list and find one with requested part sub_item = getattr ( item , new_attrib , None ) if sub_item is not None : sub_model = sub_item break else : sub_model = getattr ( sub_model , new_attrib , None ) if have_model_to_parse and sub_model is None : return element_paths p = ElementPath . PATH_SEPARATOR . join ([ parent_model , p ]) element_path = ElementPath ( p , parent_path = prev_element_path ) # If the path has wildcard and there are more parts later, # get the parent model for the alias path # If path has wildcard and it does not refer to a list, then there can be nothing after * if element_path . get_last () == ElementPath . WILDCARD : full_path_str = ElementPath . PATH_SEPARATOR . join ( element_path . get_full_path_parts ()[: - 1 ]) parent_model = fs . get_singular_alias ( full_path_str , relative_path ) # Does wildcard mean we need to inspect the sub_model to determine what can be split off from it? # If it has __root__ it may mean it contains a list of objects and should be split as a list if isinstance ( sub_model , OscalBaseModel ): root = getattr ( sub_model , '__root__' , None ) if root is None or not isinstance ( root , list ): # Cannot have parts beyond * if it isn't a list if i < len ( path_parts ) - 1 : raise TrestleError ( f 'Cannot split beyond * when the wildcard does not refer to a list. Path: { path_parts } ' ) for key in sub_model . __fields__ . keys (): # only create element path is item is present in the sub_model if getattr ( sub_model , key , None ) is None : continue new_alias = utils . underscore_to_dash ( key ) new_path = full_path_str + '.' + new_alias if not split_is_too_fine ( new_path , model_obj ): # to add parts of an element, need to add two links # prev_element_path may be None, for example catalog.* if prev_element_path is not None : element_paths . append ( prev_element_path ) element_paths . append ( ElementPath ( parent_model + '.' + new_alias , latest_path )) # Since wildcard is last in the chain when splitting an oscal model we are done return element_paths else : parent_model = element_path . get_element_name () # store values for next cycle prev_element_path = element_path element_paths . append ( element_path ) i += 1 return element_paths","title":"parse_chain()"},{"location":"api_reference/trestle.core.commands.cmd_utils/#trestle.core.commands.cmd_utils.parse_element_arg","text":"Parse an element arg string into a list of ElementPath. Parameters: Name Type Description Default model_obj Optional[trestle.core.base_model.OscalBaseModel] The OscalBaseModel being inspected to determine available elements that can be split required element_arg str Single element path, as a string. required relative_path Optional[pathlib.Path] Optional relative path (from trestle root) used to validate element args are valid. None Returns: Type Description List[trestle.core.models.elements.ElementPath] The requested parsed list of ElementPath for use in split Source code in trestle/core/commands/cmd_utils.py def parse_element_arg ( model_obj : Union [ OscalBaseModel , None ], element_arg : str , relative_path : Optional [ pathlib . Path ] = None ) -> List [ ElementPath ]: \"\"\"Parse an element arg string into a list of ElementPath. Args: model_obj: The OscalBaseModel being inspected to determine available elements that can be split element_arg: Single element path, as a string. relative_path: Optional relative path (from trestle root) used to validate element args are valid. Returns: The requested parsed list of ElementPath for use in split \"\"\" element_arg = element_arg . strip () if element_arg == '*' : raise TrestleError ( 'Invalid element path containing only a single wildcard.' ) if element_arg == '' : raise TrestleError ( 'Invalid element path is empty string.' ) # search for wildcards and create paths with its parent path path_parts = element_arg . split ( ElementPath . PATH_SEPARATOR ) if len ( path_parts ) <= 1 : raise TrestleError ( f 'Invalid element path \" { element_arg } \" with only one element and no wildcard' ) element_paths = parse_chain ( model_obj , path_parts , relative_path ) if len ( element_paths ) <= 0 : # don't complain if nothing to split pass return element_paths","title":"parse_element_arg()"},{"location":"api_reference/trestle.core.commands.cmd_utils/#trestle.core.commands.cmd_utils.parse_element_args","text":"Parse element args into a list of ElementPath. The element paths are either simple links of two elements, or two elements followed by *. The * represents either a list of the items in that element, or a splitting of that element into its parts. The only parts split off are the non-trivial ones determined by the granularity check. contextual_mode specifies if the path is a valid project model path or not. For example, if we are processing a metadata.parties.*, we need to know which metadata we are processing. If we pass contextual_mode=true, we can infer the root model by inspecting the file directory If contextual_mode=False, then the path must include the full path, e.g. catalog.metadata.parties. instead of just metadata.parties. When the * represents splitting a model rather than a list, the model is inspected for what parts are available, and for each new part two element paths are created, one for the parent to the current element, and another from the current element to the child. A path may have multiple *'s, but only the final one can represent splitting a model. Parameters: Name Type Description Default model Optional[trestle.core.base_model.OscalBaseModel] The OscalBaseModel being inspected to determine available elements that can be split required element_args List[str] List of str representing links in the chain of element paths to be parsed required relative_path Optional[pathlib.Path] Optional relative path (from trestle root) used to validate element args are valid. None Returns: Type Description List[trestle.core.models.elements.ElementPath] The requested parsed list of ElementPath for use in split Source code in trestle/core/commands/cmd_utils.py def parse_element_args ( model : Union [ OscalBaseModel , None ], element_args : List [ str ], relative_path : Optional [ pathlib . Path ] = None ) -> List [ ElementPath ]: \"\"\"Parse element args into a list of ElementPath. The element paths are either simple links of two elements, or two elements followed by *. The * represents either a list of the items in that element, or a splitting of that element into its parts. The only parts split off are the non-trivial ones determined by the granularity check. contextual_mode specifies if the path is a valid project model path or not. For example, if we are processing a metadata.parties.*, we need to know which metadata we are processing. If we pass contextual_mode=true, we can infer the root model by inspecting the file directory If contextual_mode=False, then the path must include the full path, e.g. catalog.metadata.parties.* instead of just metadata.parties.* When the * represents splitting a model rather than a list, the model is inspected for what parts are available, and for each new part two element paths are created, one for the parent to the current element, and another from the current element to the child. A path may have multiple *'s, but only the final one can represent splitting a model. Args: model: The OscalBaseModel being inspected to determine available elements that can be split element_args: List of str representing links in the chain of element paths to be parsed relative_path: Optional relative path (from trestle root) used to validate element args are valid. Returns: The requested parsed list of ElementPath for use in split \"\"\" # collect all paths element_paths : List [ ElementPath ] = [] for element_arg in element_args : paths = parse_element_arg ( model , element_arg , relative_path ) element_paths . extend ( paths ) return element_paths","title":"parse_element_args()"},{"location":"api_reference/trestle.core.commands.cmd_utils/#trestle.core.commands.cmd_utils.split_is_too_fine","text":"Determine if the element path list goes too fine, e.g. individual strings. Source code in trestle/core/commands/cmd_utils.py def split_is_too_fine ( split_paths : str , model_obj : OscalBaseModel ) -> bool : \"\"\"Determine if the element path list goes too fine, e.g. individual strings.\"\"\" for split_path in split_paths . split ( ',' ): # find model type one level above if finishing with '.*' model_type = ElementPath ( split_path . rstrip ( '.*' )) . get_type ( type ( model_obj )) if model_type_is_too_granular ( model_type ): return True return False","title":"split_is_too_fine()"},{"location":"api_reference/trestle.core.commands.cmd_utils/#trestle.core.commands.cmd_utils.to_model_file_name","text":"Return the file name for the item. Source code in trestle/core/commands/cmd_utils.py def to_model_file_name ( model_obj : OscalBaseModel , file_prefix : str , content_type : FileContentType ) -> str : \"\"\"Return the file name for the item.\"\"\" file_ext = FileContentType . to_file_extension ( content_type ) model_type = utils . classname_to_alias ( type ( model_obj ) . __name__ , 'json' ) file_name = f ' { file_prefix }{ const . IDX_SEP }{ model_type }{ file_ext } ' return file_name handler: python","title":"to_model_file_name()"},{"location":"api_reference/trestle.core.commands.command_docs/","text":"trestle.core.commands.command_docs \u00a4 Trestle command abstraction. Improves parsing until such a point as ILCLI is fixed. logger \u00a4 Classes \u00a4 CommandPlusDocs ( Command ) \u00a4 Linear extension to the ILCLI interface to use documentation string more. Methods \u00a4 __init__ ( self , parser = None , parent = None , name = None , out = None , err = None ) special \u00a4 Override default ILCLI behaviour to include class documentation in command help description. Source code in trestle/core/commands/command_docs.py def __init__ ( self , parser = None , parent = None , name = None , out = None , err = None ) -> None : \"\"\"Override default ILCLI behaviour to include class documentation in command help description.\"\"\" super ( CommandPlusDocs , self ) . __init__ ( parser , parent , name , out , err ) self . parser . description = self . __doc__ handler: python","title":"command_docs"},{"location":"api_reference/trestle.core.commands.command_docs/#trestle.core.commands.command_docs","text":"Trestle command abstraction. Improves parsing until such a point as ILCLI is fixed.","title":"command_docs"},{"location":"api_reference/trestle.core.commands.command_docs/#trestle.core.commands.command_docs.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.command_docs/#trestle.core.commands.command_docs-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.command_docs/#trestle.core.commands.command_docs.CommandPlusDocs","text":"Linear extension to the ILCLI interface to use documentation string more.","title":"CommandPlusDocs"},{"location":"api_reference/trestle.core.commands.command_docs/#trestle.core.commands.command_docs.CommandPlusDocs-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.command_docs/#trestle.core.commands.command_docs.CommandPlusDocs.__init__","text":"Override default ILCLI behaviour to include class documentation in command help description. Source code in trestle/core/commands/command_docs.py def __init__ ( self , parser = None , parent = None , name = None , out = None , err = None ) -> None : \"\"\"Override default ILCLI behaviour to include class documentation in command help description.\"\"\" super ( CommandPlusDocs , self ) . __init__ ( parser , parent , name , out , err ) self . parser . description = self . __doc__ handler: python","title":"__init__()"},{"location":"api_reference/trestle.core.commands.create/","text":"trestle.core.commands.create \u00a4 Trestle Create CommandPlusDocs. logger \u00a4 Classes \u00a4 CreateCmd ( CommandPlusDocs ) \u00a4 Create a sample OSCAL model in trestle project. name \u00a4 Methods \u00a4 create_object ( model_alias , object_type , args ) classmethod \u00a4 Create a top level OSCAL object within the trestle directory, leveraging functionality in add. Source code in trestle/core/commands/create.py @classmethod def create_object ( cls , model_alias : str , object_type : Type [ TopLevelOscalModel ], args : argparse . Namespace ) -> int : \"\"\"Create a top level OSCAL object within the trestle directory, leveraging functionality in add.\"\"\" log . set_log_level_from_args ( args ) trestle_root = args . trestle_root # trestle root is set via command line in args. Default is cwd. if not trestle_root or not fs . is_valid_project_root ( args . trestle_root ): logger . error ( f 'Given directory { trestle_root } is not a trestle project.' ) return 1 plural_path = fs . model_type_to_model_dir ( model_alias ) desired_model_dir = trestle_root / plural_path / args . output desired_model_path = desired_model_dir / ( model_alias + '.' + args . extension ) if desired_model_path . exists (): logger . error ( f 'OSCAL file to be created here: { desired_model_path } exists.' ) logger . error ( 'Aborting trestle create.' ) return 1 # Create sample model. sample_model = generators . generate_sample_model ( object_type , include_optional = args . include_optional_fields ) # Presuming top level level model not sure how to do the typing for this. sample_model . metadata . title = f 'Generic { model_alias } created by trestle named { args . output } .' # type: ignore sample_model . metadata . last_modified = datetime . now () . astimezone () sample_model . metadata . oscal_version = trestle . oscal . OSCAL_VERSION sample_model . metadata . version = '0.0.0' top_element = Element ( sample_model , model_alias ) create_action = CreatePathAction ( desired_model_path . resolve (), True ) write_action = WriteFileAction ( desired_model_path . resolve (), top_element , FileContentType . to_content_type ( desired_model_path . suffix ) ) # create a plan to write the directory and file. try : create_plan = Plan () create_plan . add_action ( create_action ) create_plan . add_action ( write_action ) create_plan . simulate () create_plan . execute () return 0 except Exception as e : logger . error ( 'Unknown error executing trestle create operations. Rolling back.' ) logger . debug ( e ) return 1 handler: python","title":"create"},{"location":"api_reference/trestle.core.commands.create/#trestle.core.commands.create","text":"Trestle Create CommandPlusDocs.","title":"create"},{"location":"api_reference/trestle.core.commands.create/#trestle.core.commands.create.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.create/#trestle.core.commands.create-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.create/#trestle.core.commands.create.CreateCmd","text":"Create a sample OSCAL model in trestle project.","title":"CreateCmd"},{"location":"api_reference/trestle.core.commands.create/#trestle.core.commands.create.CreateCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.create/#trestle.core.commands.create.CreateCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.create/#trestle.core.commands.create.CreateCmd.create_object","text":"Create a top level OSCAL object within the trestle directory, leveraging functionality in add. Source code in trestle/core/commands/create.py @classmethod def create_object ( cls , model_alias : str , object_type : Type [ TopLevelOscalModel ], args : argparse . Namespace ) -> int : \"\"\"Create a top level OSCAL object within the trestle directory, leveraging functionality in add.\"\"\" log . set_log_level_from_args ( args ) trestle_root = args . trestle_root # trestle root is set via command line in args. Default is cwd. if not trestle_root or not fs . is_valid_project_root ( args . trestle_root ): logger . error ( f 'Given directory { trestle_root } is not a trestle project.' ) return 1 plural_path = fs . model_type_to_model_dir ( model_alias ) desired_model_dir = trestle_root / plural_path / args . output desired_model_path = desired_model_dir / ( model_alias + '.' + args . extension ) if desired_model_path . exists (): logger . error ( f 'OSCAL file to be created here: { desired_model_path } exists.' ) logger . error ( 'Aborting trestle create.' ) return 1 # Create sample model. sample_model = generators . generate_sample_model ( object_type , include_optional = args . include_optional_fields ) # Presuming top level level model not sure how to do the typing for this. sample_model . metadata . title = f 'Generic { model_alias } created by trestle named { args . output } .' # type: ignore sample_model . metadata . last_modified = datetime . now () . astimezone () sample_model . metadata . oscal_version = trestle . oscal . OSCAL_VERSION sample_model . metadata . version = '0.0.0' top_element = Element ( sample_model , model_alias ) create_action = CreatePathAction ( desired_model_path . resolve (), True ) write_action = WriteFileAction ( desired_model_path . resolve (), top_element , FileContentType . to_content_type ( desired_model_path . suffix ) ) # create a plan to write the directory and file. try : create_plan = Plan () create_plan . add_action ( create_action ) create_plan . add_action ( write_action ) create_plan . simulate () create_plan . execute () return 0 except Exception as e : logger . error ( 'Unknown error executing trestle create operations. Rolling back.' ) logger . debug ( e ) return 1 handler: python","title":"create_object()"},{"location":"api_reference/trestle.core.commands.describe/","text":"trestle.core.commands.describe \u00a4 Trestle Describe Command. logger \u00a4 Classes \u00a4 DescribeCmd ( CommandPlusDocs ) \u00a4 Describe contents of a model file including optional element path. name \u00a4 Methods \u00a4 describe ( file_path , element_path_str , trestle_root ) classmethod \u00a4 Describe the contents of the file. Parameters: Name Type Description Default file_path Path pathlib.Path Path for model file to describe. required element_path_str str Element path of element in model to describe. Can be ''. required Returns: Type Description List[str] The list of lines of text in the description, or an empty list on failure Source code in trestle/core/commands/describe.py @classmethod def describe ( cls , file_path : pathlib . Path , element_path_str : str , trestle_root : pathlib . Path ) -> List [ str ]: \"\"\"Describe the contents of the file. Args: file_path: pathlib.Path Path for model file to describe. element_path_str: Element path of element in model to describe. Can be ''. Returns: The list of lines of text in the description, or an empty list on failure \"\"\" # figure out the model type so we can read it try : model_type , _ = fs . get_stripped_model_type ( file_path , trestle_root ) model : OscalBaseModel = model_type . oscal_read ( file_path ) except TrestleError as e : logger . warning ( f 'Error loading model { file_path } to describe: { e } ' ) return [] sub_model = model # if an element path was provided, follow the path chain to the desired sub_model if element_path_str : if '*' in element_path_str or ',' in element_path_str : logger . warning ( 'Wildcards and commas are not allowed in the element path for describe.' ) return [] if '.' not in element_path_str : logger . warning ( 'The element path for describe must either be omitted or contain at least 2 parts.' ) return [] element_paths = utils . parse_element_arg ( model , element_path_str ) sub_model_element = Element ( model ) for element_path in element_paths : sub_model = sub_model_element . get_at ( element_path , False ) sub_model_element = Element ( sub_model ) # now that we have the desired sub_model we can describe it text_out : List [ str ] = [] # create top level text depending on whether an element path was used element_text = '' if not element_path_str else f ' at element path { element_path_str } ' if type ( sub_model ) is list : text = f 'Model file { file_path }{ element_text } is a { cls . _description_text ( sub_model ) } ' text_out . append ( text ) logger . info ( text ) else : text = f 'Model file { file_path }{ element_text } is of type ' text += f ' { cls . _clean_type_string ( str ( type ( sub_model ))) } and contains:' text_out . append ( text ) logger . info ( text ) for key in sub_model . __fields__ . keys (): value = getattr ( sub_model , key , None ) text = f ' { key } : { cls . _description_text ( value ) } ' text_out . append ( text ) logger . info ( text ) return text_out handler: python","title":"describe"},{"location":"api_reference/trestle.core.commands.describe/#trestle.core.commands.describe","text":"Trestle Describe Command.","title":"describe"},{"location":"api_reference/trestle.core.commands.describe/#trestle.core.commands.describe.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.describe/#trestle.core.commands.describe-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.describe/#trestle.core.commands.describe.DescribeCmd","text":"Describe contents of a model file including optional element path.","title":"DescribeCmd"},{"location":"api_reference/trestle.core.commands.describe/#trestle.core.commands.describe.DescribeCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.describe/#trestle.core.commands.describe.DescribeCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.describe/#trestle.core.commands.describe.DescribeCmd.describe","text":"Describe the contents of the file. Parameters: Name Type Description Default file_path Path pathlib.Path Path for model file to describe. required element_path_str str Element path of element in model to describe. Can be ''. required Returns: Type Description List[str] The list of lines of text in the description, or an empty list on failure Source code in trestle/core/commands/describe.py @classmethod def describe ( cls , file_path : pathlib . Path , element_path_str : str , trestle_root : pathlib . Path ) -> List [ str ]: \"\"\"Describe the contents of the file. Args: file_path: pathlib.Path Path for model file to describe. element_path_str: Element path of element in model to describe. Can be ''. Returns: The list of lines of text in the description, or an empty list on failure \"\"\" # figure out the model type so we can read it try : model_type , _ = fs . get_stripped_model_type ( file_path , trestle_root ) model : OscalBaseModel = model_type . oscal_read ( file_path ) except TrestleError as e : logger . warning ( f 'Error loading model { file_path } to describe: { e } ' ) return [] sub_model = model # if an element path was provided, follow the path chain to the desired sub_model if element_path_str : if '*' in element_path_str or ',' in element_path_str : logger . warning ( 'Wildcards and commas are not allowed in the element path for describe.' ) return [] if '.' not in element_path_str : logger . warning ( 'The element path for describe must either be omitted or contain at least 2 parts.' ) return [] element_paths = utils . parse_element_arg ( model , element_path_str ) sub_model_element = Element ( model ) for element_path in element_paths : sub_model = sub_model_element . get_at ( element_path , False ) sub_model_element = Element ( sub_model ) # now that we have the desired sub_model we can describe it text_out : List [ str ] = [] # create top level text depending on whether an element path was used element_text = '' if not element_path_str else f ' at element path { element_path_str } ' if type ( sub_model ) is list : text = f 'Model file { file_path }{ element_text } is a { cls . _description_text ( sub_model ) } ' text_out . append ( text ) logger . info ( text ) else : text = f 'Model file { file_path }{ element_text } is of type ' text += f ' { cls . _clean_type_string ( str ( type ( sub_model ))) } and contains:' text_out . append ( text ) logger . info ( text ) for key in sub_model . __fields__ . keys (): value = getattr ( sub_model , key , None ) text = f ' { key } : { cls . _description_text ( value ) } ' text_out . append ( text ) logger . info ( text ) return text_out handler: python","title":"describe()"},{"location":"api_reference/trestle.core.commands.href/","text":"trestle.core.commands.href \u00a4 Trestle Href Command. logger \u00a4 Classes \u00a4 HrefCmd ( CommandPlusDocs ) \u00a4 Change href of import in profile to point to catalog in trestle project. This command is needed when generating an SSP with a profile that imports a catalog from a temporary location different from the final intended location of the catalog. Omit the href argument to see the list of current imports in the profile. name \u00a4 Methods \u00a4 change_import_href ( trestle_root , profile_name , new_href , import_num ) classmethod \u00a4 Change the href of the import in the profile to point to a catalog in a specific location. A Profile has an Imports list containing at least one href of a catalog or profile to be imported. If the item being referenced is currently in the same trestle project as the main profile, the original href is likely different from the one needed to access the item from the profile. Therefore, in order for trestle to find the item directly from the profile, the href must be modified in a way that trestle can load it. If the item is already at the link referred to by the href as a valid URI or absolute file path then no change is needed. But if the item is being worked on in the same trestle directory as the profile, the href should be modified to something like trestle://catalogs/my_catalog/catalog.json This change only needs to be made once to the profile while the profile is being used to generate SSP's from the local item, but if the final profile is released the href would need to be changed to the intended final location of the referenced item. Parameters: Name Type Description Default trestle_root Path trestle_root for this call required profile_name str Name of profile already imported into trestle containing href's to be changed required new_href str New value for the href of the import. If blank just list the hrefs required import_num int Item number of the href to change. required Returns: Type Description int 0 on success, 1 on failure Assumptions and requirements: The profile must be a valid profile in the trestle project. The import must either be a valid uri, including local file, or trestle:// The original href is not checked and will be overwritten. If href is the empty string, just list all hrefs. Future work: Allow multiple imports with matching hrefs. Allow href to point to profile in trestle rather than catalog, and by name. Allow full chaining of linked catalogs and profiles. Source code in trestle/core/commands/href.py @classmethod def change_import_href ( cls , trestle_root : pathlib . Path , profile_name : str , new_href : str , import_num : int ) -> int : \"\"\"Change the href of the import in the profile to point to a catalog in a specific location. A Profile has an Imports list containing at least one href of a catalog or profile to be imported. If the item being referenced is currently in the same trestle project as the main profile, the original href is likely different from the one needed to access the item from the profile. Therefore, in order for trestle to find the item directly from the profile, the href must be modified in a way that trestle can load it. If the item is already at the link referred to by the href as a valid URI or absolute file path then no change is needed. But if the item is being worked on in the same trestle directory as the profile, the href should be modified to something like trestle://catalogs/my_catalog/catalog.json This change only needs to be made once to the profile while the profile is being used to generate SSP's from the local item, but if the final profile is released the href would need to be changed to the intended final location of the referenced item. Args: trestle_root: trestle_root for this call profile_name: Name of profile already imported into trestle containing href's to be changed new_href: New value for the href of the import. If blank just list the hrefs import_num: Item number of the href to change. Returns: 0 on success, 1 on failure Assumptions and requirements: The profile must be a valid profile in the trestle project. The import must either be a valid uri, including local file, or trestle:// The original href is not checked and will be overwritten. If href is the empty string, just list all hrefs. Future work: Allow multiple imports with matching hrefs. Allow href to point to profile in trestle rather than catalog, and by name. Allow full chaining of linked catalogs and profiles. \"\"\" profile_dir = trestle_root / f 'profiles/ { profile_name } ' content_type = fs . get_contextual_file_type ( profile_dir ) profile_path = ( profile_dir / 'profile' ) . with_suffix ( fs . FileContentType . to_file_extension ( content_type )) profile_data : profile . Profile = profile . Profile . oscal_read ( profile_path ) n_imports = len ( profile_data . imports ) if not new_href : logger . info ( f 'List of imports for profile { profile_name } :' ) for ii , import_ in enumerate ( profile_data . imports ): logger . info ( f ' { ii : 2 } : { import_ . href } ' ) return 0 if n_imports <= import_num : logger . warning ( f 'Import number { import_num } is too large. This profile has only { n_imports } imports.' ) return 1 logger . info ( f 'Changing import { import_num } in profile { profile_name } from, to:' ) logger . info ( f ' { profile_data . imports [ import_num ] . href } ' ) logger . info ( f ' { new_href } ' ) profile_data . imports [ import_num ] . href = new_href profile_data . oscal_write ( profile_path ) return 0 handler: python","title":"href"},{"location":"api_reference/trestle.core.commands.href/#trestle.core.commands.href","text":"Trestle Href Command.","title":"href"},{"location":"api_reference/trestle.core.commands.href/#trestle.core.commands.href.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.href/#trestle.core.commands.href-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.href/#trestle.core.commands.href.HrefCmd","text":"Change href of import in profile to point to catalog in trestle project. This command is needed when generating an SSP with a profile that imports a catalog from a temporary location different from the final intended location of the catalog. Omit the href argument to see the list of current imports in the profile.","title":"HrefCmd"},{"location":"api_reference/trestle.core.commands.href/#trestle.core.commands.href.HrefCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.href/#trestle.core.commands.href.HrefCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.href/#trestle.core.commands.href.HrefCmd.change_import_href","text":"Change the href of the import in the profile to point to a catalog in a specific location. A Profile has an Imports list containing at least one href of a catalog or profile to be imported. If the item being referenced is currently in the same trestle project as the main profile, the original href is likely different from the one needed to access the item from the profile. Therefore, in order for trestle to find the item directly from the profile, the href must be modified in a way that trestle can load it. If the item is already at the link referred to by the href as a valid URI or absolute file path then no change is needed. But if the item is being worked on in the same trestle directory as the profile, the href should be modified to something like trestle://catalogs/my_catalog/catalog.json This change only needs to be made once to the profile while the profile is being used to generate SSP's from the local item, but if the final profile is released the href would need to be changed to the intended final location of the referenced item. Parameters: Name Type Description Default trestle_root Path trestle_root for this call required profile_name str Name of profile already imported into trestle containing href's to be changed required new_href str New value for the href of the import. If blank just list the hrefs required import_num int Item number of the href to change. required Returns: Type Description int 0 on success, 1 on failure Assumptions and requirements: The profile must be a valid profile in the trestle project. The import must either be a valid uri, including local file, or trestle:// The original href is not checked and will be overwritten. If href is the empty string, just list all hrefs. Future work: Allow multiple imports with matching hrefs. Allow href to point to profile in trestle rather than catalog, and by name. Allow full chaining of linked catalogs and profiles. Source code in trestle/core/commands/href.py @classmethod def change_import_href ( cls , trestle_root : pathlib . Path , profile_name : str , new_href : str , import_num : int ) -> int : \"\"\"Change the href of the import in the profile to point to a catalog in a specific location. A Profile has an Imports list containing at least one href of a catalog or profile to be imported. If the item being referenced is currently in the same trestle project as the main profile, the original href is likely different from the one needed to access the item from the profile. Therefore, in order for trestle to find the item directly from the profile, the href must be modified in a way that trestle can load it. If the item is already at the link referred to by the href as a valid URI or absolute file path then no change is needed. But if the item is being worked on in the same trestle directory as the profile, the href should be modified to something like trestle://catalogs/my_catalog/catalog.json This change only needs to be made once to the profile while the profile is being used to generate SSP's from the local item, but if the final profile is released the href would need to be changed to the intended final location of the referenced item. Args: trestle_root: trestle_root for this call profile_name: Name of profile already imported into trestle containing href's to be changed new_href: New value for the href of the import. If blank just list the hrefs import_num: Item number of the href to change. Returns: 0 on success, 1 on failure Assumptions and requirements: The profile must be a valid profile in the trestle project. The import must either be a valid uri, including local file, or trestle:// The original href is not checked and will be overwritten. If href is the empty string, just list all hrefs. Future work: Allow multiple imports with matching hrefs. Allow href to point to profile in trestle rather than catalog, and by name. Allow full chaining of linked catalogs and profiles. \"\"\" profile_dir = trestle_root / f 'profiles/ { profile_name } ' content_type = fs . get_contextual_file_type ( profile_dir ) profile_path = ( profile_dir / 'profile' ) . with_suffix ( fs . FileContentType . to_file_extension ( content_type )) profile_data : profile . Profile = profile . Profile . oscal_read ( profile_path ) n_imports = len ( profile_data . imports ) if not new_href : logger . info ( f 'List of imports for profile { profile_name } :' ) for ii , import_ in enumerate ( profile_data . imports ): logger . info ( f ' { ii : 2 } : { import_ . href } ' ) return 0 if n_imports <= import_num : logger . warning ( f 'Import number { import_num } is too large. This profile has only { n_imports } imports.' ) return 1 logger . info ( f 'Changing import { import_num } in profile { profile_name } from, to:' ) logger . info ( f ' { profile_data . imports [ import_num ] . href } ' ) logger . info ( f ' { new_href } ' ) profile_data . imports [ import_num ] . href = new_href profile_data . oscal_write ( profile_path ) return 0 handler: python","title":"change_import_href()"},{"location":"api_reference/trestle.core.commands.import_/","text":"trestle.core.commands.import_ \u00a4 Trestle Import Command. logger \u00a4 Classes \u00a4 ImportCmd ( CommandPlusDocs ) \u00a4 Import an existing full OSCAL model into the trestle project. name \u00a4 handler: python","title":"import_"},{"location":"api_reference/trestle.core.commands.import_/#trestle.core.commands.import_","text":"Trestle Import Command.","title":"import_"},{"location":"api_reference/trestle.core.commands.import_/#trestle.core.commands.import_.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.import_/#trestle.core.commands.import_-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.import_/#trestle.core.commands.import_.ImportCmd","text":"Import an existing full OSCAL model into the trestle project.","title":"ImportCmd"},{"location":"api_reference/trestle.core.commands.import_/#trestle.core.commands.import_.ImportCmd.name","text":"handler: python","title":"name"},{"location":"api_reference/trestle.core.commands.init/","text":"trestle.core.commands.init \u00a4 Trestle Init Command. logger \u00a4 Classes \u00a4 InitCmd ( CommandPlusDocs ) \u00a4 Initialize a trestle working directory. name \u00a4 handler: python","title":"init"},{"location":"api_reference/trestle.core.commands.init/#trestle.core.commands.init","text":"Trestle Init Command.","title":"init"},{"location":"api_reference/trestle.core.commands.init/#trestle.core.commands.init.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.init/#trestle.core.commands.init-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.init/#trestle.core.commands.init.InitCmd","text":"Initialize a trestle working directory.","title":"InitCmd"},{"location":"api_reference/trestle.core.commands.init/#trestle.core.commands.init.InitCmd.name","text":"handler: python","title":"name"},{"location":"api_reference/trestle.core.commands.merge/","text":"trestle.core.commands.merge \u00a4 Trestle Merge Command. logger \u00a4 Classes \u00a4 MergeCmd ( CommandPlusDocs ) \u00a4 Merge subcomponents on a trestle model. name \u00a4 Methods \u00a4 merge ( effective_cwd , element_path , trestle_root ) classmethod \u00a4 Merge operations. It returns a plan for the operation Source code in trestle/core/commands/merge.py @classmethod def merge ( cls , effective_cwd : Path , element_path : ElementPath , trestle_root : Path ) -> Plan : \"\"\"Merge operations. It returns a plan for the operation \"\"\" if not element_path . is_multipart (): msg = 'Multiple parts of an element path must be passed to merge e.g. catalog.* or catalog.groups' logger . error ( msg ) raise TrestleError ( msg ) target_model_alias = element_path . get_last () logger . debug ( f 'merge element path list: { element_path } target model alias { target_model_alias } ' ) \"\"\"1. Load desination model into a stripped model\"\"\" # Load destination model destination_path = element_path . get_preceding_path () destination_model_alias = destination_path . get_last () # Destination model filetype try : logger . debug ( f 'merge destination model alias: { destination_model_alias } ' ) logger . debug ( 'merge getting contextual file type effective working directory' ) file_type = fs . get_contextual_file_type ( effective_cwd ) logger . debug ( f 'contextual file type is { file_type } ' ) except Exception as e : raise TrestleError ( str ( e )) file_ext = FileContentType . to_file_extension ( file_type ) # Destination model filename destination_model_path = ( effective_cwd / f ' { utils . classname_to_alias ( destination_model_alias , \"json\" ) }{ file_ext } ' ) logger . debug ( f 'destination model filename is { destination_model_path } ' ) destination_model_type , _ = fs . get_stripped_model_type ( destination_model_path , trestle_root ) destination_model_object : OscalBaseModel = None if destination_model_path . exists (): logger . debug ( 'dest filename exists so read it' ) destination_model_object = destination_model_type . oscal_read ( destination_model_path ) \"\"\"2. If target is wildcard, load distributed destination model and replace destination model.\"\"\" # Handle WILDCARD '*' match. Return plan to load the destination model, with its distributed attributes if target_model_alias == '*' : logger . debug ( 'handle target model alias wildcard' ) collection_type = None if destination_model_type . is_collection_container (): collection_type = destination_model_type . get_collection_type () merged_model_type , _ , merged_model_instance = load_distributed . load_distributed ( destination_model_path , trestle_root , collection_type ) plan = Plan () reset_destination_action = CreatePathAction ( destination_model_path , clear_content = True ) wrapper_alias = destination_model_alias write_destination_action = WriteFileAction ( destination_model_path , Element ( merged_model_instance , wrapper_alias ), content_type = file_type ) remove_path_folder = effective_cwd / destination_model_alias delete_target_action = RemovePathAction ( remove_path_folder ) plan : Plan = Plan () plan . add_action ( reset_destination_action ) plan . add_action ( write_destination_action ) plan . add_action ( delete_target_action ) return plan logger . debug ( f 'get dest model with fields stripped: { target_model_alias } ' ) # Get destination model without the target field stripped merged_model_type , _ = fs . get_stripped_model_type ( destination_model_path , trestle_root , aliases_not_to_be_stripped = [ target_model_alias ]) \"\"\"3. Load Target model. Target model could be stripped\"\"\" try : target_model_type = element_path . get_type ( merged_model_type ) except Exception as e : logger . debug ( f 'target model not found, element path list { element_path } type { merged_model_type } ' ) raise TrestleError ( f 'Target model not found. Possibly merge of the elements not allowed at this point. { str ( e ) } ' ) target_model_path = effective_cwd / destination_model_alias logger . debug ( f 'look for target model path { target_model_path } at dest alias { destination_model_alias } rel to cwd' ) # target_model filename - depends whether destination model is decomposed or not if target_model_path . exists (): logger . debug ( f 'target model path does exist so target path is subdir with target alias { target_model_alias } ' ) target_model_path = target_model_path / target_model_alias else : logger . debug ( f 'target model filename does not exist so target path is target alias { target_model_alias } ' ) target_model_path = target_model_path / target_model_alias # FIXME this is same as above logger . debug ( f 'final target model path is { target_model_path } ' ) # if target model is a file then handle file. If file doesn't exist, handle the directory, # but in this case it's a list or a dict collection type target_model_filename = target_model_path . with_suffix ( file_ext ) if target_model_filename . exists (): logger . debug ( f 'target model path with extension does exist so load distrib { target_model_filename } ' ) _ , _ , target_model_object = load_distributed . load_distributed ( target_model_filename , trestle_root ) else : target_model_filename = Path ( target_model_path ) logger . debug ( f 'target model path plus extension does not exist so load distrib { target_model_filename } ' ) logger . debug ( f 'get collection type for model type { target_model_type } ' ) collection_type = utils . get_origin ( target_model_type ) logger . debug ( f 'load { target_model_filename } as collection type { collection_type } ' ) _ , _ , target_model_object = load_distributed . load_distributed ( target_model_filename , trestle_root , collection_type ) if hasattr ( target_model_object , '__dict__' ) and '__root__' in target_model_object . __dict__ : logger . debug ( 'loaded object has dict and root so set target model object to root contents' ) target_model_object = target_model_object . __dict__ [ '__root__' ] \"\"\"4. Insert target model into destination model.\"\"\" merged_dict = {} if destination_model_object is not None : merged_dict = destination_model_object . __dict__ merged_dict [ target_model_alias ] = target_model_object merged_model_object = merged_model_type ( ** merged_dict ) # type: ignore merged_destination_element = Element ( merged_model_object ) \"\"\"5. Create action plan\"\"\" logger . debug ( f 'create path action clear content: { destination_model_path } ' ) reset_destination_action = CreatePathAction ( destination_model_path , clear_content = True ) logger . debug ( f 'write file action { destination_model_path } ' ) write_destination_action = WriteFileAction ( destination_model_path , merged_destination_element , content_type = file_type ) # FIXME this will delete metadata.json but it will leave metadata/roles/roles.* # need to clean up all lower dirs logger . debug ( f 'remove path action { target_model_filename } ' ) delete_target_action = RemovePathAction ( target_model_filename ) plan : Plan = Plan () plan . add_action ( reset_destination_action ) plan . add_action ( write_destination_action ) plan . add_action ( delete_target_action ) # TODO: Destination model directory is empty or already merged? Then clean up. return plan perform_all_merges ( element_paths , effective_cwd , trestle_root ) classmethod \u00a4 Run all merges over a list of element paths. Source code in trestle/core/commands/merge.py @classmethod def perform_all_merges ( cls , element_paths : List [ str ], effective_cwd : Path , trestle_root : Path ) -> int : \"\"\"Run all merges over a list of element paths.\"\"\" try : for element_path in element_paths : logger . debug ( f 'merge { element_path } ' ) plan = cls . merge ( effective_cwd , ElementPath ( element_path ), trestle_root ) plan . simulate () plan . execute () except TrestleError as err : logger . error ( f 'Merge failed: { err } ' ) return 1 return 0 handler: python","title":"merge"},{"location":"api_reference/trestle.core.commands.merge/#trestle.core.commands.merge","text":"Trestle Merge Command.","title":"merge"},{"location":"api_reference/trestle.core.commands.merge/#trestle.core.commands.merge.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.merge/#trestle.core.commands.merge-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.merge/#trestle.core.commands.merge.MergeCmd","text":"Merge subcomponents on a trestle model.","title":"MergeCmd"},{"location":"api_reference/trestle.core.commands.merge/#trestle.core.commands.merge.MergeCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.merge/#trestle.core.commands.merge.MergeCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.merge/#trestle.core.commands.merge.MergeCmd.merge","text":"Merge operations. It returns a plan for the operation Source code in trestle/core/commands/merge.py @classmethod def merge ( cls , effective_cwd : Path , element_path : ElementPath , trestle_root : Path ) -> Plan : \"\"\"Merge operations. It returns a plan for the operation \"\"\" if not element_path . is_multipart (): msg = 'Multiple parts of an element path must be passed to merge e.g. catalog.* or catalog.groups' logger . error ( msg ) raise TrestleError ( msg ) target_model_alias = element_path . get_last () logger . debug ( f 'merge element path list: { element_path } target model alias { target_model_alias } ' ) \"\"\"1. Load desination model into a stripped model\"\"\" # Load destination model destination_path = element_path . get_preceding_path () destination_model_alias = destination_path . get_last () # Destination model filetype try : logger . debug ( f 'merge destination model alias: { destination_model_alias } ' ) logger . debug ( 'merge getting contextual file type effective working directory' ) file_type = fs . get_contextual_file_type ( effective_cwd ) logger . debug ( f 'contextual file type is { file_type } ' ) except Exception as e : raise TrestleError ( str ( e )) file_ext = FileContentType . to_file_extension ( file_type ) # Destination model filename destination_model_path = ( effective_cwd / f ' { utils . classname_to_alias ( destination_model_alias , \"json\" ) }{ file_ext } ' ) logger . debug ( f 'destination model filename is { destination_model_path } ' ) destination_model_type , _ = fs . get_stripped_model_type ( destination_model_path , trestle_root ) destination_model_object : OscalBaseModel = None if destination_model_path . exists (): logger . debug ( 'dest filename exists so read it' ) destination_model_object = destination_model_type . oscal_read ( destination_model_path ) \"\"\"2. If target is wildcard, load distributed destination model and replace destination model.\"\"\" # Handle WILDCARD '*' match. Return plan to load the destination model, with its distributed attributes if target_model_alias == '*' : logger . debug ( 'handle target model alias wildcard' ) collection_type = None if destination_model_type . is_collection_container (): collection_type = destination_model_type . get_collection_type () merged_model_type , _ , merged_model_instance = load_distributed . load_distributed ( destination_model_path , trestle_root , collection_type ) plan = Plan () reset_destination_action = CreatePathAction ( destination_model_path , clear_content = True ) wrapper_alias = destination_model_alias write_destination_action = WriteFileAction ( destination_model_path , Element ( merged_model_instance , wrapper_alias ), content_type = file_type ) remove_path_folder = effective_cwd / destination_model_alias delete_target_action = RemovePathAction ( remove_path_folder ) plan : Plan = Plan () plan . add_action ( reset_destination_action ) plan . add_action ( write_destination_action ) plan . add_action ( delete_target_action ) return plan logger . debug ( f 'get dest model with fields stripped: { target_model_alias } ' ) # Get destination model without the target field stripped merged_model_type , _ = fs . get_stripped_model_type ( destination_model_path , trestle_root , aliases_not_to_be_stripped = [ target_model_alias ]) \"\"\"3. Load Target model. Target model could be stripped\"\"\" try : target_model_type = element_path . get_type ( merged_model_type ) except Exception as e : logger . debug ( f 'target model not found, element path list { element_path } type { merged_model_type } ' ) raise TrestleError ( f 'Target model not found. Possibly merge of the elements not allowed at this point. { str ( e ) } ' ) target_model_path = effective_cwd / destination_model_alias logger . debug ( f 'look for target model path { target_model_path } at dest alias { destination_model_alias } rel to cwd' ) # target_model filename - depends whether destination model is decomposed or not if target_model_path . exists (): logger . debug ( f 'target model path does exist so target path is subdir with target alias { target_model_alias } ' ) target_model_path = target_model_path / target_model_alias else : logger . debug ( f 'target model filename does not exist so target path is target alias { target_model_alias } ' ) target_model_path = target_model_path / target_model_alias # FIXME this is same as above logger . debug ( f 'final target model path is { target_model_path } ' ) # if target model is a file then handle file. If file doesn't exist, handle the directory, # but in this case it's a list or a dict collection type target_model_filename = target_model_path . with_suffix ( file_ext ) if target_model_filename . exists (): logger . debug ( f 'target model path with extension does exist so load distrib { target_model_filename } ' ) _ , _ , target_model_object = load_distributed . load_distributed ( target_model_filename , trestle_root ) else : target_model_filename = Path ( target_model_path ) logger . debug ( f 'target model path plus extension does not exist so load distrib { target_model_filename } ' ) logger . debug ( f 'get collection type for model type { target_model_type } ' ) collection_type = utils . get_origin ( target_model_type ) logger . debug ( f 'load { target_model_filename } as collection type { collection_type } ' ) _ , _ , target_model_object = load_distributed . load_distributed ( target_model_filename , trestle_root , collection_type ) if hasattr ( target_model_object , '__dict__' ) and '__root__' in target_model_object . __dict__ : logger . debug ( 'loaded object has dict and root so set target model object to root contents' ) target_model_object = target_model_object . __dict__ [ '__root__' ] \"\"\"4. Insert target model into destination model.\"\"\" merged_dict = {} if destination_model_object is not None : merged_dict = destination_model_object . __dict__ merged_dict [ target_model_alias ] = target_model_object merged_model_object = merged_model_type ( ** merged_dict ) # type: ignore merged_destination_element = Element ( merged_model_object ) \"\"\"5. Create action plan\"\"\" logger . debug ( f 'create path action clear content: { destination_model_path } ' ) reset_destination_action = CreatePathAction ( destination_model_path , clear_content = True ) logger . debug ( f 'write file action { destination_model_path } ' ) write_destination_action = WriteFileAction ( destination_model_path , merged_destination_element , content_type = file_type ) # FIXME this will delete metadata.json but it will leave metadata/roles/roles.* # need to clean up all lower dirs logger . debug ( f 'remove path action { target_model_filename } ' ) delete_target_action = RemovePathAction ( target_model_filename ) plan : Plan = Plan () plan . add_action ( reset_destination_action ) plan . add_action ( write_destination_action ) plan . add_action ( delete_target_action ) # TODO: Destination model directory is empty or already merged? Then clean up. return plan","title":"merge()"},{"location":"api_reference/trestle.core.commands.merge/#trestle.core.commands.merge.MergeCmd.perform_all_merges","text":"Run all merges over a list of element paths. Source code in trestle/core/commands/merge.py @classmethod def perform_all_merges ( cls , element_paths : List [ str ], effective_cwd : Path , trestle_root : Path ) -> int : \"\"\"Run all merges over a list of element paths.\"\"\" try : for element_path in element_paths : logger . debug ( f 'merge { element_path } ' ) plan = cls . merge ( effective_cwd , ElementPath ( element_path ), trestle_root ) plan . simulate () plan . execute () except TrestleError as err : logger . error ( f 'Merge failed: { err } ' ) return 1 return 0 handler: python","title":"perform_all_merges()"},{"location":"api_reference/trestle.core.commands.partial_object_validate/","text":"trestle.core.commands.partial_object_validate \u00a4 Trestle schema-validate command. logger \u00a4 Classes \u00a4 PartialObjectValidate ( CommandPlusDocs ) \u00a4 Direct validation any oscal object in a file, including list objects. name \u00a4 Methods \u00a4 partial_object_validate ( file_path , element_string ) classmethod \u00a4 Run a schema validation on a file inferring file type based on element string. Source code in trestle/core/commands/partial_object_validate.py @classmethod def partial_object_validate ( cls , file_path : pathlib . Path , element_string : str ) -> int : \"\"\"Run a schema validation on a file inferring file type based on element string.\"\"\" # get model type logger . info ( f 'Validating { file_path } ' ) try : element_path = elements . ElementPath ( element_string ) # get a wrapped object obm_type = element_path . get_obm_wrapped_type () except Exception : logger . error ( 'Invalid element type. Please see documentation on element type.' ) return 1 try : obm_type . oscal_read ( file_path ) except Exception as e : logger . error ( 'Failure reading partial OSCAL file' ) logger . error ( str ( e )) return 1 logger . info ( f 'VALID: { file_path } for { element_string } ' ) return 0 handler: python","title":"partial_object_validate"},{"location":"api_reference/trestle.core.commands.partial_object_validate/#trestle.core.commands.partial_object_validate","text":"Trestle schema-validate command.","title":"partial_object_validate"},{"location":"api_reference/trestle.core.commands.partial_object_validate/#trestle.core.commands.partial_object_validate.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.partial_object_validate/#trestle.core.commands.partial_object_validate-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.partial_object_validate/#trestle.core.commands.partial_object_validate.PartialObjectValidate","text":"Direct validation any oscal object in a file, including list objects.","title":"PartialObjectValidate"},{"location":"api_reference/trestle.core.commands.partial_object_validate/#trestle.core.commands.partial_object_validate.PartialObjectValidate.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.partial_object_validate/#trestle.core.commands.partial_object_validate.PartialObjectValidate-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.partial_object_validate/#trestle.core.commands.partial_object_validate.PartialObjectValidate.partial_object_validate","text":"Run a schema validation on a file inferring file type based on element string. Source code in trestle/core/commands/partial_object_validate.py @classmethod def partial_object_validate ( cls , file_path : pathlib . Path , element_string : str ) -> int : \"\"\"Run a schema validation on a file inferring file type based on element string.\"\"\" # get model type logger . info ( f 'Validating { file_path } ' ) try : element_path = elements . ElementPath ( element_string ) # get a wrapped object obm_type = element_path . get_obm_wrapped_type () except Exception : logger . error ( 'Invalid element type. Please see documentation on element type.' ) return 1 try : obm_type . oscal_read ( file_path ) except Exception as e : logger . error ( 'Failure reading partial OSCAL file' ) logger . error ( str ( e )) return 1 logger . info ( f 'VALID: { file_path } for { element_string } ' ) return 0 handler: python","title":"partial_object_validate()"},{"location":"api_reference/trestle.core.commands.remove/","text":"trestle.core.commands.remove \u00a4 Trestle Remove Command. logger \u00a4 Classes \u00a4 RemoveCmd ( CommandPlusDocs ) \u00a4 Remove a subcomponent to an existing model. name \u00a4 Methods \u00a4 remove ( element_path , parent_model , parent_element ) classmethod \u00a4 For the element_path, remove a model from the parent_element of a given parent_model. First we check if there is an existing element at that path If not, we complain. Then we set up an action plan to update the model (specified by file_path) in memory, return the action and return the parent_element. LIMITATIONS: 1. This does not remove elements of a list or dict. Instead, the entire list or dict is removed. 2. This cannot remove arbitrarily named elements that are not specified in the schema. For example, \"responsible-parties\" contains named elements, e.g., \"organisation\". The tool will not remove the \"organisation\" as it is not in the schema, but one can remove its elements, e.g., \"party-uuids\". Source code in trestle/core/commands/remove.py @classmethod def remove ( cls , element_path : ElementPath , parent_model : Type [ OscalBaseModel ], parent_element : Element ) -> Tuple [ RemoveAction , Element ]: \"\"\"For the element_path, remove a model from the parent_element of a given parent_model. First we check if there is an existing element at that path If not, we complain. Then we set up an action plan to update the model (specified by file_path) in memory, return the action and return the parent_element. LIMITATIONS: 1. This does not remove elements of a list or dict. Instead, the entire list or dict is removed. 2. This cannot remove arbitrarily named elements that are not specified in the schema. For example, \"responsible-parties\" contains named elements, e.g., \"organisation\". The tool will not remove the \"organisation\" as it is not in the schema, but one can remove its elements, e.g., \"party-uuids\". \"\"\" element_path_list = element_path . get_full_path_parts () if '*' in element_path_list : raise err . TrestleError ( 'trestle remove does not support Wildcard element path.' ) deleting_element = parent_element . get_at ( element_path ) if deleting_element is not None : # The element already exists if type ( deleting_element ) is list : logger . warning ( 'Warning: trestle remove does not support removing elements of a list: ' 'this removes the entire list' ) elif type ( deleting_element ) is dict : logger . warning ( 'Warning: trestle remove does not support removing dict elements: ' 'this removes the entire dict element' ) else : raise err . TrestleError ( f 'Bad element path: { str ( element_path ) } ' ) remove_action = RemoveAction ( parent_element , element_path ) return remove_action , parent_element handler: python","title":"remove"},{"location":"api_reference/trestle.core.commands.remove/#trestle.core.commands.remove","text":"Trestle Remove Command.","title":"remove"},{"location":"api_reference/trestle.core.commands.remove/#trestle.core.commands.remove.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.remove/#trestle.core.commands.remove-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.remove/#trestle.core.commands.remove.RemoveCmd","text":"Remove a subcomponent to an existing model.","title":"RemoveCmd"},{"location":"api_reference/trestle.core.commands.remove/#trestle.core.commands.remove.RemoveCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.remove/#trestle.core.commands.remove.RemoveCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.remove/#trestle.core.commands.remove.RemoveCmd.remove","text":"For the element_path, remove a model from the parent_element of a given parent_model. First we check if there is an existing element at that path If not, we complain. Then we set up an action plan to update the model (specified by file_path) in memory, return the action and return the parent_element. LIMITATIONS: 1. This does not remove elements of a list or dict. Instead, the entire list or dict is removed. 2. This cannot remove arbitrarily named elements that are not specified in the schema. For example, \"responsible-parties\" contains named elements, e.g., \"organisation\". The tool will not remove the \"organisation\" as it is not in the schema, but one can remove its elements, e.g., \"party-uuids\". Source code in trestle/core/commands/remove.py @classmethod def remove ( cls , element_path : ElementPath , parent_model : Type [ OscalBaseModel ], parent_element : Element ) -> Tuple [ RemoveAction , Element ]: \"\"\"For the element_path, remove a model from the parent_element of a given parent_model. First we check if there is an existing element at that path If not, we complain. Then we set up an action plan to update the model (specified by file_path) in memory, return the action and return the parent_element. LIMITATIONS: 1. This does not remove elements of a list or dict. Instead, the entire list or dict is removed. 2. This cannot remove arbitrarily named elements that are not specified in the schema. For example, \"responsible-parties\" contains named elements, e.g., \"organisation\". The tool will not remove the \"organisation\" as it is not in the schema, but one can remove its elements, e.g., \"party-uuids\". \"\"\" element_path_list = element_path . get_full_path_parts () if '*' in element_path_list : raise err . TrestleError ( 'trestle remove does not support Wildcard element path.' ) deleting_element = parent_element . get_at ( element_path ) if deleting_element is not None : # The element already exists if type ( deleting_element ) is list : logger . warning ( 'Warning: trestle remove does not support removing elements of a list: ' 'this removes the entire list' ) elif type ( deleting_element ) is dict : logger . warning ( 'Warning: trestle remove does not support removing dict elements: ' 'this removes the entire dict element' ) else : raise err . TrestleError ( f 'Bad element path: { str ( element_path ) } ' ) remove_action = RemoveAction ( parent_element , element_path ) return remove_action , parent_element handler: python","title":"remove()"},{"location":"api_reference/trestle.core.commands.replicate/","text":"trestle.core.commands.replicate \u00a4 Trestle Replicate Command. logger \u00a4 Classes \u00a4 AssessmentPlanCmd ( CommandPlusDocs ) \u00a4 Replicate an assessment plan within the trestle directory structure. name \u00a4 AssessmentResultCmd ( CommandPlusDocs ) \u00a4 Replicate an assessment result within the trestle directory structure. name \u00a4 CatalogCmd ( CommandPlusDocs ) \u00a4 Replicate a catalog within the trestle directory structure. name \u00a4 ComponentDefinitionCmd ( CommandPlusDocs ) \u00a4 Replicate a component definition within the trestle directory structure. name \u00a4 PlanOfActionAndMilestonesCmd ( CommandPlusDocs ) \u00a4 Replicate a plan of action and milestones within the trestle directory structure. name \u00a4 ProfileCmd ( CommandPlusDocs ) \u00a4 Replicate a profile within the trestle directory structure. name \u00a4 ReplicateCmd ( CommandPlusDocs ) \u00a4 Replicate a top level model within the trestle directory structure. name \u00a4 subcommands \u00a4 Methods \u00a4 replicate_object ( model_alias , object_type , args ) classmethod \u00a4 Core replicate routine invoked by subcommands. Parameters: Name Type Description Default model_alias str Name of the top level model in the trestle directory. required object_type Type[~TopLevelOscalModel] Type of object as trestle model required Returns: Type Description int A return code that can be used as standard posix codes. 0 is success. Source code in trestle/core/commands/replicate.py @classmethod def replicate_object ( cls , model_alias : str , object_type : Type [ TopLevelOscalModel ], args : argparse . Namespace ) -> int : \"\"\" Core replicate routine invoked by subcommands. Args: model_alias: Name of the top level model in the trestle directory. object_type: Type of object as trestle model Returns: A return code that can be used as standard posix codes. 0 is success. \"\"\" log . set_log_level_from_args ( args ) logger . debug ( 'Entering replicate_object.' ) # 1 Bad working directory if not running from current working directory trestle_root = args . trestle_root # trestle root is set via command line in args. Default is cwd. if not trestle_root or not fs . is_valid_project_root ( trestle_root ): logger . error ( f 'Given directory: { trestle_root } is not a trestle project.' ) return 1 plural_path = fs . model_type_to_model_dir ( model_alias ) # 2 Check that input file given exists. input_file_stem = trestle_root / plural_path / args . name / model_alias content_type = FileContentType . path_to_content_type ( input_file_stem ) if content_type == FileContentType . UNKNOWN : logger . error ( f 'Input file { args . name } has no json or yaml file at expected location { input_file_stem } .' ) return 1 input_file = input_file_stem . with_suffix ( FileContentType . to_file_extension ( content_type )) # 3 Distributed load from file try : model_type , model_alias , model_instance = load_distributed ( input_file , trestle_root ) except TrestleError as err : logger . debug ( f 'load_distributed() failed: { err } ' ) logger . warning ( f 'Replicate failed, error loading file: { err } ' ) return 1 except PermissionError as err : logger . debug ( f 'load_distributed() failed: { err } ' ) logger . warning ( f 'Replicate failed, access permission error loading file: { err } ' ) return 1 rep_model_path = trestle_root / plural_path / args . output / ( model_alias + FileContentType . to_file_extension ( content_type ) ) if rep_model_path . exists (): logger . error ( f 'OSCAL file to be replicated here: { rep_model_path } exists.' ) logger . error ( 'Aborting trestle replicate.' ) return 1 if args . regenerate : logger . debug ( f 'regenerating uuids for model { input_file } ' ) model_instance , uuid_lut , n_refs_updated = validator_helper . regenerate_uuids ( model_instance ) logger . debug ( f ' { len ( uuid_lut ) } uuids generated and { n_refs_updated } references updated' ) # 4 Prepare actions and plan top_element = Element ( model_instance ) create_action = CreatePathAction ( rep_model_path , True ) write_action = WriteFileAction ( rep_model_path , top_element , content_type ) # create a plan to create the directory and imported file. replicate_plan = Plan () replicate_plan . add_action ( create_action ) replicate_plan . add_action ( write_action ) try : replicate_plan . simulate () except TrestleError as err : logger . debug ( f 'replicate_plan.simulate() failed: { err } ' ) logger . error ( f 'Replicate failed, error in simulating replicate operation: { err } ' ) return 1 try : replicate_plan . execute () except TrestleError as err : logger . debug ( f 'replicate_plan.execute() failed: { err } ' ) logger . error ( f 'Replicate failed, error in executing replication operation: { err } ' ) return 1 return 0 SystemSecurityPlanCmd ( CommandPlusDocs ) \u00a4 Replicate a system security plan within the trestle directory structure. name \u00a4 handler: python","title":"replicate"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate","text":"Trestle Replicate Command.","title":"replicate"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.AssessmentPlanCmd","text":"Replicate an assessment plan within the trestle directory structure.","title":"AssessmentPlanCmd"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.AssessmentPlanCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.AssessmentResultCmd","text":"Replicate an assessment result within the trestle directory structure.","title":"AssessmentResultCmd"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.AssessmentResultCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.CatalogCmd","text":"Replicate a catalog within the trestle directory structure.","title":"CatalogCmd"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.CatalogCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ComponentDefinitionCmd","text":"Replicate a component definition within the trestle directory structure.","title":"ComponentDefinitionCmd"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ComponentDefinitionCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.PlanOfActionAndMilestonesCmd","text":"Replicate a plan of action and milestones within the trestle directory structure.","title":"PlanOfActionAndMilestonesCmd"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.PlanOfActionAndMilestonesCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ProfileCmd","text":"Replicate a profile within the trestle directory structure.","title":"ProfileCmd"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ProfileCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ReplicateCmd","text":"Replicate a top level model within the trestle directory structure.","title":"ReplicateCmd"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ReplicateCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ReplicateCmd.subcommands","text":"","title":"subcommands"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ReplicateCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.ReplicateCmd.replicate_object","text":"Core replicate routine invoked by subcommands. Parameters: Name Type Description Default model_alias str Name of the top level model in the trestle directory. required object_type Type[~TopLevelOscalModel] Type of object as trestle model required Returns: Type Description int A return code that can be used as standard posix codes. 0 is success. Source code in trestle/core/commands/replicate.py @classmethod def replicate_object ( cls , model_alias : str , object_type : Type [ TopLevelOscalModel ], args : argparse . Namespace ) -> int : \"\"\" Core replicate routine invoked by subcommands. Args: model_alias: Name of the top level model in the trestle directory. object_type: Type of object as trestle model Returns: A return code that can be used as standard posix codes. 0 is success. \"\"\" log . set_log_level_from_args ( args ) logger . debug ( 'Entering replicate_object.' ) # 1 Bad working directory if not running from current working directory trestle_root = args . trestle_root # trestle root is set via command line in args. Default is cwd. if not trestle_root or not fs . is_valid_project_root ( trestle_root ): logger . error ( f 'Given directory: { trestle_root } is not a trestle project.' ) return 1 plural_path = fs . model_type_to_model_dir ( model_alias ) # 2 Check that input file given exists. input_file_stem = trestle_root / plural_path / args . name / model_alias content_type = FileContentType . path_to_content_type ( input_file_stem ) if content_type == FileContentType . UNKNOWN : logger . error ( f 'Input file { args . name } has no json or yaml file at expected location { input_file_stem } .' ) return 1 input_file = input_file_stem . with_suffix ( FileContentType . to_file_extension ( content_type )) # 3 Distributed load from file try : model_type , model_alias , model_instance = load_distributed ( input_file , trestle_root ) except TrestleError as err : logger . debug ( f 'load_distributed() failed: { err } ' ) logger . warning ( f 'Replicate failed, error loading file: { err } ' ) return 1 except PermissionError as err : logger . debug ( f 'load_distributed() failed: { err } ' ) logger . warning ( f 'Replicate failed, access permission error loading file: { err } ' ) return 1 rep_model_path = trestle_root / plural_path / args . output / ( model_alias + FileContentType . to_file_extension ( content_type ) ) if rep_model_path . exists (): logger . error ( f 'OSCAL file to be replicated here: { rep_model_path } exists.' ) logger . error ( 'Aborting trestle replicate.' ) return 1 if args . regenerate : logger . debug ( f 'regenerating uuids for model { input_file } ' ) model_instance , uuid_lut , n_refs_updated = validator_helper . regenerate_uuids ( model_instance ) logger . debug ( f ' { len ( uuid_lut ) } uuids generated and { n_refs_updated } references updated' ) # 4 Prepare actions and plan top_element = Element ( model_instance ) create_action = CreatePathAction ( rep_model_path , True ) write_action = WriteFileAction ( rep_model_path , top_element , content_type ) # create a plan to create the directory and imported file. replicate_plan = Plan () replicate_plan . add_action ( create_action ) replicate_plan . add_action ( write_action ) try : replicate_plan . simulate () except TrestleError as err : logger . debug ( f 'replicate_plan.simulate() failed: { err } ' ) logger . error ( f 'Replicate failed, error in simulating replicate operation: { err } ' ) return 1 try : replicate_plan . execute () except TrestleError as err : logger . debug ( f 'replicate_plan.execute() failed: { err } ' ) logger . error ( f 'Replicate failed, error in executing replication operation: { err } ' ) return 1 return 0","title":"replicate_object()"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.SystemSecurityPlanCmd","text":"Replicate a system security plan within the trestle directory structure.","title":"SystemSecurityPlanCmd"},{"location":"api_reference/trestle.core.commands.replicate/#trestle.core.commands.replicate.SystemSecurityPlanCmd.name","text":"handler: python","title":"name"},{"location":"api_reference/trestle.core.commands.split/","text":"trestle.core.commands.split \u00a4 Trestle Split Command. logger \u00a4 Classes \u00a4 AliasTracker ( BaseModel ) pydantic-model \u00a4 Convenience class to track writing out of models. aliases : List [ str ] pydantic-field required \u00a4 written : bool pydantic-field \u00a4 Methods \u00a4 add_alias ( self , alias ) \u00a4 Add alias. Source code in trestle/core/commands/split.py def add_alias ( self , alias : str ) -> None : \"\"\"Add alias.\"\"\" if alias not in self . aliases : self . aliases . append ( alias ) get_aliases ( self ) \u00a4 Get the list of aliases. Source code in trestle/core/commands/split.py def get_aliases ( self ) -> List [ str ]: \"\"\"Get the list of aliases.\"\"\" return self . aliases mark_written ( self ) \u00a4 Mark this model as written. Source code in trestle/core/commands/split.py def mark_written ( self ) -> None : \"\"\"Mark this model as written.\"\"\" self . written = True needs_writing ( self ) \u00a4 Need to write the model. Source code in trestle/core/commands/split.py def needs_writing ( self ) -> bool : \"\"\"Need to write the model.\"\"\" return not self . written SplitCmd ( CommandPlusDocs ) \u00a4 Split subcomponents on a trestle model. name \u00a4 Methods \u00a4 find_aliases_to_strip ( element_paths ) classmethod \u00a4 Find list of aliases that need to be stripped as each element written out. Source code in trestle/core/commands/split.py @classmethod def find_aliases_to_strip ( cls , element_paths : List [ ElementPath ]) -> Dict [ str , AliasTracker ]: \"\"\"Find list of aliases that need to be stripped as each element written out.\"\"\" # A given path may be present in several split actions # Need to determine all parts stripped at each node in order to strip them all and # write the stripped model only once tracker_map : Dict [ str , AliasTracker ] = {} for element_path in element_paths : path = element_path . get_full () path_parts = path . split ( '.' ) alias = path_parts [ - 1 ] if len ( path_parts ) > 2 and alias != '*' : root_path = '.' . join ( path_parts [: - 1 ]) if root_path in tracker_map : tracker_map [ root_path ] . add_alias ( alias ) else : tracker_map [ root_path ] = AliasTracker ( aliases = [ alias ]) return tracker_map perform_split ( effective_cwd , file_name , elements , trestle_root ) classmethod \u00a4 Perform the split operation. Parameters: Name Type Description Default effective_cwd Path effective directory in which the the split operation is performed required file_name str file name of model to split, or '' if deduced from elements and cwd required elements str comma separated list of paths to strip from the file, with quotes removed required Returns: Type Description int 0 on success and 1 on failure Source code in trestle/core/commands/split.py @classmethod def perform_split ( cls , effective_cwd : pathlib . Path , file_name : str , elements : str , trestle_root : pathlib . Path ) -> int : \"\"\"Perform the split operation. Args: effective_cwd: effective directory in which the the split operation is performed file_name: file name of model to split, or '' if deduced from elements and cwd elements: comma separated list of paths to strip from the file, with quotes removed Returns: 0 on success and 1 on failure \"\"\" file_path_list : List [ Tuple [ str , str ]] = [] if file_name : file_path_list . append (( file_name , elements )) else : # cwd must be in the model directory if file to split is not specified # find top directory for this model based on trestle root and cwd model_dir = fs . get_project_model_path ( effective_cwd ) if model_dir is None : logger . warning ( 'Current directory must be within a model directory if file is not specified' ) return 1 content_type : FileContentType = FileContentType . dir_to_content_type ( model_dir ) # determine the file needed for each split path element_paths = elements . split ( ',' ) for path in element_paths : element_path = ElementPath ( path ) # if element path is relative use directory context to determine absolute path element_path . make_absolute ( model_dir , effective_cwd ) file_path = element_path . find_last_file_in_path ( content_type , model_dir ) # now make the element path relative to the model file to be loaded if file_path is None or element_path . make_relative ( file_path . relative_to ( model_dir )) != 0 : logger . warning ( f 'Unable to match element path with files in model directory { element_path } ' ) return 1 file_path_list . append (( file_path , element_path . to_string ())) # match paths to corresponding files since several paths may be split from the same file file_path_dict : Dict [ str , str ] = {} for file_path in file_path_list : key = file_path [ 0 ] path = file_path [ 1 ] if key not in file_path_dict : file_path_dict [ key ] = path else : current_path = file_path_dict [ key ] file_path_dict [ key ] = f ' { current_path } , { path } ' for raw_file_name , element_path in file_path_dict . items (): file_path = fs . relative_resolve ( pathlib . Path ( raw_file_name ), effective_cwd ) # this makes assumptions that the path is relative. if not file_path . exists (): logger . error ( f 'File { file_path } does not exist.' ) return 1 content_type = FileContentType . to_content_type ( file_path . suffix ) # find the base directory of the file base_dir = file_path . parent model_type , _ = fs . get_stripped_model_type ( file_path , trestle_root ) model : OscalBaseModel = model_type . oscal_read ( file_path ) if cmd_utils . split_is_too_fine ( element_path , model ): logger . warning ( 'Cannot split the model to the level of uuids, strings, etc.' ) return 1 # use the model itself to resolve any wildcards and create list of element paths logger . debug ( f 'split calling parse_element_args on { element_path } ' ) # use contextual mode to parse element_paths : List [ ElementPath ] = cmd_utils . parse_element_args ( model , element_path . split ( ',' ), base_dir . relative_to ( trestle_root ) ) # analyze the split tree and determine which aliases should be stripped from each file aliases_to_strip = cls . find_aliases_to_strip ( element_paths ) # need the file name relative to the base directory file_name_no_path = str ( file_path . name ) split_plan = cls . split_model ( model , element_paths , base_dir , content_type , file_name_no_path , aliases_to_strip ) # Simulate the plan # if it fails, it would throw errors and get out of this command split_plan . simulate () # If we are here then simulation passed # so move the original file to the trash trash . store ( file_path , True ) # execute the plan split_plan . execute () return 0 prepare_sub_model_split_actions ( sub_model_item , sub_model_dir , file_prefix , content_type ) classmethod \u00a4 Create split actions of sub model. Source code in trestle/core/commands/split.py @classmethod def prepare_sub_model_split_actions ( cls , sub_model_item : OscalBaseModel , sub_model_dir : pathlib . Path , file_prefix : str , content_type : FileContentType ) -> List [ Action ]: \"\"\"Create split actions of sub model.\"\"\" actions : List [ Action ] = [] file_name = cmd_utils . to_model_file_name ( sub_model_item , file_prefix , content_type ) model_type = utils . classname_to_alias ( type ( sub_model_item ) . __name__ , 'json' ) sub_model_file = sub_model_dir / file_name actions . append ( CreatePathAction ( sub_model_file )) actions . append ( WriteFileAction ( sub_model_file , Element ( sub_model_item , model_type ), content_type )) return actions split_model ( model_obj , element_paths , base_dir , content_type , root_file_name , aliases_to_strip ) classmethod \u00a4 Split the model at the provided element paths. It returns a plan for the operation Source code in trestle/core/commands/split.py @classmethod def split_model ( cls , model_obj : OscalBaseModel , element_paths : List [ ElementPath ], base_dir : pathlib . Path , content_type : FileContentType , root_file_name : str , aliases_to_strip : Dict [ str , AliasTracker ] ) -> Plan : \"\"\"Split the model at the provided element paths. It returns a plan for the operation \"\"\" # initialize plan split_plan = Plan () # loop through the element path list and update the split_plan stripped_field_alias = [] cur_path_index = 0 while cur_path_index < len ( element_paths ): # extract the sub element name for each of the root path of the path chain element_path = element_paths [ cur_path_index ] if element_path . get_parent () is None and len ( element_path . get ()) > 1 : stripped_part = element_path . get ()[ 1 ] if stripped_part == ElementPath . WILDCARD : stripped_field_alias . append ( '__root__' ) else : if stripped_part not in stripped_field_alias : stripped_field_alias . append ( stripped_part ) # split model at the path chain cur_path_index = cls . split_model_at_path_chain ( model_obj , element_paths , base_dir , content_type , cur_path_index , split_plan , False , root_file_name , aliases_to_strip ) cur_path_index += 1 # strip the root model object and add a WriteAction stripped_root = model_obj . stripped_instance ( stripped_fields_aliases = stripped_field_alias ) # If it's an empty model after stripping the fields, don't create path and don't write if set ( model_obj . __fields__ . keys ()) == set ( stripped_field_alias ): return split_plan if root_file_name != '' : root_file = base_dir / root_file_name else : root_file = base_dir / element_paths [ 0 ] . to_root_path ( content_type ) split_plan . add_action ( CreatePathAction ( root_file , True )) wrapper_alias = utils . classname_to_alias ( stripped_root . __class__ . __name__ , 'json' ) split_plan . add_action ( WriteFileAction ( root_file , Element ( stripped_root , wrapper_alias ), content_type )) return split_plan split_model_at_path_chain ( model_obj , element_paths , base_dir , content_type , cur_path_index , split_plan , strip_root , root_file_name , aliases_to_strip , last_one = True ) classmethod \u00a4 Recursively split the model at the provided chain of element paths. It assumes that a chain of element paths starts at the cur_path_index with the first path ending with a wildcard (*) If the wildcard follows an element that is inherently a list of items, the list of items is extracted. But if the wildcard follows a generic model than members of that model class found in the model will be split off. But only the non-trivial elements are removed, i.e. not str, int, datetime, etc. Parameters: Name Type Description Default model_obj OscalBaseModel The OscalBaseModel to be split required element_paths List[trestle.core.models.elements.ElementPath] The List[ElementPath] of elements to split, including embedded wildcards required base_dir Path pathlib.Path of the file being split required content_type FileContentType json or yaml files required cur_path_index int Index into the list of element paths for the current split operation required split_plan Plan The accumulated plan of actions needed to perform the split required strip_root bool Whether to strip elements from the root object required root_file_name str Filename of root file that gets split into a list of items required aliases_to_strip Dict[str, trestle.core.commands.split.AliasTracker] AliasTracker previously loaded with aliases that need to be split from each element required last_one bool bool indicating last item in array has been split and stripped model can now be written True Returns: Type Description int int representing the index where the chain of the path ends. Examples: For example, element paths could have a list of paths as below for a ComponentDefinition model where the first path is the start of the chain. For each of the sub model described by the first element path (e.g component-defintion.components. ) in the chain, the subsequent paths (e.g component.control-implementations. ) will be applied recursively to retrieve the sub-sub models: [ 'component-definition.component. ', 'component.control-implementations. ' ] for a command like below: trestle split -f component.yaml -e component-definition.components. .control-implementations. Source code in trestle/core/commands/split.py @classmethod def split_model_at_path_chain ( cls , model_obj : OscalBaseModel , element_paths : List [ ElementPath ], base_dir : pathlib . Path , content_type : FileContentType , cur_path_index : int , split_plan : Plan , strip_root : bool , root_file_name : str , aliases_to_strip : Dict [ str , AliasTracker ], last_one : bool = True ) -> int : \"\"\"Recursively split the model at the provided chain of element paths. It assumes that a chain of element paths starts at the cur_path_index with the first path ending with a wildcard (*) If the wildcard follows an element that is inherently a list of items, the list of items is extracted. But if the wildcard follows a generic model than members of that model class found in the model will be split off. But only the non-trivial elements are removed, i.e. not str, int, datetime, etc. Args: model_obj: The OscalBaseModel to be split element_paths: The List[ElementPath] of elements to split, including embedded wildcards base_dir: pathlib.Path of the file being split content_type: json or yaml files cur_path_index: Index into the list of element paths for the current split operation split_plan: The accumulated plan of actions needed to perform the split strip_root: Whether to strip elements from the root object root_file_name: Filename of root file that gets split into a list of items aliases_to_strip: AliasTracker previously loaded with aliases that need to be split from each element last_one: bool indicating last item in array has been split and stripped model can now be written Returns: int representing the index where the chain of the path ends. Examples: For example, element paths could have a list of paths as below for a `ComponentDefinition` model where the first path is the start of the chain. For each of the sub model described by the first element path (e.g component-defintion.components.*) in the chain, the subsequent paths (e.g component.control-implementations.*) will be applied recursively to retrieve the sub-sub models: [ 'component-definition.component.*', 'component.control-implementations.*' ] for a command like below: trestle split -f component.yaml -e component-definition.components.*.control-implementations.* \"\"\" if split_plan is None : raise TrestleError ( 'Split plan must have been initialized' ) if cur_path_index < 0 : raise TrestleError ( 'Current index of the chain of paths cannot be less than 0' ) # if there are no more element_paths, return the current plan if cur_path_index >= len ( element_paths ): return cur_path_index # initialize local variables element = Element ( model_obj ) stripped_field_alias : List [ str ] = [] # get the sub_model specified by the element_path of this round element_path = element_paths [ cur_path_index ] # does the next element_path point back at me is_parent = cur_path_index + 1 < len ( element_paths ) and element_paths [ cur_path_index + 1 ] . get_parent () == element_path # root dir name for sub models dir # 00000__group.json will have the root_dir name as 00000__group for sub models of group # catalog.json will have the root_dir name as catalog root_dir = '' if root_file_name != '' : root_dir = str ( pathlib . Path ( root_file_name ) . with_suffix ( '' )) sub_models = element . get_at ( element_path , False ) # we call sub_models as in plural, but it can be just one # assume cur_path_index is the end of the chain # value of this variable may change during recursive split of the sub-models below path_chain_end = cur_path_index # if wildcard is present in the element_path and the next path in the chain has current path as the parent, # Then deal with case of list, or split of arbitrary oscalbasemodel if is_parent and element_path . get_last () is not ElementPath . WILDCARD : # create dir for all sub model items sub_models_dir = base_dir / element_path . to_root_path () sub_model_plan = Plan () path_chain_end = cls . split_model_at_path_chain ( sub_models , element_paths , sub_models_dir , content_type , cur_path_index + 1 , sub_model_plan , True , '' , aliases_to_strip ) sub_model_actions = sub_model_plan . get_actions () split_plan . add_actions ( sub_model_actions ) elif element_path . get_last () == ElementPath . WILDCARD : # extract sub-models into a dict with appropriate prefix sub_model_items : Dict [ str , OscalBaseModel ] = {} sub_models_dir = base_dir / element_path . to_file_path ( root_dir = root_dir ) if isinstance ( sub_models , list ): for i , sub_model_item in enumerate ( sub_models ): # e.g. `groups/00000_groups/` prefix = str ( i ) . zfill ( const . FILE_DIGIT_PREFIX_LENGTH ) sub_model_items [ prefix ] = sub_model_item # process list sub model items count = 0 for key in sub_model_items : count += 1 prefix = key sub_model_item = sub_model_items [ key ] # recursively split the sub-model if there are more element paths to traverse # e.g. split component.control-implementations.* require_recursive_split = cur_path_index + 1 < len ( element_paths ) and element_paths [ cur_path_index + 1 ] . get_parent () == element_path if require_recursive_split : # prepare individual directory for each sub-model sub_root_file_name = cmd_utils . to_model_file_name ( sub_model_item , prefix , content_type ) sub_model_plan = Plan () last_one : bool = count == len ( sub_model_items ) path_chain_end = cls . split_model_at_path_chain ( sub_model_item , element_paths , sub_models_dir , content_type , cur_path_index + 1 , sub_model_plan , True , sub_root_file_name , aliases_to_strip , last_one ) sub_model_actions = sub_model_plan . get_actions () else : sub_model_actions = cls . prepare_sub_model_split_actions ( sub_model_item , sub_models_dir , prefix , content_type ) split_plan . add_actions ( sub_model_actions ) else : # the chain of path ends at the current index. # so no recursive call. Let's just write the sub model to the file and get out if sub_models is not None : sub_model_file = base_dir / element_path . to_file_path ( content_type , root_dir = root_dir ) split_plan . add_action ( CreatePathAction ( sub_model_file )) split_plan . add_action ( WriteFileAction ( sub_model_file , Element ( sub_models , element_path . get_element_name ()), content_type ) ) # Strip the root model and add a WriteAction for the updated model object in the plan if strip_root : full_path = element_path . get_full () path = '.' . join ( full_path . split ( '.' )[: - 1 ]) aliases = [ element_path . get_element_name ()] need_to_write = True use_alias_dict = aliases_to_strip is not None and path in aliases_to_strip if use_alias_dict : aliases = aliases_to_strip [ path ] . get_aliases () need_to_write = aliases_to_strip [ path ] . needs_writing () stripped_model = model_obj . stripped_instance ( stripped_fields_aliases = aliases ) # can mark it written even if it doesn't need writing since it is empty # but if an array only mark it written if it's the last one if last_one and use_alias_dict : aliases_to_strip [ path ] . mark_written () # If it's an empty model after stripping the fields, don't create path and don't write field_list = [ x for x in model_obj . __fields__ . keys () if model_obj . __fields__ [ x ] is not None ] if set ( field_list ) == set ( stripped_field_alias ): return path_chain_end if need_to_write : if root_file_name != '' : root_file = base_dir / root_file_name else : root_file = base_dir / element_path . to_root_path ( content_type ) split_plan . add_action ( CreatePathAction ( root_file )) wrapper_alias = utils . classname_to_alias ( stripped_model . __class__ . __name__ , 'json' ) split_plan . add_action ( WriteFileAction ( root_file , Element ( stripped_model , wrapper_alias ), content_type )) # return the end of the current path chain return path_chain_end handler: python","title":"split"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split","text":"Trestle Split Command.","title":"split"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.AliasTracker","text":"Convenience class to track writing out of models.","title":"AliasTracker"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.AliasTracker.aliases","text":"","title":"aliases"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.AliasTracker.written","text":"","title":"written"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.AliasTracker-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.AliasTracker.add_alias","text":"Add alias. Source code in trestle/core/commands/split.py def add_alias ( self , alias : str ) -> None : \"\"\"Add alias.\"\"\" if alias not in self . aliases : self . aliases . append ( alias )","title":"add_alias()"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.AliasTracker.get_aliases","text":"Get the list of aliases. Source code in trestle/core/commands/split.py def get_aliases ( self ) -> List [ str ]: \"\"\"Get the list of aliases.\"\"\" return self . aliases","title":"get_aliases()"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.AliasTracker.mark_written","text":"Mark this model as written. Source code in trestle/core/commands/split.py def mark_written ( self ) -> None : \"\"\"Mark this model as written.\"\"\" self . written = True","title":"mark_written()"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.AliasTracker.needs_writing","text":"Need to write the model. Source code in trestle/core/commands/split.py def needs_writing ( self ) -> bool : \"\"\"Need to write the model.\"\"\" return not self . written","title":"needs_writing()"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.SplitCmd","text":"Split subcomponents on a trestle model.","title":"SplitCmd"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.SplitCmd.name","text":"","title":"name"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.SplitCmd-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.SplitCmd.find_aliases_to_strip","text":"Find list of aliases that need to be stripped as each element written out. Source code in trestle/core/commands/split.py @classmethod def find_aliases_to_strip ( cls , element_paths : List [ ElementPath ]) -> Dict [ str , AliasTracker ]: \"\"\"Find list of aliases that need to be stripped as each element written out.\"\"\" # A given path may be present in several split actions # Need to determine all parts stripped at each node in order to strip them all and # write the stripped model only once tracker_map : Dict [ str , AliasTracker ] = {} for element_path in element_paths : path = element_path . get_full () path_parts = path . split ( '.' ) alias = path_parts [ - 1 ] if len ( path_parts ) > 2 and alias != '*' : root_path = '.' . join ( path_parts [: - 1 ]) if root_path in tracker_map : tracker_map [ root_path ] . add_alias ( alias ) else : tracker_map [ root_path ] = AliasTracker ( aliases = [ alias ]) return tracker_map","title":"find_aliases_to_strip()"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.SplitCmd.perform_split","text":"Perform the split operation. Parameters: Name Type Description Default effective_cwd Path effective directory in which the the split operation is performed required file_name str file name of model to split, or '' if deduced from elements and cwd required elements str comma separated list of paths to strip from the file, with quotes removed required Returns: Type Description int 0 on success and 1 on failure Source code in trestle/core/commands/split.py @classmethod def perform_split ( cls , effective_cwd : pathlib . Path , file_name : str , elements : str , trestle_root : pathlib . Path ) -> int : \"\"\"Perform the split operation. Args: effective_cwd: effective directory in which the the split operation is performed file_name: file name of model to split, or '' if deduced from elements and cwd elements: comma separated list of paths to strip from the file, with quotes removed Returns: 0 on success and 1 on failure \"\"\" file_path_list : List [ Tuple [ str , str ]] = [] if file_name : file_path_list . append (( file_name , elements )) else : # cwd must be in the model directory if file to split is not specified # find top directory for this model based on trestle root and cwd model_dir = fs . get_project_model_path ( effective_cwd ) if model_dir is None : logger . warning ( 'Current directory must be within a model directory if file is not specified' ) return 1 content_type : FileContentType = FileContentType . dir_to_content_type ( model_dir ) # determine the file needed for each split path element_paths = elements . split ( ',' ) for path in element_paths : element_path = ElementPath ( path ) # if element path is relative use directory context to determine absolute path element_path . make_absolute ( model_dir , effective_cwd ) file_path = element_path . find_last_file_in_path ( content_type , model_dir ) # now make the element path relative to the model file to be loaded if file_path is None or element_path . make_relative ( file_path . relative_to ( model_dir )) != 0 : logger . warning ( f 'Unable to match element path with files in model directory { element_path } ' ) return 1 file_path_list . append (( file_path , element_path . to_string ())) # match paths to corresponding files since several paths may be split from the same file file_path_dict : Dict [ str , str ] = {} for file_path in file_path_list : key = file_path [ 0 ] path = file_path [ 1 ] if key not in file_path_dict : file_path_dict [ key ] = path else : current_path = file_path_dict [ key ] file_path_dict [ key ] = f ' { current_path } , { path } ' for raw_file_name , element_path in file_path_dict . items (): file_path = fs . relative_resolve ( pathlib . Path ( raw_file_name ), effective_cwd ) # this makes assumptions that the path is relative. if not file_path . exists (): logger . error ( f 'File { file_path } does not exist.' ) return 1 content_type = FileContentType . to_content_type ( file_path . suffix ) # find the base directory of the file base_dir = file_path . parent model_type , _ = fs . get_stripped_model_type ( file_path , trestle_root ) model : OscalBaseModel = model_type . oscal_read ( file_path ) if cmd_utils . split_is_too_fine ( element_path , model ): logger . warning ( 'Cannot split the model to the level of uuids, strings, etc.' ) return 1 # use the model itself to resolve any wildcards and create list of element paths logger . debug ( f 'split calling parse_element_args on { element_path } ' ) # use contextual mode to parse element_paths : List [ ElementPath ] = cmd_utils . parse_element_args ( model , element_path . split ( ',' ), base_dir . relative_to ( trestle_root ) ) # analyze the split tree and determine which aliases should be stripped from each file aliases_to_strip = cls . find_aliases_to_strip ( element_paths ) # need the file name relative to the base directory file_name_no_path = str ( file_path . name ) split_plan = cls . split_model ( model , element_paths , base_dir , content_type , file_name_no_path , aliases_to_strip ) # Simulate the plan # if it fails, it would throw errors and get out of this command split_plan . simulate () # If we are here then simulation passed # so move the original file to the trash trash . store ( file_path , True ) # execute the plan split_plan . execute () return 0","title":"perform_split()"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.SplitCmd.prepare_sub_model_split_actions","text":"Create split actions of sub model. Source code in trestle/core/commands/split.py @classmethod def prepare_sub_model_split_actions ( cls , sub_model_item : OscalBaseModel , sub_model_dir : pathlib . Path , file_prefix : str , content_type : FileContentType ) -> List [ Action ]: \"\"\"Create split actions of sub model.\"\"\" actions : List [ Action ] = [] file_name = cmd_utils . to_model_file_name ( sub_model_item , file_prefix , content_type ) model_type = utils . classname_to_alias ( type ( sub_model_item ) . __name__ , 'json' ) sub_model_file = sub_model_dir / file_name actions . append ( CreatePathAction ( sub_model_file )) actions . append ( WriteFileAction ( sub_model_file , Element ( sub_model_item , model_type ), content_type )) return actions","title":"prepare_sub_model_split_actions()"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.SplitCmd.split_model","text":"Split the model at the provided element paths. It returns a plan for the operation Source code in trestle/core/commands/split.py @classmethod def split_model ( cls , model_obj : OscalBaseModel , element_paths : List [ ElementPath ], base_dir : pathlib . Path , content_type : FileContentType , root_file_name : str , aliases_to_strip : Dict [ str , AliasTracker ] ) -> Plan : \"\"\"Split the model at the provided element paths. It returns a plan for the operation \"\"\" # initialize plan split_plan = Plan () # loop through the element path list and update the split_plan stripped_field_alias = [] cur_path_index = 0 while cur_path_index < len ( element_paths ): # extract the sub element name for each of the root path of the path chain element_path = element_paths [ cur_path_index ] if element_path . get_parent () is None and len ( element_path . get ()) > 1 : stripped_part = element_path . get ()[ 1 ] if stripped_part == ElementPath . WILDCARD : stripped_field_alias . append ( '__root__' ) else : if stripped_part not in stripped_field_alias : stripped_field_alias . append ( stripped_part ) # split model at the path chain cur_path_index = cls . split_model_at_path_chain ( model_obj , element_paths , base_dir , content_type , cur_path_index , split_plan , False , root_file_name , aliases_to_strip ) cur_path_index += 1 # strip the root model object and add a WriteAction stripped_root = model_obj . stripped_instance ( stripped_fields_aliases = stripped_field_alias ) # If it's an empty model after stripping the fields, don't create path and don't write if set ( model_obj . __fields__ . keys ()) == set ( stripped_field_alias ): return split_plan if root_file_name != '' : root_file = base_dir / root_file_name else : root_file = base_dir / element_paths [ 0 ] . to_root_path ( content_type ) split_plan . add_action ( CreatePathAction ( root_file , True )) wrapper_alias = utils . classname_to_alias ( stripped_root . __class__ . __name__ , 'json' ) split_plan . add_action ( WriteFileAction ( root_file , Element ( stripped_root , wrapper_alias ), content_type )) return split_plan","title":"split_model()"},{"location":"api_reference/trestle.core.commands.split/#trestle.core.commands.split.SplitCmd.split_model_at_path_chain","text":"Recursively split the model at the provided chain of element paths. It assumes that a chain of element paths starts at the cur_path_index with the first path ending with a wildcard (*) If the wildcard follows an element that is inherently a list of items, the list of items is extracted. But if the wildcard follows a generic model than members of that model class found in the model will be split off. But only the non-trivial elements are removed, i.e. not str, int, datetime, etc. Parameters: Name Type Description Default model_obj OscalBaseModel The OscalBaseModel to be split required element_paths List[trestle.core.models.elements.ElementPath] The List[ElementPath] of elements to split, including embedded wildcards required base_dir Path pathlib.Path of the file being split required content_type FileContentType json or yaml files required cur_path_index int Index into the list of element paths for the current split operation required split_plan Plan The accumulated plan of actions needed to perform the split required strip_root bool Whether to strip elements from the root object required root_file_name str Filename of root file that gets split into a list of items required aliases_to_strip Dict[str, trestle.core.commands.split.AliasTracker] AliasTracker previously loaded with aliases that need to be split from each element required last_one bool bool indicating last item in array has been split and stripped model can now be written True Returns: Type Description int int representing the index where the chain of the path ends. Examples: For example, element paths could have a list of paths as below for a ComponentDefinition model where the first path is the start of the chain. For each of the sub model described by the first element path (e.g component-defintion.components. ) in the chain, the subsequent paths (e.g component.control-implementations. ) will be applied recursively to retrieve the sub-sub models: [ 'component-definition.component. ', 'component.control-implementations. ' ] for a command like below: trestle split -f component.yaml -e component-definition.components. .control-implementations. Source code in trestle/core/commands/split.py @classmethod def split_model_at_path_chain ( cls , model_obj : OscalBaseModel , element_paths : List [ ElementPath ], base_dir : pathlib . Path , content_type : FileContentType , cur_path_index : int , split_plan : Plan , strip_root : bool , root_file_name : str , aliases_to_strip : Dict [ str , AliasTracker ], last_one : bool = True ) -> int : \"\"\"Recursively split the model at the provided chain of element paths. It assumes that a chain of element paths starts at the cur_path_index with the first path ending with a wildcard (*) If the wildcard follows an element that is inherently a list of items, the list of items is extracted. But if the wildcard follows a generic model than members of that model class found in the model will be split off. But only the non-trivial elements are removed, i.e. not str, int, datetime, etc. Args: model_obj: The OscalBaseModel to be split element_paths: The List[ElementPath] of elements to split, including embedded wildcards base_dir: pathlib.Path of the file being split content_type: json or yaml files cur_path_index: Index into the list of element paths for the current split operation split_plan: The accumulated plan of actions needed to perform the split strip_root: Whether to strip elements from the root object root_file_name: Filename of root file that gets split into a list of items aliases_to_strip: AliasTracker previously loaded with aliases that need to be split from each element last_one: bool indicating last item in array has been split and stripped model can now be written Returns: int representing the index where the chain of the path ends. Examples: For example, element paths could have a list of paths as below for a `ComponentDefinition` model where the first path is the start of the chain. For each of the sub model described by the first element path (e.g component-defintion.components.*) in the chain, the subsequent paths (e.g component.control-implementations.*) will be applied recursively to retrieve the sub-sub models: [ 'component-definition.component.*', 'component.control-implementations.*' ] for a command like below: trestle split -f component.yaml -e component-definition.components.*.control-implementations.* \"\"\" if split_plan is None : raise TrestleError ( 'Split plan must have been initialized' ) if cur_path_index < 0 : raise TrestleError ( 'Current index of the chain of paths cannot be less than 0' ) # if there are no more element_paths, return the current plan if cur_path_index >= len ( element_paths ): return cur_path_index # initialize local variables element = Element ( model_obj ) stripped_field_alias : List [ str ] = [] # get the sub_model specified by the element_path of this round element_path = element_paths [ cur_path_index ] # does the next element_path point back at me is_parent = cur_path_index + 1 < len ( element_paths ) and element_paths [ cur_path_index + 1 ] . get_parent () == element_path # root dir name for sub models dir # 00000__group.json will have the root_dir name as 00000__group for sub models of group # catalog.json will have the root_dir name as catalog root_dir = '' if root_file_name != '' : root_dir = str ( pathlib . Path ( root_file_name ) . with_suffix ( '' )) sub_models = element . get_at ( element_path , False ) # we call sub_models as in plural, but it can be just one # assume cur_path_index is the end of the chain # value of this variable may change during recursive split of the sub-models below path_chain_end = cur_path_index # if wildcard is present in the element_path and the next path in the chain has current path as the parent, # Then deal with case of list, or split of arbitrary oscalbasemodel if is_parent and element_path . get_last () is not ElementPath . WILDCARD : # create dir for all sub model items sub_models_dir = base_dir / element_path . to_root_path () sub_model_plan = Plan () path_chain_end = cls . split_model_at_path_chain ( sub_models , element_paths , sub_models_dir , content_type , cur_path_index + 1 , sub_model_plan , True , '' , aliases_to_strip ) sub_model_actions = sub_model_plan . get_actions () split_plan . add_actions ( sub_model_actions ) elif element_path . get_last () == ElementPath . WILDCARD : # extract sub-models into a dict with appropriate prefix sub_model_items : Dict [ str , OscalBaseModel ] = {} sub_models_dir = base_dir / element_path . to_file_path ( root_dir = root_dir ) if isinstance ( sub_models , list ): for i , sub_model_item in enumerate ( sub_models ): # e.g. `groups/00000_groups/` prefix = str ( i ) . zfill ( const . FILE_DIGIT_PREFIX_LENGTH ) sub_model_items [ prefix ] = sub_model_item # process list sub model items count = 0 for key in sub_model_items : count += 1 prefix = key sub_model_item = sub_model_items [ key ] # recursively split the sub-model if there are more element paths to traverse # e.g. split component.control-implementations.* require_recursive_split = cur_path_index + 1 < len ( element_paths ) and element_paths [ cur_path_index + 1 ] . get_parent () == element_path if require_recursive_split : # prepare individual directory for each sub-model sub_root_file_name = cmd_utils . to_model_file_name ( sub_model_item , prefix , content_type ) sub_model_plan = Plan () last_one : bool = count == len ( sub_model_items ) path_chain_end = cls . split_model_at_path_chain ( sub_model_item , element_paths , sub_models_dir , content_type , cur_path_index + 1 , sub_model_plan , True , sub_root_file_name , aliases_to_strip , last_one ) sub_model_actions = sub_model_plan . get_actions () else : sub_model_actions = cls . prepare_sub_model_split_actions ( sub_model_item , sub_models_dir , prefix , content_type ) split_plan . add_actions ( sub_model_actions ) else : # the chain of path ends at the current index. # so no recursive call. Let's just write the sub model to the file and get out if sub_models is not None : sub_model_file = base_dir / element_path . to_file_path ( content_type , root_dir = root_dir ) split_plan . add_action ( CreatePathAction ( sub_model_file )) split_plan . add_action ( WriteFileAction ( sub_model_file , Element ( sub_models , element_path . get_element_name ()), content_type ) ) # Strip the root model and add a WriteAction for the updated model object in the plan if strip_root : full_path = element_path . get_full () path = '.' . join ( full_path . split ( '.' )[: - 1 ]) aliases = [ element_path . get_element_name ()] need_to_write = True use_alias_dict = aliases_to_strip is not None and path in aliases_to_strip if use_alias_dict : aliases = aliases_to_strip [ path ] . get_aliases () need_to_write = aliases_to_strip [ path ] . needs_writing () stripped_model = model_obj . stripped_instance ( stripped_fields_aliases = aliases ) # can mark it written even if it doesn't need writing since it is empty # but if an array only mark it written if it's the last one if last_one and use_alias_dict : aliases_to_strip [ path ] . mark_written () # If it's an empty model after stripping the fields, don't create path and don't write field_list = [ x for x in model_obj . __fields__ . keys () if model_obj . __fields__ [ x ] is not None ] if set ( field_list ) == set ( stripped_field_alias ): return path_chain_end if need_to_write : if root_file_name != '' : root_file = base_dir / root_file_name else : root_file = base_dir / element_path . to_root_path ( content_type ) split_plan . add_action ( CreatePathAction ( root_file )) wrapper_alias = utils . classname_to_alias ( stripped_model . __class__ . __name__ , 'json' ) split_plan . add_action ( WriteFileAction ( root_file , Element ( stripped_model , wrapper_alias ), content_type )) # return the end of the current path chain return path_chain_end handler: python","title":"split_model_at_path_chain()"},{"location":"api_reference/trestle.core.commands.task/","text":"trestle.core.commands.task \u00a4 Trestle task command. logger \u00a4 Classes \u00a4 TaskCmd ( CommandPlusDocs ) \u00a4 Run arbitrary trestle tasks in a simple and extensible methodology. name \u00a4 handler: python","title":"task"},{"location":"api_reference/trestle.core.commands.task/#trestle.core.commands.task","text":"Trestle task command.","title":"task"},{"location":"api_reference/trestle.core.commands.task/#trestle.core.commands.task.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.task/#trestle.core.commands.task-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.task/#trestle.core.commands.task.TaskCmd","text":"Run arbitrary trestle tasks in a simple and extensible methodology.","title":"TaskCmd"},{"location":"api_reference/trestle.core.commands.task/#trestle.core.commands.task.TaskCmd.name","text":"handler: python","title":"name"},{"location":"api_reference/trestle.core.commands.validate/","text":"trestle.core.commands.validate \u00a4 Trestle Validate Command. logger \u00a4 Classes \u00a4 ValidateCmd ( CommandPlusDocs ) \u00a4 Validate contents of a trestle model in different modes. name \u00a4 handler: python","title":"validate"},{"location":"api_reference/trestle.core.commands.validate/#trestle.core.commands.validate","text":"Trestle Validate Command.","title":"validate"},{"location":"api_reference/trestle.core.commands.validate/#trestle.core.commands.validate.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.validate/#trestle.core.commands.validate-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.validate/#trestle.core.commands.validate.ValidateCmd","text":"Validate contents of a trestle model in different modes.","title":"ValidateCmd"},{"location":"api_reference/trestle.core.commands.validate/#trestle.core.commands.validate.ValidateCmd.name","text":"handler: python","title":"name"},{"location":"api_reference/trestle.core.commands.version/","text":"trestle.core.commands.version \u00a4 Trestle Validate Command. logger \u00a4 Classes \u00a4 VersionCmd ( CommandPlusDocs ) \u00a4 Output version info for trestle and OSCAL. name \u00a4 handler: python","title":"version"},{"location":"api_reference/trestle.core.commands.version/#trestle.core.commands.version","text":"Trestle Validate Command.","title":"version"},{"location":"api_reference/trestle.core.commands.version/#trestle.core.commands.version.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.commands.version/#trestle.core.commands.version-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.commands.version/#trestle.core.commands.version.VersionCmd","text":"Output version info for trestle and OSCAL.","title":"VersionCmd"},{"location":"api_reference/trestle.core.commands.version/#trestle.core.commands.version.VersionCmd.name","text":"handler: python","title":"name"},{"location":"api_reference/trestle.core.common_types/","text":"trestle.core.common_types \u00a4 Special types are defined here. FixedUuidModel \u00a4 TopLevelOscalModel \u00a4 handler: python","title":"common_types"},{"location":"api_reference/trestle.core.common_types/#trestle.core.common_types","text":"Special types are defined here.","title":"common_types"},{"location":"api_reference/trestle.core.common_types/#trestle.core.common_types.FixedUuidModel","text":"","title":"FixedUuidModel"},{"location":"api_reference/trestle.core.common_types/#trestle.core.common_types.TopLevelOscalModel","text":"handler: python","title":"TopLevelOscalModel"},{"location":"api_reference/trestle.core.const/","text":"trestle.core.const \u00a4 Core constants module containing all constants. Attributes \u00a4 ALIAS_PATH_SEPARATOR : str \u00a4 ARG_DESC_ELEMENT \u00a4 ARG_DESC_FILE \u00a4 ARG_DESC_ITEM \u00a4 ARG_DESC_MODE \u00a4 ARG_ELEMENT \u00a4 ARG_ELEMENT_SHORT \u00a4 ARG_FILE \u00a4 ARG_FILE_SHORT \u00a4 ARG_ITEM \u00a4 ARG_ITEM_SHORT \u00a4 ARG_MODE \u00a4 ARG_MODE_SHORT \u00a4 ARG_VALIDATE \u00a4 ARG_VALIDATE_SHORT \u00a4 BUG_REPORT \u00a4 CACHE_ABS_DIR \u00a4 DAY_SECONDS : int \u00a4 ELEMENT_WILDCARD \u00a4 FILE_DIGIT_PREFIX_LENGTH \u00a4 FILE_ENCODING \u00a4 FILE_URI \u00a4 HEADER_L_ESCAPE \u00a4 HEADER_R_ESCAPE \u00a4 HOUR_SECONDS : int \u00a4 HTTPS_URI \u00a4 IDX_SEP \u00a4 IOF_HELP \u00a4 IOF_LONG \u00a4 IOF_SHORT \u00a4 MARKDOWN_URL_REGEX \u00a4 MODEL_DIR_LIST \u00a4 MODEL_DIR_TO_MODEL_MODULE \u00a4 MODEL_TYPE_LIST \u00a4 MODEL_TYPE_TO_MODEL_DIR \u00a4 Element path separator MODEL_TYPE_TO_MODEL_MODULE \u00a4 PACKAGE_OSCAL \u00a4 SAMPLE_UUID_STR \u00a4 SFTP_URI \u00a4 SSP_ADD_IMPLEMENTATION_FOR_CONTROL_TEXT \u00a4 SSP_ADD_IMPLEMENTATION_FOR_STATEMENT_TEXT \u00a4 SSP_ADD_IMPLEMENTATION_PREFIX \u00a4 SSP_MD_HRULE_LINE \u00a4 SSP_MD_IMPLEMENTATION_QUESTION \u00a4 SSP_MD_LEAVE_BLANK_TEXT \u00a4 SSP_SYSTEM_CONTROL_IMPLEMENTATION_TEXT \u00a4 TRESTLE_CACHE_DIR \u00a4 TRESTLE_CONFIG_DIR \u00a4 TRESTLE_CONFIG_FILE \u00a4 TRESTLE_DIST_DIR \u00a4 TRESTLE_HREF_HEADING \u00a4 TRESTLE_HREF_REGEX \u00a4 TRESTLE_KEEP_FILE \u00a4 Map of plural form of a model type to the oscal module that contains the classes related to it. UNIX_CACHE_ROOT \u00a4 UUID_REGEX \u00a4 VAL_MODE_ALL \u00a4 VAL_MODE_DUPLICATES \u00a4 VAL_MODE_OSCAL_VERSION \u00a4 VAL_MODE_REFS \u00a4 WEBSITE_ROOT \u00a4 WINDOWS_DRIVE_LETTER_REGEX \u00a4 WINDOWS_DRIVE_URI_REGEX \u00a4 WINDOWS_PLATFORM_STR \u00a4 handler: python","title":"const"},{"location":"api_reference/trestle.core.const/#trestle.core.const","text":"Core constants module containing all constants.","title":"const"},{"location":"api_reference/trestle.core.const/#trestle.core.const-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ALIAS_PATH_SEPARATOR","text":"","title":"ALIAS_PATH_SEPARATOR"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_DESC_ELEMENT","text":"","title":"ARG_DESC_ELEMENT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_DESC_FILE","text":"","title":"ARG_DESC_FILE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_DESC_ITEM","text":"","title":"ARG_DESC_ITEM"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_DESC_MODE","text":"","title":"ARG_DESC_MODE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_ELEMENT","text":"","title":"ARG_ELEMENT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_ELEMENT_SHORT","text":"","title":"ARG_ELEMENT_SHORT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_FILE","text":"","title":"ARG_FILE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_FILE_SHORT","text":"","title":"ARG_FILE_SHORT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_ITEM","text":"","title":"ARG_ITEM"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_ITEM_SHORT","text":"","title":"ARG_ITEM_SHORT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_MODE","text":"","title":"ARG_MODE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_MODE_SHORT","text":"","title":"ARG_MODE_SHORT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_VALIDATE","text":"","title":"ARG_VALIDATE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ARG_VALIDATE_SHORT","text":"","title":"ARG_VALIDATE_SHORT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.BUG_REPORT","text":"","title":"BUG_REPORT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.CACHE_ABS_DIR","text":"","title":"CACHE_ABS_DIR"},{"location":"api_reference/trestle.core.const/#trestle.core.const.DAY_SECONDS","text":"","title":"DAY_SECONDS"},{"location":"api_reference/trestle.core.const/#trestle.core.const.ELEMENT_WILDCARD","text":"","title":"ELEMENT_WILDCARD"},{"location":"api_reference/trestle.core.const/#trestle.core.const.FILE_DIGIT_PREFIX_LENGTH","text":"","title":"FILE_DIGIT_PREFIX_LENGTH"},{"location":"api_reference/trestle.core.const/#trestle.core.const.FILE_ENCODING","text":"","title":"FILE_ENCODING"},{"location":"api_reference/trestle.core.const/#trestle.core.const.FILE_URI","text":"","title":"FILE_URI"},{"location":"api_reference/trestle.core.const/#trestle.core.const.HEADER_L_ESCAPE","text":"","title":"HEADER_L_ESCAPE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.HEADER_R_ESCAPE","text":"","title":"HEADER_R_ESCAPE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.HOUR_SECONDS","text":"","title":"HOUR_SECONDS"},{"location":"api_reference/trestle.core.const/#trestle.core.const.HTTPS_URI","text":"","title":"HTTPS_URI"},{"location":"api_reference/trestle.core.const/#trestle.core.const.IDX_SEP","text":"","title":"IDX_SEP"},{"location":"api_reference/trestle.core.const/#trestle.core.const.IOF_HELP","text":"","title":"IOF_HELP"},{"location":"api_reference/trestle.core.const/#trestle.core.const.IOF_LONG","text":"","title":"IOF_LONG"},{"location":"api_reference/trestle.core.const/#trestle.core.const.IOF_SHORT","text":"","title":"IOF_SHORT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.MARKDOWN_URL_REGEX","text":"","title":"MARKDOWN_URL_REGEX"},{"location":"api_reference/trestle.core.const/#trestle.core.const.MODEL_DIR_LIST","text":"","title":"MODEL_DIR_LIST"},{"location":"api_reference/trestle.core.const/#trestle.core.const.MODEL_DIR_TO_MODEL_MODULE","text":"","title":"MODEL_DIR_TO_MODEL_MODULE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.MODEL_TYPE_LIST","text":"","title":"MODEL_TYPE_LIST"},{"location":"api_reference/trestle.core.const/#trestle.core.const.MODEL_TYPE_TO_MODEL_DIR","text":"Element path separator","title":"MODEL_TYPE_TO_MODEL_DIR"},{"location":"api_reference/trestle.core.const/#trestle.core.const.MODEL_TYPE_TO_MODEL_MODULE","text":"","title":"MODEL_TYPE_TO_MODEL_MODULE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.PACKAGE_OSCAL","text":"","title":"PACKAGE_OSCAL"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SAMPLE_UUID_STR","text":"","title":"SAMPLE_UUID_STR"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SFTP_URI","text":"","title":"SFTP_URI"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SSP_ADD_IMPLEMENTATION_FOR_CONTROL_TEXT","text":"","title":"SSP_ADD_IMPLEMENTATION_FOR_CONTROL_TEXT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SSP_ADD_IMPLEMENTATION_FOR_STATEMENT_TEXT","text":"","title":"SSP_ADD_IMPLEMENTATION_FOR_STATEMENT_TEXT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SSP_ADD_IMPLEMENTATION_PREFIX","text":"","title":"SSP_ADD_IMPLEMENTATION_PREFIX"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SSP_MD_HRULE_LINE","text":"","title":"SSP_MD_HRULE_LINE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SSP_MD_IMPLEMENTATION_QUESTION","text":"","title":"SSP_MD_IMPLEMENTATION_QUESTION"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SSP_MD_LEAVE_BLANK_TEXT","text":"","title":"SSP_MD_LEAVE_BLANK_TEXT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.SSP_SYSTEM_CONTROL_IMPLEMENTATION_TEXT","text":"","title":"SSP_SYSTEM_CONTROL_IMPLEMENTATION_TEXT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.TRESTLE_CACHE_DIR","text":"","title":"TRESTLE_CACHE_DIR"},{"location":"api_reference/trestle.core.const/#trestle.core.const.TRESTLE_CONFIG_DIR","text":"","title":"TRESTLE_CONFIG_DIR"},{"location":"api_reference/trestle.core.const/#trestle.core.const.TRESTLE_CONFIG_FILE","text":"","title":"TRESTLE_CONFIG_FILE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.TRESTLE_DIST_DIR","text":"","title":"TRESTLE_DIST_DIR"},{"location":"api_reference/trestle.core.const/#trestle.core.const.TRESTLE_HREF_HEADING","text":"","title":"TRESTLE_HREF_HEADING"},{"location":"api_reference/trestle.core.const/#trestle.core.const.TRESTLE_HREF_REGEX","text":"","title":"TRESTLE_HREF_REGEX"},{"location":"api_reference/trestle.core.const/#trestle.core.const.TRESTLE_KEEP_FILE","text":"Map of plural form of a model type to the oscal module that contains the classes related to it.","title":"TRESTLE_KEEP_FILE"},{"location":"api_reference/trestle.core.const/#trestle.core.const.UNIX_CACHE_ROOT","text":"","title":"UNIX_CACHE_ROOT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.UUID_REGEX","text":"","title":"UUID_REGEX"},{"location":"api_reference/trestle.core.const/#trestle.core.const.VAL_MODE_ALL","text":"","title":"VAL_MODE_ALL"},{"location":"api_reference/trestle.core.const/#trestle.core.const.VAL_MODE_DUPLICATES","text":"","title":"VAL_MODE_DUPLICATES"},{"location":"api_reference/trestle.core.const/#trestle.core.const.VAL_MODE_OSCAL_VERSION","text":"","title":"VAL_MODE_OSCAL_VERSION"},{"location":"api_reference/trestle.core.const/#trestle.core.const.VAL_MODE_REFS","text":"","title":"VAL_MODE_REFS"},{"location":"api_reference/trestle.core.const/#trestle.core.const.WEBSITE_ROOT","text":"","title":"WEBSITE_ROOT"},{"location":"api_reference/trestle.core.const/#trestle.core.const.WINDOWS_DRIVE_LETTER_REGEX","text":"","title":"WINDOWS_DRIVE_LETTER_REGEX"},{"location":"api_reference/trestle.core.const/#trestle.core.const.WINDOWS_DRIVE_URI_REGEX","text":"","title":"WINDOWS_DRIVE_URI_REGEX"},{"location":"api_reference/trestle.core.const/#trestle.core.const.WINDOWS_PLATFORM_STR","text":"handler: python","title":"WINDOWS_PLATFORM_STR"},{"location":"api_reference/trestle.core.draw_io/","text":"trestle.core.draw_io \u00a4 Functionality for reading information from a drawio file. logger \u00a4 Classes \u00a4 DrawIO \u00a4 Access and process drawio data / metadata. Methods \u00a4 __init__ ( self , file_path ) special \u00a4 Load drawio object into memory. Parameters: Name Type Description Default file_path Path Path to the drawio object. required Source code in trestle/core/draw_io.py def __init__ ( self , file_path : pathlib . Path ) -> None : \"\"\" Load drawio object into memory. args: file_path: Path to the drawio object. \"\"\" self . file_path : pathlib . Path = file_path self . _load () get_metadata ( self ) \u00a4 Get metadata from each tab if it exists or provide an empty dict. Source code in trestle/core/draw_io.py def get_metadata ( self ) -> List [ Dict [ str , str ]]: \"\"\"Get metadata from each tab if it exists or provide an empty dict.\"\"\" # Note that id and label are special for drawio. banned_keys = [ 'id' , 'label' ] md_list : List [ Dict [ str , str ]] = [] for diagram in self . diagrams : md_dict : Dict [ str , str ] = {} # Drawio creates data within a root and then an object element type children = list ( diagram ) root_obj = children [ 0 ] md_objects = root_obj . findall ( 'object' ) # Should always be true - to test presumptions. if len ( md_objects ) == 0 : md_list . append ( md_dict ) continue items = md_objects [ 0 ] . items () for item in items : key = item [ 0 ] val = item [ 1 ] if key in banned_keys : continue md_dict [ key ] = val md_list . append ( md_dict ) return md_list restructure_metadata ( input_dict ) classmethod \u00a4 Restructure metadata into a hierarchial dict assuming a period separator. Source code in trestle/core/draw_io.py @classmethod def restructure_metadata ( cls , input_dict : Dict [ str , str ]) -> Dict [ str , Any ]: \"\"\"Restructure metadata into a hierarchial dict assuming a period separator.\"\"\" # get the list of duplicate keys # Get a count of keys result = {} key_map = {} for keys in input_dict . keys (): stub = keys . split ( '.' )[ 0 ] tmp = key_map . get ( stub , []) tmp . append ( keys ) key_map [ stub ] = tmp for key , values in key_map . items (): holding = {} if len ( values ) == 1 and key == values [ 0 ]: result [ key ] = input_dict [ key ] else : for value in values : holding [ value . split ( '.' , 1 )[ - 1 ]] = input_dict [ value ] result [ key ] = cls . restructure_metadata ( holding ) return result DrawIOMetadataValidator \u00a4 Validator to check whether drawio metadata meets validation expectations. Methods \u00a4 __init__ ( self , template_path , must_be_first_tab = True ) special \u00a4 Initialize drawio validator. Parameters: Name Type Description Default template_path Path Path to a templated drawio file where metadata will be looked up on the first tab only. required must_be_first_tab bool Whether to search the candidate file for a metadata across multiple tabs. True Source code in trestle/core/draw_io.py def __init__ ( self , template_path : pathlib . Path , must_be_first_tab : bool = True ) -> None : \"\"\" Initialize drawio validator. Args: template_path: Path to a templated drawio file where metadata will be looked up on the first tab only. must_be_first_tab: Whether to search the candidate file for a metadata across multiple tabs. \"\"\" self . template_path = template_path self . must_be_first_tab = must_be_first_tab # Load metadat from template template_drawio = DrawIO ( self . template_path ) # Zero index as must be first tab self . template_metadata = template_drawio . get_metadata ()[ 0 ] validate ( self , candidate ) \u00a4 Run drawio validation against a candidate file. Parameters: Name Type Description Default candidate Path The path to a candidate markdown file to be validated. required Returns: Type Description bool Whether or not the validation passes. Exceptions: Type Description err.TrestleError If a file IO / formatting error occurs. Source code in trestle/core/draw_io.py def validate ( self , candidate : pathlib . Path ) -> bool : \"\"\" Run drawio validation against a candidate file. Args: candidate: The path to a candidate markdown file to be validated. Returns: Whether or not the validation passes. Raises: err.TrestleError: If a file IO / formatting error occurs. \"\"\" logging . info ( f 'Validating drawio file { candidate } against template file { self . template_path } ' ) candidate_drawio = DrawIO ( candidate ) drawio_metadata = candidate_drawio . get_metadata () if self . must_be_first_tab : return markdown_validator . MarkdownValidator . compare_keys ( self . template_metadata , drawio_metadata [ 0 ]) else : for md_tab in drawio_metadata : status = markdown_validator . MarkdownValidator . compare_keys ( self . template_metadata , md_tab ) if status : return status return False handler: python","title":"draw_io"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io","text":"Functionality for reading information from a drawio file.","title":"draw_io"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIO","text":"Access and process drawio data / metadata.","title":"DrawIO"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIO-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIO.__init__","text":"Load drawio object into memory. Parameters: Name Type Description Default file_path Path Path to the drawio object. required Source code in trestle/core/draw_io.py def __init__ ( self , file_path : pathlib . Path ) -> None : \"\"\" Load drawio object into memory. args: file_path: Path to the drawio object. \"\"\" self . file_path : pathlib . Path = file_path self . _load ()","title":"__init__()"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIO.get_metadata","text":"Get metadata from each tab if it exists or provide an empty dict. Source code in trestle/core/draw_io.py def get_metadata ( self ) -> List [ Dict [ str , str ]]: \"\"\"Get metadata from each tab if it exists or provide an empty dict.\"\"\" # Note that id and label are special for drawio. banned_keys = [ 'id' , 'label' ] md_list : List [ Dict [ str , str ]] = [] for diagram in self . diagrams : md_dict : Dict [ str , str ] = {} # Drawio creates data within a root and then an object element type children = list ( diagram ) root_obj = children [ 0 ] md_objects = root_obj . findall ( 'object' ) # Should always be true - to test presumptions. if len ( md_objects ) == 0 : md_list . append ( md_dict ) continue items = md_objects [ 0 ] . items () for item in items : key = item [ 0 ] val = item [ 1 ] if key in banned_keys : continue md_dict [ key ] = val md_list . append ( md_dict ) return md_list","title":"get_metadata()"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIO.restructure_metadata","text":"Restructure metadata into a hierarchial dict assuming a period separator. Source code in trestle/core/draw_io.py @classmethod def restructure_metadata ( cls , input_dict : Dict [ str , str ]) -> Dict [ str , Any ]: \"\"\"Restructure metadata into a hierarchial dict assuming a period separator.\"\"\" # get the list of duplicate keys # Get a count of keys result = {} key_map = {} for keys in input_dict . keys (): stub = keys . split ( '.' )[ 0 ] tmp = key_map . get ( stub , []) tmp . append ( keys ) key_map [ stub ] = tmp for key , values in key_map . items (): holding = {} if len ( values ) == 1 and key == values [ 0 ]: result [ key ] = input_dict [ key ] else : for value in values : holding [ value . split ( '.' , 1 )[ - 1 ]] = input_dict [ value ] result [ key ] = cls . restructure_metadata ( holding ) return result","title":"restructure_metadata()"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIOMetadataValidator","text":"Validator to check whether drawio metadata meets validation expectations.","title":"DrawIOMetadataValidator"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIOMetadataValidator-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIOMetadataValidator.__init__","text":"Initialize drawio validator. Parameters: Name Type Description Default template_path Path Path to a templated drawio file where metadata will be looked up on the first tab only. required must_be_first_tab bool Whether to search the candidate file for a metadata across multiple tabs. True Source code in trestle/core/draw_io.py def __init__ ( self , template_path : pathlib . Path , must_be_first_tab : bool = True ) -> None : \"\"\" Initialize drawio validator. Args: template_path: Path to a templated drawio file where metadata will be looked up on the first tab only. must_be_first_tab: Whether to search the candidate file for a metadata across multiple tabs. \"\"\" self . template_path = template_path self . must_be_first_tab = must_be_first_tab # Load metadat from template template_drawio = DrawIO ( self . template_path ) # Zero index as must be first tab self . template_metadata = template_drawio . get_metadata ()[ 0 ]","title":"__init__()"},{"location":"api_reference/trestle.core.draw_io/#trestle.core.draw_io.DrawIOMetadataValidator.validate","text":"Run drawio validation against a candidate file. Parameters: Name Type Description Default candidate Path The path to a candidate markdown file to be validated. required Returns: Type Description bool Whether or not the validation passes. Exceptions: Type Description err.TrestleError If a file IO / formatting error occurs. Source code in trestle/core/draw_io.py def validate ( self , candidate : pathlib . Path ) -> bool : \"\"\" Run drawio validation against a candidate file. Args: candidate: The path to a candidate markdown file to be validated. Returns: Whether or not the validation passes. Raises: err.TrestleError: If a file IO / formatting error occurs. \"\"\" logging . info ( f 'Validating drawio file { candidate } against template file { self . template_path } ' ) candidate_drawio = DrawIO ( candidate ) drawio_metadata = candidate_drawio . get_metadata () if self . must_be_first_tab : return markdown_validator . MarkdownValidator . compare_keys ( self . template_metadata , drawio_metadata [ 0 ]) else : for md_tab in drawio_metadata : status = markdown_validator . MarkdownValidator . compare_keys ( self . template_metadata , md_tab ) if status : return status return False handler: python","title":"validate()"},{"location":"api_reference/trestle.core.duplicates_validator/","text":"trestle.core.duplicates_validator \u00a4 Validate by confirming no duplicate uuids. Classes \u00a4 DuplicatesValidator ( Validator ) \u00a4 Validator to check for duplicate uuids in the model. Methods \u00a4 model_is_valid ( self , model ) \u00a4 Test if the model is valid and contains no duplicate uuids. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool True (valid) if the model does not contain duplicate uuid's. Source code in trestle/core/duplicates_validator.py def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Test if the model is valid and contains no duplicate uuids. args: model: An Oscal model that can be passed to the validator. returns: True (valid) if the model does not contain duplicate uuid's. \"\"\" return has_no_duplicate_values_by_name ( model , 'uuid' ) handler: python","title":"duplicates_validator"},{"location":"api_reference/trestle.core.duplicates_validator/#trestle.core.duplicates_validator","text":"Validate by confirming no duplicate uuids.","title":"duplicates_validator"},{"location":"api_reference/trestle.core.duplicates_validator/#trestle.core.duplicates_validator-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.duplicates_validator/#trestle.core.duplicates_validator.DuplicatesValidator","text":"Validator to check for duplicate uuids in the model.","title":"DuplicatesValidator"},{"location":"api_reference/trestle.core.duplicates_validator/#trestle.core.duplicates_validator.DuplicatesValidator-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.duplicates_validator/#trestle.core.duplicates_validator.DuplicatesValidator.model_is_valid","text":"Test if the model is valid and contains no duplicate uuids. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool True (valid) if the model does not contain duplicate uuid's. Source code in trestle/core/duplicates_validator.py def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Test if the model is valid and contains no duplicate uuids. args: model: An Oscal model that can be passed to the validator. returns: True (valid) if the model does not contain duplicate uuid's. \"\"\" return has_no_duplicate_values_by_name ( model , 'uuid' ) handler: python","title":"model_is_valid()"},{"location":"api_reference/trestle.core.err/","text":"trestle.core.err \u00a4 Trestle core errors module. Classes \u00a4 TrestleError ( RuntimeError ) \u00a4 General framework (non-application) related errors. Attributes: Name Type Description msg str Human readable string describing the exception. Methods \u00a4 __init__ ( self , msg ) special \u00a4 Intialization for TresleError. Parameters: Name Type Description Default msg str The error message required Source code in trestle/core/err.py def __init__ ( self , msg : str ): \"\"\"Intialization for TresleError. Args: msg (str): The error message \"\"\" RuntimeError . __init__ ( self ) self . msg = msg __str__ ( self ) special \u00a4 Return Trestle error message if asked for a string. Source code in trestle/core/err.py def __str__ ( self ) -> str : \"\"\"Return Trestle error message if asked for a string.\"\"\" return self . msg TrestleNotFoundError ( TrestleError ) \u00a4 General framwork related not found error. Attributes: Name Type Description msg str Human readable string describing the exception. Methods \u00a4 __init__ ( self , msg ) special \u00a4 Intialization for TresleNotFoundError. Parameters: Name Type Description Default msg str The error message required Source code in trestle/core/err.py def __init__ ( self , msg : str ): \"\"\" Intialization for TresleNotFoundError. Args: msg: The error message \"\"\" super () . __init__ ( msg ) TrestleValidationError ( TrestleError ) \u00a4 General framwork related validation error. Attributes: Name Type Description msg str Human readable string describing the exception. Methods \u00a4 __init__ ( self , msg ) special \u00a4 Intialization for TresleValidationError. Parameters: Name Type Description Default msg str The error message required Source code in trestle/core/err.py def __init__ ( self , msg : str ): \"\"\" Intialization for TresleValidationError. Args: msg (str): The error message \"\"\" super () . __init__ ( msg ) handler: python","title":"err"},{"location":"api_reference/trestle.core.err/#trestle.core.err","text":"Trestle core errors module.","title":"err"},{"location":"api_reference/trestle.core.err/#trestle.core.err-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleError","text":"General framework (non-application) related errors. Attributes: Name Type Description msg str Human readable string describing the exception.","title":"TrestleError"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleError-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleError.__init__","text":"Intialization for TresleError. Parameters: Name Type Description Default msg str The error message required Source code in trestle/core/err.py def __init__ ( self , msg : str ): \"\"\"Intialization for TresleError. Args: msg (str): The error message \"\"\" RuntimeError . __init__ ( self ) self . msg = msg","title":"__init__()"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleError.__str__","text":"Return Trestle error message if asked for a string. Source code in trestle/core/err.py def __str__ ( self ) -> str : \"\"\"Return Trestle error message if asked for a string.\"\"\" return self . msg","title":"__str__()"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleNotFoundError","text":"General framwork related not found error. Attributes: Name Type Description msg str Human readable string describing the exception.","title":"TrestleNotFoundError"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleNotFoundError-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleNotFoundError.__init__","text":"Intialization for TresleNotFoundError. Parameters: Name Type Description Default msg str The error message required Source code in trestle/core/err.py def __init__ ( self , msg : str ): \"\"\" Intialization for TresleNotFoundError. Args: msg: The error message \"\"\" super () . __init__ ( msg )","title":"__init__()"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleValidationError","text":"General framwork related validation error. Attributes: Name Type Description msg str Human readable string describing the exception.","title":"TrestleValidationError"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleValidationError-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.err/#trestle.core.err.TrestleValidationError.__init__","text":"Intialization for TresleValidationError. Parameters: Name Type Description Default msg str The error message required Source code in trestle/core/err.py def __init__ ( self , msg : str ): \"\"\" Intialization for TresleValidationError. Args: msg (str): The error message \"\"\" super () . __init__ ( msg ) handler: python","title":"__init__()"},{"location":"api_reference/trestle.core.generators/","text":"trestle.core.generators \u00a4 Capabilities to allow the generation of various oscal objects. TG \u00a4 logger \u00a4 Functions \u00a4 generate_sample_model ( model , include_optional = False , depth =- 1 ) \u00a4 Given a model class, generate an object of that class with sample values. Can generate optional variables with an enabled flag. Any array objects will have a single entry injected into it. Note: Trestle generate will not activate recursive loops irrespective of the depth flag. Parameters: Name Type Description Default model Union[Type[~TG], List[~TG], Dict[str, ~TG]] The model type provided. Typically for a user as an OscalBaseModel Subclass. required include_optional bool Whether or not to generate optional fields. False depth int Depth of the tree at which optional fields are generated. Negative values (default) removes the limit. -1 Returns: Type Description ~TG The generated instance with a pro-forma values filled out as best as possible. Source code in trestle/core/generators.py def generate_sample_model ( model : Union [ Type [ TG ], List [ TG ], Dict [ str , TG ]], include_optional : bool = False , depth : int = - 1 ) -> TG : \"\"\"Given a model class, generate an object of that class with sample values. Can generate optional variables with an enabled flag. Any array objects will have a single entry injected into it. Note: Trestle generate will not activate recursive loops irrespective of the depth flag. Args: model: The model type provided. Typically for a user as an OscalBaseModel Subclass. include_optional: Whether or not to generate optional fields. depth: Depth of the tree at which optional fields are generated. Negative values (default) removes the limit. Returns: The generated instance with a pro-forma values filled out as best as possible. \"\"\" effective_optional = include_optional and not depth == 0 model_type = model # This block normalizes model type down to if utils . is_collection_field_type ( model ): # type: ignore model_type = utils . get_origin ( model ) # type: ignore model = utils . get_inner_type ( model ) # type: ignore model = cast ( TG , model ) model_dict = {} # this block is needed to avoid situations where an inbuilt is inside a list / dict. if safe_is_sub ( model , OscalBaseModel ): for field in model . __fields__ : outer_type = model . __fields__ [ field ] . outer_type_ # Check for unions. This is awkward due to allow support for python 3.7 # It also does not inspect for which union we want. Should be removable with oscal 1.0.0 if utils . get_origin ( outer_type ) == Union : outer_type = outer_type . __args__ [ 0 ] if model . __fields__ [ field ] . required or effective_optional : \"\"\" FIXME: This type_ could be a List or a Dict \"\"\" # FIXME could be ForwardRef('SystemComponentStatus') if utils . is_collection_field_type ( outer_type ): inner_type = utils . get_inner_type ( outer_type ) if inner_type == model : continue model_dict [ field ] = generate_sample_model ( outer_type , include_optional = include_optional , depth = depth - 1 ) elif safe_is_sub ( outer_type , OscalBaseModel ): model_dict [ field ] = generate_sample_model ( outer_type , include_optional = include_optional , depth = depth - 1 ) else : # Hacking here: # Root models should ideally not exist, however, sometimes we are stuck with them. # If that is the case we need sufficient information on the type in order to generate a model. # E.g. we need the type of the container. if field == '__root__' and hasattr ( model , '__name__' ): model_dict [ field ] = generate_sample_value_by_type ( outer_type , utils . classname_to_alias ( model . __name__ , 'field' ) ) else : model_dict [ field ] = generate_sample_value_by_type ( outer_type , field ) # Note: this assumes list constrains in oscal are always 1 as a minimum size. if two this may still fail. else : # There is set of circumstances where a m if model_type is list : return [ generate_sample_value_by_type ( model , '' )] elif model_type is dict : return { 'REPLACE_ME' : generate_sample_value_by_type ( model , '' )} err . TrestleError ( 'Unhandled collection type.' ) if model_type is list : return [ model ( ** model_dict )] elif model_type is dict : return { 'REPLACE_ME' : model ( ** model_dict )} return model ( ** model_dict ) generate_sample_value_by_type ( type_ , field_name ) \u00a4 Given a type, return sample value. Includes the Optional use of passing down a parent_model Source code in trestle/core/generators.py def generate_sample_value_by_type ( type_ : type , field_name : str , ) -> Union [ datetime , bool , int , str , float , Enum ]: \"\"\"Given a type, return sample value. Includes the Optional use of passing down a parent_model \"\"\" # FIXME: Should be in separate generator module as it inherits EVERYTHING if type_ is datetime : return datetime . now () . astimezone () elif type_ is bool : return False elif type_ is int : return 0 elif type_ is str : if field_name == 'oscal_version' : return OSCAL_VERSION return 'REPLACE_ME' elif type_ is float : return 0.00 elif safe_is_sub ( type_ , ConstrainedStr ) or ( hasattr ( type_ , '__name__' ) and 'ConstrainedStr' in type_ . __name__ ): # This code here is messy. we need to meet a set of constraints. If we do # TODO: handle regex directly if 'uuid' == field_name : return str ( uuid . uuid4 ()) elif field_name == 'date_authorized' : return str ( date . today () . isoformat ()) elif field_name == 'oscal_version' : return OSCAL_VERSION elif 'uuid' in field_name : return const . SAMPLE_UUID_STR # Only case where are UUID is required but not in name. elif field_name . rstrip ( 's' ) == 'member_of_organization' : return const . SAMPLE_UUID_STR else : return 'REPLACE_ME' elif hasattr ( type_ , '__name__' ) and 'ConstrainedIntValue' in type_ . __name__ : # create an int value as close to the floor as possible does not test upper bound multiple = type_ . multiple_of if type_ . multiple_of else 1 # default to every integer # this command is a bit of a problem floor = type_ . ge if type_ . ge else 0 floor = type_ . gt + 1 if type_ . gt else floor if math . remainder ( floor , multiple ) == 0 : return floor else : return ( floor + 1 ) * multiple elif safe_is_sub ( type_ , Enum ): # keys and values diverge due to hypens in oscal names return type_ ( list ( type_ . __members__ . values ())[ 0 ]) elif type_ is pydantic . networks . EmailStr : return pydantic . networks . EmailStr ( 'dummy@sample.com' ) elif type_ is pydantic . networks . AnyUrl : # TODO: Cleanup: this should be usable from a url.. but it's not inuitive. return pydantic . networks . AnyUrl ( 'https://sample.com/replaceme.html' , scheme = 'http' , host = 'sample.com' ) elif type_ == Any : # Return empty dict - aka users can put whatever they want here. return {} else : raise err . TrestleError ( f 'Fatal: Bad type in model { type_ } ' ) safe_is_sub ( sub , parent ) \u00a4 Is this a subclass of parent. Source code in trestle/core/generators.py def safe_is_sub ( sub : Any , parent : Any ) -> bool : \"\"\"Is this a subclass of parent.\"\"\" is_class = inspect . isclass ( sub ) return is_class and issubclass ( sub , parent ) handler: python","title":"generators"},{"location":"api_reference/trestle.core.generators/#trestle.core.generators","text":"Capabilities to allow the generation of various oscal objects.","title":"generators"},{"location":"api_reference/trestle.core.generators/#trestle.core.generators.TG","text":"","title":"TG"},{"location":"api_reference/trestle.core.generators/#trestle.core.generators.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.generators/#trestle.core.generators-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.core.generators/#trestle.core.generators.generate_sample_model","text":"Given a model class, generate an object of that class with sample values. Can generate optional variables with an enabled flag. Any array objects will have a single entry injected into it. Note: Trestle generate will not activate recursive loops irrespective of the depth flag. Parameters: Name Type Description Default model Union[Type[~TG], List[~TG], Dict[str, ~TG]] The model type provided. Typically for a user as an OscalBaseModel Subclass. required include_optional bool Whether or not to generate optional fields. False depth int Depth of the tree at which optional fields are generated. Negative values (default) removes the limit. -1 Returns: Type Description ~TG The generated instance with a pro-forma values filled out as best as possible. Source code in trestle/core/generators.py def generate_sample_model ( model : Union [ Type [ TG ], List [ TG ], Dict [ str , TG ]], include_optional : bool = False , depth : int = - 1 ) -> TG : \"\"\"Given a model class, generate an object of that class with sample values. Can generate optional variables with an enabled flag. Any array objects will have a single entry injected into it. Note: Trestle generate will not activate recursive loops irrespective of the depth flag. Args: model: The model type provided. Typically for a user as an OscalBaseModel Subclass. include_optional: Whether or not to generate optional fields. depth: Depth of the tree at which optional fields are generated. Negative values (default) removes the limit. Returns: The generated instance with a pro-forma values filled out as best as possible. \"\"\" effective_optional = include_optional and not depth == 0 model_type = model # This block normalizes model type down to if utils . is_collection_field_type ( model ): # type: ignore model_type = utils . get_origin ( model ) # type: ignore model = utils . get_inner_type ( model ) # type: ignore model = cast ( TG , model ) model_dict = {} # this block is needed to avoid situations where an inbuilt is inside a list / dict. if safe_is_sub ( model , OscalBaseModel ): for field in model . __fields__ : outer_type = model . __fields__ [ field ] . outer_type_ # Check for unions. This is awkward due to allow support for python 3.7 # It also does not inspect for which union we want. Should be removable with oscal 1.0.0 if utils . get_origin ( outer_type ) == Union : outer_type = outer_type . __args__ [ 0 ] if model . __fields__ [ field ] . required or effective_optional : \"\"\" FIXME: This type_ could be a List or a Dict \"\"\" # FIXME could be ForwardRef('SystemComponentStatus') if utils . is_collection_field_type ( outer_type ): inner_type = utils . get_inner_type ( outer_type ) if inner_type == model : continue model_dict [ field ] = generate_sample_model ( outer_type , include_optional = include_optional , depth = depth - 1 ) elif safe_is_sub ( outer_type , OscalBaseModel ): model_dict [ field ] = generate_sample_model ( outer_type , include_optional = include_optional , depth = depth - 1 ) else : # Hacking here: # Root models should ideally not exist, however, sometimes we are stuck with them. # If that is the case we need sufficient information on the type in order to generate a model. # E.g. we need the type of the container. if field == '__root__' and hasattr ( model , '__name__' ): model_dict [ field ] = generate_sample_value_by_type ( outer_type , utils . classname_to_alias ( model . __name__ , 'field' ) ) else : model_dict [ field ] = generate_sample_value_by_type ( outer_type , field ) # Note: this assumes list constrains in oscal are always 1 as a minimum size. if two this may still fail. else : # There is set of circumstances where a m if model_type is list : return [ generate_sample_value_by_type ( model , '' )] elif model_type is dict : return { 'REPLACE_ME' : generate_sample_value_by_type ( model , '' )} err . TrestleError ( 'Unhandled collection type.' ) if model_type is list : return [ model ( ** model_dict )] elif model_type is dict : return { 'REPLACE_ME' : model ( ** model_dict )} return model ( ** model_dict )","title":"generate_sample_model()"},{"location":"api_reference/trestle.core.generators/#trestle.core.generators.generate_sample_value_by_type","text":"Given a type, return sample value. Includes the Optional use of passing down a parent_model Source code in trestle/core/generators.py def generate_sample_value_by_type ( type_ : type , field_name : str , ) -> Union [ datetime , bool , int , str , float , Enum ]: \"\"\"Given a type, return sample value. Includes the Optional use of passing down a parent_model \"\"\" # FIXME: Should be in separate generator module as it inherits EVERYTHING if type_ is datetime : return datetime . now () . astimezone () elif type_ is bool : return False elif type_ is int : return 0 elif type_ is str : if field_name == 'oscal_version' : return OSCAL_VERSION return 'REPLACE_ME' elif type_ is float : return 0.00 elif safe_is_sub ( type_ , ConstrainedStr ) or ( hasattr ( type_ , '__name__' ) and 'ConstrainedStr' in type_ . __name__ ): # This code here is messy. we need to meet a set of constraints. If we do # TODO: handle regex directly if 'uuid' == field_name : return str ( uuid . uuid4 ()) elif field_name == 'date_authorized' : return str ( date . today () . isoformat ()) elif field_name == 'oscal_version' : return OSCAL_VERSION elif 'uuid' in field_name : return const . SAMPLE_UUID_STR # Only case where are UUID is required but not in name. elif field_name . rstrip ( 's' ) == 'member_of_organization' : return const . SAMPLE_UUID_STR else : return 'REPLACE_ME' elif hasattr ( type_ , '__name__' ) and 'ConstrainedIntValue' in type_ . __name__ : # create an int value as close to the floor as possible does not test upper bound multiple = type_ . multiple_of if type_ . multiple_of else 1 # default to every integer # this command is a bit of a problem floor = type_ . ge if type_ . ge else 0 floor = type_ . gt + 1 if type_ . gt else floor if math . remainder ( floor , multiple ) == 0 : return floor else : return ( floor + 1 ) * multiple elif safe_is_sub ( type_ , Enum ): # keys and values diverge due to hypens in oscal names return type_ ( list ( type_ . __members__ . values ())[ 0 ]) elif type_ is pydantic . networks . EmailStr : return pydantic . networks . EmailStr ( 'dummy@sample.com' ) elif type_ is pydantic . networks . AnyUrl : # TODO: Cleanup: this should be usable from a url.. but it's not inuitive. return pydantic . networks . AnyUrl ( 'https://sample.com/replaceme.html' , scheme = 'http' , host = 'sample.com' ) elif type_ == Any : # Return empty dict - aka users can put whatever they want here. return {} else : raise err . TrestleError ( f 'Fatal: Bad type in model { type_ } ' )","title":"generate_sample_value_by_type()"},{"location":"api_reference/trestle.core.generators/#trestle.core.generators.safe_is_sub","text":"Is this a subclass of parent. Source code in trestle/core/generators.py def safe_is_sub ( sub : Any , parent : Any ) -> bool : \"\"\"Is this a subclass of parent.\"\"\" is_class = inspect . isclass ( sub ) return is_class and issubclass ( sub , parent ) handler: python","title":"safe_is_sub()"},{"location":"api_reference/trestle.core.markdown_validator/","text":"trestle.core.markdown_validator \u00a4 Markdown validator - provides functionality for operating on markdown files including template validation. logger \u00a4 Classes \u00a4 MarkdownValidator \u00a4 Markdown validator to meet conformance expectations. Methods \u00a4 __init__ ( self , template_path , yaml_header_validate , yaml_only_validate , strict_heading_validate = None , relative_to = None ) special \u00a4 Initialize markdown validator. Parameters: Name Type Description Default template_path Path path to markdown template. required yaml_header_validate bool whether to validate a yaml header for conformance or not required yaml_only_validate bool whether to validate only the yaml header required strict_heading_validate Optional[str] Whether a heading, provided in the template, is to have line-by-line matching. None Source code in trestle/core/markdown_validator.py def __init__ ( self , template_path : pathlib . Path , yaml_header_validate : bool , yaml_only_validate : bool , strict_heading_validate : Optional [ str ] = None , relative_to : Optional [ pathlib . Path ] = None ) -> None : \"\"\" Initialize markdown validator. Args: template_path: path to markdown template. yaml_header_validate: whether to validate a yaml header for conformance or not yaml_only_validate: whether to validate only the yaml header strict_heading_validate: Whether a heading, provided in the template, is to have line-by-line matching. \"\"\" self . _yaml_header_validate = yaml_header_validate self . _yaml_only_validate = yaml_only_validate self . template_path = template_path if relative_to : self . rel = relative_to else : self . rel = pathlib . Path ( '/' ) . resolve () if not self . template_path . is_file (): logger . error ( f 'Provided template { self . template_path } is not a file' ) raise err . TrestleError ( f 'Unable to find markdown template { self . template_path } ' ) template_header , template_parse = self . load_markdown_parsetree ( self . template_path ) if template_header == {} and ( self . _yaml_only_validate or self . _yaml_header_validate ): raise err . TrestleError ( f 'Expected yaml header for markdown template where none exists { self . template_path } ' ) self . _template_header = template_header self . _template_parse = template_parse self . _strict_heading_validate = strict_heading_validate self . template_tree , _ = partition_ast ( self . _template_parse ) self . w_template_tree = self . wrap_content ( self . template_tree ) clean_content ( self , parse_tree ) \u00a4 Clean a set of content for measurement of header cleanliness. Parameters: Name Type Description Default parse_tree Dict[str, Any] AST parse normalized into a hierarchial tree. required Returns: Type Description List[str] List of strings for each line of paragraph content. Exceptions: Type Description TrestleError when unhandled object types are present. Assumptions Multiple paragraphs no sub-headings tables unhandled Source code in trestle/core/markdown_validator.py def clean_content ( self , parse_tree : Dict [ str , Any ]) -> List [ str ]: \"\"\" Clean a set of content for measurement of header cleanliness. Args: parse_tree: AST parse normalized into a hierarchial tree. Returns: List of strings for each line of paragraph content. Raises: TrestleError: when unhandled object types are present. Assumptions: - Multiple paragraphs - no sub-headings - tables unhandled \"\"\" items = parse_tree [ 'children' ] clean_text_lines : List [ str ] = [] for index in range ( len ( items )): # first item is the header title text which we will ignore. if index == 0 : continue item = items [ index ] if item [ 'type' ] == 'block_html' : # ignore all block HTML continue elif item [ 'type' ] == 'paragraph' : line_content = '' for child in item [ 'children' ]: if child [ 'type' ] == 'linebreak' : clean_text_lines . extend ( line_content . splitlines ()) line_content = '' elif 'html' in child [ 'type' ]: # ignore HTML comment presuming a commment continue elif 'strong' in child [ 'type' ]: line_content = line_content + child [ 'children' ][ 0 ][ 'text' ] elif 'text' in child [ 'type' ]: line_content = line_content + child [ 'text' ] else : msg = f 'Unexpected element type { item [ \"type\" ] } when flattening a governed header.' logger . error ( msg ) raise err . TrestleError ( msg ) # handle EoParagraph condition clean_text_lines . extend ( line_content . splitlines ()) else : msg = f 'Unexpected element type { item [ \"type\" ] } when flattening a governed header.' logger . error ( msg ) raise err . TrestleError ( msg ) return clean_text_lines compare_keys ( template , candidate ) classmethod \u00a4 Compare a template dictionary against a candidate as to whether key structure is maintained. Parameters: Name Type Description Default template Dict[str, Any] Template dict which is used as a model of key-value pairs required candidate Dict[str, Any] Candidate dictionary to be measured required Returns: Type Description bool Whether or not the the candidate matches the template keys. Source code in trestle/core/markdown_validator.py @classmethod def compare_keys ( cls , template : Dict [ str , Any ], candidate : Dict [ str , Any ]) -> bool : \"\"\" Compare a template dictionary against a candidate as to whether key structure is maintained. Args: template: Template dict which is used as a model of key-value pairs candidate: Candidate dictionary to be measured Returns: Whether or not the the candidate matches the template keys. \"\"\" if len ( template . keys ()) != len ( candidate . keys ()): return False for key in template . keys (): if key in candidate . keys (): if type ( template [ key ]) == dict : if type ( candidate [ key ]) == dict : status = cls . compare_keys ( template [ key ], candidate [ key ]) if not status : return status else : return False else : return False return True load_markdown_parsetree ( path ) classmethod \u00a4 Load markdown file including yaml frontmatter. Parameters: Name Type Description Default path Path File system path of the markdown. required Returns: Type Description Tuple[Dict[str, Any], List[Dict[str, Any]]] Yaml header which has been parsed or an empty dict. List of AST tokens in the flat structure provided by mistune. Source code in trestle/core/markdown_validator.py @classmethod def load_markdown_parsetree ( cls , path : pathlib . Path ) -> Tuple [ Dict [ str , Any ], List [ Dict [ str , Any ]]]: \"\"\" Load markdown file including yaml frontmatter. Args: path: File system path of the markdown. Returns: Yaml header which has been parsed or an empty dict. List of AST tokens in the flat structure provided by mistune. \"\"\" try : content = path . open ( 'r' , encoding = const . FILE_ENCODING ) . read () except UnicodeDecodeError as e : logger . error ( 'utf-8 decoding failed.' ) logger . error ( f 'See: { const . WEBSITE_ROOT } /errors/#utf-8-encoding-only' ) logger . debug ( f 'Underlying exception { e } ' ) raise err . TrestleError ( 'Unable to load file due to utf-8 encoding issues.' ) try : fm = frontmatter . loads ( content ) except Exception as e : logger . error ( f 'Error parsing yaml header from file { path } ' ) logger . error ( 'This is most likely due to an incorrect yaml structure.' ) logger . debug ( f 'Underlying error: { str ( e ) } ' ) raise err . TrestleError ( f 'Failure parsing yaml header on file { path } ' ) header_dict = fm . metadata md_no_header = fm . content mistune_ast_parser = mistune . create_markdown ( renderer = mistune . AstRenderer ()) mistune_parse = mistune_ast_parser ( md_no_header ) return header_dict , mistune_parse search_for_heading ( self , candidate_tree , heading ) \u00a4 Recursively search for a heading within a document and return the children. Parameters: Name Type Description Default candidate_tree Dict[str, Any] An AST parse tree that has been normalized by partition_ast required heading str The string content for a markdown heading. required Returns: Type Description Dict[str, Any] The heading AST token if it exists, or an empty ast token. Source code in trestle/core/markdown_validator.py def search_for_heading ( self , candidate_tree : Dict [ str , Any ], heading : str ) -> Dict [ str , Any ]: \"\"\" Recursively search for a heading within a document and return the children. Args: candidate_tree: An AST parse tree that has been normalized by partition_ast heading: The string content for a markdown heading. Returns: The heading AST token if it exists, or an empty ast token. \"\"\" answer = {} for candidate in candidate_tree [ 'children' ]: if candidate [ 'type' ] == 'heading' : if candidate [ 'children' ][ 0 ][ 'text' ] . strip () == heading . strip (): answer = candidate break else : answer = self . search_for_heading ( candidate , heading ) return answer validate ( self , candidate ) \u00a4 Run the validation against a candidate file. Parameters: Name Type Description Default candidate Path The path to a candidate markdown file to be validated. required Returns: Type Description bool Whether or not the validation passes. Source code in trestle/core/markdown_validator.py def validate ( self , candidate : pathlib . Path ) -> bool : \"\"\" Run the validation against a candidate file. Args: candidate: The path to a candidate markdown file to be validated. Returns: Whether or not the validation passes. \"\"\" header_content , mistune_parse_content = self . load_markdown_parsetree ( candidate ) if self . _yaml_header_validate or self . _yaml_only_validate : header_status = self . compare_keys ( self . _template_header , header_content ) if not header_status : logger . info ( f 'YAML header mismatch between template { self . template_path } and instance { candidate } ' ) return False if self . _yaml_only_validate : return True candidate_tree , _ = partition_ast ( mistune_parse_content ) w_candidate_tree = self . wrap_content ( candidate_tree ) if self . _strict_heading_validate is not None : status = self . _template_heading_validate ( self . w_template_tree , w_candidate_tree , self . _strict_heading_validate ) if not status : logger . error ( f 'Heading { self . _strict_heading_validate } did not meet templating requirements.' ) return False return compare_tree ( self . w_template_tree , w_candidate_tree ) wrap_content ( original ) classmethod \u00a4 Wrap an array of list into a pseudo-top level element to make it easier to handle. Warning: Not designed for rendering as it will produce extra text Parameters: Name Type Description Default original List[Dict[str, Any]] List of AST parse elements, likely normalized into a tree required Returns: Type Description Dict[str, Any] One pseudo element to make it easier to parse with a consistent name. Source code in trestle/core/markdown_validator.py @classmethod def wrap_content ( cls , original : List [ Dict [ str , Any ]]) -> Dict [ str , Any ]: \"\"\" Wrap an array of list into a pseudo-top level element to make it easier to handle. Warning: Not designed for rendering as it will produce extra text args: original: List of AST parse elements, likely normalized into a tree Returns: One pseudo element to make it easier to parse with a consistent name. \"\"\" structure = { 'type' : 'heading' , 'level' : 0 , 'children' : [{ 'type' : 'text' , 'text' : 'wrapping header' }]} structure [ 'children' ] . extend ( original ) return structure Functions \u00a4 compare_tree ( template , content ) \u00a4 Compare whether a content parse tree is a superset of the template tree. The fundamental assumption here is anchored on the nesting of markdown headings. Assumptions: - Users of a template cannot create headers at the same level as a template only below that level. - Template levels cannot be changed. - Headers are the only element measured in the template. Parameters: Name Type Description Default template Dict[str, Any] The dictionary containing a hierarchy where all keys are enforced. required content Dict[str, Any] The dictionary to be measured: required Returns: Type Description bool Whether the content conforms to the template expectations. Source code in trestle/core/markdown_validator.py def compare_tree ( template : Dict [ str , Any ], content : Dict [ str , Any ]) -> bool : \"\"\" Compare whether a content parse tree is a superset of the template tree. The fundamental assumption here is anchored on the nesting of markdown headings. Assumptions: - Users of a template cannot create headers at the same level as a template only below that level. - Template levels cannot be changed. - Headers are the only element measured in the template. Args: template: The dictionary containing a hierarchy where all keys are enforced. content: The dictionary to be measured: Returns: Whether the content conforms to the template expectations. \"\"\" # TODO: Add logging statements to this context. if not ( template [ 'type' ] == 'heading' ): # It's okay as we should not be here: return True logger . debug ( 'In compare tree' ) if not has_required ( template , 'level' , template [ 'children' ][ 0 ], 'text' ): logger . error ( 'In compare tree template does not have expected structure' ) return False if not has_required ( content , 'level' , content [ 'children' ][ 0 ], 'text' ): logger . error ( 'In compare tree content does not have expected structure' ) return False template_heading_level = template [ 'level' ] template_header_name = template [ 'children' ][ 0 ][ 'text' ] . strip () content_heading_level = content [ 'level' ] content_header_name = content [ 'children' ][ 0 ][ 'text' ] . strip () if not template_heading_level == content_heading_level : logger . error ( 'Unexpected trestle error in parsing markdown.' ) return False # ESCAPE title if required if not ( template_header_name . strip ()[ 0 ] == const . HEADER_L_ESCAPE and template_header_name . strip ()[ - 1 ] == const . HEADER_R_ESCAPE ): if not template_header_name == content_header_name : logger . info ( f 'Markdown templating failed due to mismatch between expected heading { template_header_name } and current heading { content_header_name } .' # noqa: E501 ) return False template_sub_headers = [] content_sub_headers = [] for ii in range ( len ( template [ 'children' ])): if template [ 'children' ][ ii ] . get ( 'type' ) == 'heading' : template_sub_headers . append ( template [ 'children' ][ ii ]) # IF there is no template headers we are good if len ( template_sub_headers ) == 0 : return True for ii in range ( len ( content [ 'children' ])): if content [ 'children' ][ ii ] . get ( 'type' ) == 'heading' : content_sub_headers . append ( content [ 'children' ][ ii ]) if not len ( template_sub_headers ) == len ( content_sub_headers ): # Deal with condition where extra headings are at a lower level than the first heading. logger . info ( f 'Number of expected sub-headings is wrong for heading { template_header_name } ' ) logger . info ( f 'Expected { len ( template_sub_headers ) } , got { len ( content_sub_headers ) } ' ) logger . info ( 'Expected headings:' ) for template_header in template_sub_headers : logger . info ( template_header [ 'children' ][ 0 ][ 'text' ] . strip ()) logger . info ( 'Actual headings:' ) for content_heading in content_sub_headers : logger . info ( content_heading [ 'children' ][ 0 ][ 'text' ] . strip ()) return False for ii in range ( len ( template_sub_headers )): status = compare_tree ( template_sub_headers [ ii ], content_sub_headers [ ii ]) if not status : return False return True has_required ( * argv ) \u00a4 For list of object/attrib pairs confirm that the objects have the attrib. Source code in trestle/core/markdown_validator.py def has_required ( * argv ): \"\"\"For list of object/attrib pairs confirm that the objects have the attrib.\"\"\" npairs = len ( argv ) // 2 for i in range ( npairs ): if not argv [ 2 * i + 1 ] in argv [ 2 * i ]: return False return True partition_ast ( content , ref_level = 0 ) \u00a4 Partition AST, recursive function to create a hierarchial tree out of a stream of markdown elements. Markdown elements are typically treated as a flat stream of tokens - which is sufficient for most needs. For this project and understanding of heading hierarchy. Parameters: Name Type Description Default content List[Dict[str, Any]] List of AST parsing elements as from mistune required ref_level int The markdown heading level expected. Set to 0 when starting naively 0 Returns: Type Description Tuple[List[Dict[str, Any]], int] List containing a tree of elements Number of elements parsed in within the sub-list Source code in trestle/core/markdown_validator.py def partition_ast ( content : List [ Dict [ str , Any ]], ref_level : int = 0 ) -> Tuple [ List [ Dict [ str , Any ]], int ]: \"\"\" Partition AST, recursive function to create a hierarchial tree out of a stream of markdown elements. Markdown elements are typically treated as a flat stream of tokens - which is sufficient for most needs. For this project and understanding of heading hierarchy. Args: content: List of AST parsing elements as from mistune ref_level: The markdown heading level expected. Set to 0 when starting naively Returns: List containing a tree of elements Number of elements parsed in within the sub-list \"\"\" new_content = [] ii = 0 while ii < len ( content ): if content [ ii ][ 'type' ] == 'heading' : if content [ ii ][ 'level' ] <= ref_level : break if ii + 1 == len ( content ): new_content . append ( content [ ii ]) ii = ii + 1 break else : sub_content , jj = partition_ast ( content [ ii + 1 :], content [ ii ][ 'level' ]) fixed_header = content [ ii ] fixed_header [ 'children' ] . extend ( sub_content ) new_content . append ( fixed_header ) ii = ii + jj + 1 else : new_content . append ( content [ ii ]) ii = ii + 1 return new_content , ii handler: python","title":"markdown_validator"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator","text":"Markdown validator - provides functionality for operating on markdown files including template validation.","title":"markdown_validator"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator","text":"Markdown validator to meet conformance expectations.","title":"MarkdownValidator"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator.__init__","text":"Initialize markdown validator. Parameters: Name Type Description Default template_path Path path to markdown template. required yaml_header_validate bool whether to validate a yaml header for conformance or not required yaml_only_validate bool whether to validate only the yaml header required strict_heading_validate Optional[str] Whether a heading, provided in the template, is to have line-by-line matching. None Source code in trestle/core/markdown_validator.py def __init__ ( self , template_path : pathlib . Path , yaml_header_validate : bool , yaml_only_validate : bool , strict_heading_validate : Optional [ str ] = None , relative_to : Optional [ pathlib . Path ] = None ) -> None : \"\"\" Initialize markdown validator. Args: template_path: path to markdown template. yaml_header_validate: whether to validate a yaml header for conformance or not yaml_only_validate: whether to validate only the yaml header strict_heading_validate: Whether a heading, provided in the template, is to have line-by-line matching. \"\"\" self . _yaml_header_validate = yaml_header_validate self . _yaml_only_validate = yaml_only_validate self . template_path = template_path if relative_to : self . rel = relative_to else : self . rel = pathlib . Path ( '/' ) . resolve () if not self . template_path . is_file (): logger . error ( f 'Provided template { self . template_path } is not a file' ) raise err . TrestleError ( f 'Unable to find markdown template { self . template_path } ' ) template_header , template_parse = self . load_markdown_parsetree ( self . template_path ) if template_header == {} and ( self . _yaml_only_validate or self . _yaml_header_validate ): raise err . TrestleError ( f 'Expected yaml header for markdown template where none exists { self . template_path } ' ) self . _template_header = template_header self . _template_parse = template_parse self . _strict_heading_validate = strict_heading_validate self . template_tree , _ = partition_ast ( self . _template_parse ) self . w_template_tree = self . wrap_content ( self . template_tree )","title":"__init__()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator.clean_content","text":"Clean a set of content for measurement of header cleanliness. Parameters: Name Type Description Default parse_tree Dict[str, Any] AST parse normalized into a hierarchial tree. required Returns: Type Description List[str] List of strings for each line of paragraph content. Exceptions: Type Description TrestleError when unhandled object types are present. Assumptions Multiple paragraphs no sub-headings tables unhandled Source code in trestle/core/markdown_validator.py def clean_content ( self , parse_tree : Dict [ str , Any ]) -> List [ str ]: \"\"\" Clean a set of content for measurement of header cleanliness. Args: parse_tree: AST parse normalized into a hierarchial tree. Returns: List of strings for each line of paragraph content. Raises: TrestleError: when unhandled object types are present. Assumptions: - Multiple paragraphs - no sub-headings - tables unhandled \"\"\" items = parse_tree [ 'children' ] clean_text_lines : List [ str ] = [] for index in range ( len ( items )): # first item is the header title text which we will ignore. if index == 0 : continue item = items [ index ] if item [ 'type' ] == 'block_html' : # ignore all block HTML continue elif item [ 'type' ] == 'paragraph' : line_content = '' for child in item [ 'children' ]: if child [ 'type' ] == 'linebreak' : clean_text_lines . extend ( line_content . splitlines ()) line_content = '' elif 'html' in child [ 'type' ]: # ignore HTML comment presuming a commment continue elif 'strong' in child [ 'type' ]: line_content = line_content + child [ 'children' ][ 0 ][ 'text' ] elif 'text' in child [ 'type' ]: line_content = line_content + child [ 'text' ] else : msg = f 'Unexpected element type { item [ \"type\" ] } when flattening a governed header.' logger . error ( msg ) raise err . TrestleError ( msg ) # handle EoParagraph condition clean_text_lines . extend ( line_content . splitlines ()) else : msg = f 'Unexpected element type { item [ \"type\" ] } when flattening a governed header.' logger . error ( msg ) raise err . TrestleError ( msg ) return clean_text_lines","title":"clean_content()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator.compare_keys","text":"Compare a template dictionary against a candidate as to whether key structure is maintained. Parameters: Name Type Description Default template Dict[str, Any] Template dict which is used as a model of key-value pairs required candidate Dict[str, Any] Candidate dictionary to be measured required Returns: Type Description bool Whether or not the the candidate matches the template keys. Source code in trestle/core/markdown_validator.py @classmethod def compare_keys ( cls , template : Dict [ str , Any ], candidate : Dict [ str , Any ]) -> bool : \"\"\" Compare a template dictionary against a candidate as to whether key structure is maintained. Args: template: Template dict which is used as a model of key-value pairs candidate: Candidate dictionary to be measured Returns: Whether or not the the candidate matches the template keys. \"\"\" if len ( template . keys ()) != len ( candidate . keys ()): return False for key in template . keys (): if key in candidate . keys (): if type ( template [ key ]) == dict : if type ( candidate [ key ]) == dict : status = cls . compare_keys ( template [ key ], candidate [ key ]) if not status : return status else : return False else : return False return True","title":"compare_keys()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator.load_markdown_parsetree","text":"Load markdown file including yaml frontmatter. Parameters: Name Type Description Default path Path File system path of the markdown. required Returns: Type Description Tuple[Dict[str, Any], List[Dict[str, Any]]] Yaml header which has been parsed or an empty dict. List of AST tokens in the flat structure provided by mistune. Source code in trestle/core/markdown_validator.py @classmethod def load_markdown_parsetree ( cls , path : pathlib . Path ) -> Tuple [ Dict [ str , Any ], List [ Dict [ str , Any ]]]: \"\"\" Load markdown file including yaml frontmatter. Args: path: File system path of the markdown. Returns: Yaml header which has been parsed or an empty dict. List of AST tokens in the flat structure provided by mistune. \"\"\" try : content = path . open ( 'r' , encoding = const . FILE_ENCODING ) . read () except UnicodeDecodeError as e : logger . error ( 'utf-8 decoding failed.' ) logger . error ( f 'See: { const . WEBSITE_ROOT } /errors/#utf-8-encoding-only' ) logger . debug ( f 'Underlying exception { e } ' ) raise err . TrestleError ( 'Unable to load file due to utf-8 encoding issues.' ) try : fm = frontmatter . loads ( content ) except Exception as e : logger . error ( f 'Error parsing yaml header from file { path } ' ) logger . error ( 'This is most likely due to an incorrect yaml structure.' ) logger . debug ( f 'Underlying error: { str ( e ) } ' ) raise err . TrestleError ( f 'Failure parsing yaml header on file { path } ' ) header_dict = fm . metadata md_no_header = fm . content mistune_ast_parser = mistune . create_markdown ( renderer = mistune . AstRenderer ()) mistune_parse = mistune_ast_parser ( md_no_header ) return header_dict , mistune_parse","title":"load_markdown_parsetree()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator.search_for_heading","text":"Recursively search for a heading within a document and return the children. Parameters: Name Type Description Default candidate_tree Dict[str, Any] An AST parse tree that has been normalized by partition_ast required heading str The string content for a markdown heading. required Returns: Type Description Dict[str, Any] The heading AST token if it exists, or an empty ast token. Source code in trestle/core/markdown_validator.py def search_for_heading ( self , candidate_tree : Dict [ str , Any ], heading : str ) -> Dict [ str , Any ]: \"\"\" Recursively search for a heading within a document and return the children. Args: candidate_tree: An AST parse tree that has been normalized by partition_ast heading: The string content for a markdown heading. Returns: The heading AST token if it exists, or an empty ast token. \"\"\" answer = {} for candidate in candidate_tree [ 'children' ]: if candidate [ 'type' ] == 'heading' : if candidate [ 'children' ][ 0 ][ 'text' ] . strip () == heading . strip (): answer = candidate break else : answer = self . search_for_heading ( candidate , heading ) return answer","title":"search_for_heading()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator.validate","text":"Run the validation against a candidate file. Parameters: Name Type Description Default candidate Path The path to a candidate markdown file to be validated. required Returns: Type Description bool Whether or not the validation passes. Source code in trestle/core/markdown_validator.py def validate ( self , candidate : pathlib . Path ) -> bool : \"\"\" Run the validation against a candidate file. Args: candidate: The path to a candidate markdown file to be validated. Returns: Whether or not the validation passes. \"\"\" header_content , mistune_parse_content = self . load_markdown_parsetree ( candidate ) if self . _yaml_header_validate or self . _yaml_only_validate : header_status = self . compare_keys ( self . _template_header , header_content ) if not header_status : logger . info ( f 'YAML header mismatch between template { self . template_path } and instance { candidate } ' ) return False if self . _yaml_only_validate : return True candidate_tree , _ = partition_ast ( mistune_parse_content ) w_candidate_tree = self . wrap_content ( candidate_tree ) if self . _strict_heading_validate is not None : status = self . _template_heading_validate ( self . w_template_tree , w_candidate_tree , self . _strict_heading_validate ) if not status : logger . error ( f 'Heading { self . _strict_heading_validate } did not meet templating requirements.' ) return False return compare_tree ( self . w_template_tree , w_candidate_tree )","title":"validate()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.MarkdownValidator.wrap_content","text":"Wrap an array of list into a pseudo-top level element to make it easier to handle. Warning: Not designed for rendering as it will produce extra text Parameters: Name Type Description Default original List[Dict[str, Any]] List of AST parse elements, likely normalized into a tree required Returns: Type Description Dict[str, Any] One pseudo element to make it easier to parse with a consistent name. Source code in trestle/core/markdown_validator.py @classmethod def wrap_content ( cls , original : List [ Dict [ str , Any ]]) -> Dict [ str , Any ]: \"\"\" Wrap an array of list into a pseudo-top level element to make it easier to handle. Warning: Not designed for rendering as it will produce extra text args: original: List of AST parse elements, likely normalized into a tree Returns: One pseudo element to make it easier to parse with a consistent name. \"\"\" structure = { 'type' : 'heading' , 'level' : 0 , 'children' : [{ 'type' : 'text' , 'text' : 'wrapping header' }]} structure [ 'children' ] . extend ( original ) return structure","title":"wrap_content()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.compare_tree","text":"Compare whether a content parse tree is a superset of the template tree. The fundamental assumption here is anchored on the nesting of markdown headings. Assumptions: - Users of a template cannot create headers at the same level as a template only below that level. - Template levels cannot be changed. - Headers are the only element measured in the template. Parameters: Name Type Description Default template Dict[str, Any] The dictionary containing a hierarchy where all keys are enforced. required content Dict[str, Any] The dictionary to be measured: required Returns: Type Description bool Whether the content conforms to the template expectations. Source code in trestle/core/markdown_validator.py def compare_tree ( template : Dict [ str , Any ], content : Dict [ str , Any ]) -> bool : \"\"\" Compare whether a content parse tree is a superset of the template tree. The fundamental assumption here is anchored on the nesting of markdown headings. Assumptions: - Users of a template cannot create headers at the same level as a template only below that level. - Template levels cannot be changed. - Headers are the only element measured in the template. Args: template: The dictionary containing a hierarchy where all keys are enforced. content: The dictionary to be measured: Returns: Whether the content conforms to the template expectations. \"\"\" # TODO: Add logging statements to this context. if not ( template [ 'type' ] == 'heading' ): # It's okay as we should not be here: return True logger . debug ( 'In compare tree' ) if not has_required ( template , 'level' , template [ 'children' ][ 0 ], 'text' ): logger . error ( 'In compare tree template does not have expected structure' ) return False if not has_required ( content , 'level' , content [ 'children' ][ 0 ], 'text' ): logger . error ( 'In compare tree content does not have expected structure' ) return False template_heading_level = template [ 'level' ] template_header_name = template [ 'children' ][ 0 ][ 'text' ] . strip () content_heading_level = content [ 'level' ] content_header_name = content [ 'children' ][ 0 ][ 'text' ] . strip () if not template_heading_level == content_heading_level : logger . error ( 'Unexpected trestle error in parsing markdown.' ) return False # ESCAPE title if required if not ( template_header_name . strip ()[ 0 ] == const . HEADER_L_ESCAPE and template_header_name . strip ()[ - 1 ] == const . HEADER_R_ESCAPE ): if not template_header_name == content_header_name : logger . info ( f 'Markdown templating failed due to mismatch between expected heading { template_header_name } and current heading { content_header_name } .' # noqa: E501 ) return False template_sub_headers = [] content_sub_headers = [] for ii in range ( len ( template [ 'children' ])): if template [ 'children' ][ ii ] . get ( 'type' ) == 'heading' : template_sub_headers . append ( template [ 'children' ][ ii ]) # IF there is no template headers we are good if len ( template_sub_headers ) == 0 : return True for ii in range ( len ( content [ 'children' ])): if content [ 'children' ][ ii ] . get ( 'type' ) == 'heading' : content_sub_headers . append ( content [ 'children' ][ ii ]) if not len ( template_sub_headers ) == len ( content_sub_headers ): # Deal with condition where extra headings are at a lower level than the first heading. logger . info ( f 'Number of expected sub-headings is wrong for heading { template_header_name } ' ) logger . info ( f 'Expected { len ( template_sub_headers ) } , got { len ( content_sub_headers ) } ' ) logger . info ( 'Expected headings:' ) for template_header in template_sub_headers : logger . info ( template_header [ 'children' ][ 0 ][ 'text' ] . strip ()) logger . info ( 'Actual headings:' ) for content_heading in content_sub_headers : logger . info ( content_heading [ 'children' ][ 0 ][ 'text' ] . strip ()) return False for ii in range ( len ( template_sub_headers )): status = compare_tree ( template_sub_headers [ ii ], content_sub_headers [ ii ]) if not status : return False return True","title":"compare_tree()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.has_required","text":"For list of object/attrib pairs confirm that the objects have the attrib. Source code in trestle/core/markdown_validator.py def has_required ( * argv ): \"\"\"For list of object/attrib pairs confirm that the objects have the attrib.\"\"\" npairs = len ( argv ) // 2 for i in range ( npairs ): if not argv [ 2 * i + 1 ] in argv [ 2 * i ]: return False return True","title":"has_required()"},{"location":"api_reference/trestle.core.markdown_validator/#trestle.core.markdown_validator.partition_ast","text":"Partition AST, recursive function to create a hierarchial tree out of a stream of markdown elements. Markdown elements are typically treated as a flat stream of tokens - which is sufficient for most needs. For this project and understanding of heading hierarchy. Parameters: Name Type Description Default content List[Dict[str, Any]] List of AST parsing elements as from mistune required ref_level int The markdown heading level expected. Set to 0 when starting naively 0 Returns: Type Description Tuple[List[Dict[str, Any]], int] List containing a tree of elements Number of elements parsed in within the sub-list Source code in trestle/core/markdown_validator.py def partition_ast ( content : List [ Dict [ str , Any ]], ref_level : int = 0 ) -> Tuple [ List [ Dict [ str , Any ]], int ]: \"\"\" Partition AST, recursive function to create a hierarchial tree out of a stream of markdown elements. Markdown elements are typically treated as a flat stream of tokens - which is sufficient for most needs. For this project and understanding of heading hierarchy. Args: content: List of AST parsing elements as from mistune ref_level: The markdown heading level expected. Set to 0 when starting naively Returns: List containing a tree of elements Number of elements parsed in within the sub-list \"\"\" new_content = [] ii = 0 while ii < len ( content ): if content [ ii ][ 'type' ] == 'heading' : if content [ ii ][ 'level' ] <= ref_level : break if ii + 1 == len ( content ): new_content . append ( content [ ii ]) ii = ii + 1 break else : sub_content , jj = partition_ast ( content [ ii + 1 :], content [ ii ][ 'level' ]) fixed_header = content [ ii ] fixed_header [ 'children' ] . extend ( sub_content ) new_content . append ( fixed_header ) ii = ii + jj + 1 else : new_content . append ( content [ ii ]) ii = ii + 1 return new_content , ii handler: python","title":"partition_ast()"},{"location":"api_reference/trestle.core.models.actions/","text":"trestle.core.models.actions \u00a4 Action wrapper of a command. logger \u00a4 Classes \u00a4 Action ( ABC ) \u00a4 Action wrapper of a command. Methods \u00a4 __eq__ ( self , other ) special \u00a4 Check that two actions are equal. Source code in trestle/core/models/actions.py def __eq__ ( self , other : object ) -> bool : \"\"\"Check that two actions are equal.\"\"\" if not isinstance ( other , Action ): return False if self . get_type () is not other . get_type (): return False is_eq = self . __dict__ == other . __dict__ return is_eq __init__ ( self , action_type , has_rollback ) special \u00a4 Initialize an base action. Source code in trestle/core/models/actions.py def __init__ ( self , action_type : ActionType , has_rollback : bool ) -> None : \"\"\"Initialize an base action.\"\"\" self . _type : ActionType = action_type self . _has_rollback : bool = has_rollback # child class must set this flag once it executes self . _has_executed = False execute ( self ) \u00a4 Execute the action. Source code in trestle/core/models/actions.py @abstractmethod def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" get_type ( self ) \u00a4 Return the action type. Source code in trestle/core/models/actions.py def get_type ( self ) -> ActionType : \"\"\"Return the action type.\"\"\" return self . _type has_executed ( self ) \u00a4 Return if the action has been executed. Source code in trestle/core/models/actions.py def has_executed ( self ) -> bool : \"\"\"Return if the action has been executed.\"\"\" return self . _has_executed has_rollback ( self ) \u00a4 Return if rollback of the action is possible. Source code in trestle/core/models/actions.py def has_rollback ( self ) -> bool : \"\"\"Return if rollback of the action is possible.\"\"\" return self . _has_rollback rollback ( self ) \u00a4 Rollback the action. Source code in trestle/core/models/actions.py @abstractmethod def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" to_string ( self ) \u00a4 Return a string representation. Source code in trestle/core/models/actions.py def to_string ( self ) -> str : \"\"\"Return a string representation.\"\"\" return self . __str__ () ActionType ( Enum ) \u00a4 Action type enum for different action type. File system related actions have code like 1 Model processing related actions have code like 2 CREATE_PATH \u00a4 REMOVE \u00a4 REMOVE_PATH \u00a4 UPDATE \u00a4 WRITE \u00a4 CreatePathAction ( Action ) \u00a4 Create a file or directory path. Methods \u00a4 __init__ ( self , sub_path , clear_content = False ) special \u00a4 Initialize a create path action. It creates all the missing directories in the path. If it is a file, then it also creates an empty file with the name provided Parameters: Name Type Description Default sub_path Path this is the desired file or directory path that needs to be created under the project root required Source code in trestle/core/models/actions.py def __init__ ( self , sub_path : pathlib . Path , clear_content : bool = False ) -> None : \"\"\"Initialize a create path action. It creates all the missing directories in the path. If it is a file, then it also creates an empty file with the name provided Arguments: sub_path: this is the desired file or directory path that needs to be created under the project root \"\"\" sub_path = sub_path . resolve () self . _trestle_project_root = fs . get_trestle_project_root ( sub_path ) if self . _trestle_project_root is None : raise TrestleError ( f 'Sub path \" { sub_path } \" should be child of a valid trestle project' ) self . _sub_path = sub_path self . _created_paths : List [ pathlib . Path ] = [] # variables for handling with file content self . _clear_content = clear_content self . _old_file_content = None super () . __init__ ( ActionType . CREATE_PATH , True ) __str__ ( self ) special \u00a4 Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } { self . _sub_path } ' execute ( self ) \u00a4 Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" # find the start of the sub_path relative to trestle project root cur_index = len ( self . _trestle_project_root . parts ) # loop through the sub_path parts and create as necessary cur_path = self . _trestle_project_root while cur_index < len ( self . _sub_path . parts ): part = self . _sub_path . parts [ cur_index ] # create a path relative to the current # it starts with the project root, so we shall always create # sub directories or files relative to the project root cur_path = cur_path / part # create the sub_path file or directory if it does not exists already if cur_path . suffix != '' : # suffix will denote a file if not cur_path . exists (): # create file cur_path . touch () # add in the list for rollback self . _created_paths . append ( cur_path ) elif self . _clear_content : # read file content for rollback with open ( cur_path , 'r+' , encoding = const . FILE_ENCODING ) as fp : # read all content self . _old_file_content = fp . read () # clear file content fp . truncate ( 0 ) else : if not cur_path . exists (): # create directory cur_path . mkdir () # add in the list for rollback self . _created_paths . append ( cur_path ) # move to the next part of the sub_path parts cur_index = cur_index + 1 self . _mark_executed () get_created_paths ( self ) \u00a4 Get the list of paths that were created after being executed. Source code in trestle/core/models/actions.py def get_created_paths ( self ) -> List [ pathlib . Path ]: \"\"\"Get the list of paths that were created after being executed.\"\"\" return self . _created_paths get_trestle_project_root ( self ) \u00a4 Return the trestle project root path. Source code in trestle/core/models/actions.py def get_trestle_project_root ( self ) -> pathlib . Path : \"\"\"Return the trestle project root path.\"\"\" return self . _trestle_project_root rollback ( self ) \u00a4 Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if self . has_executed (): if len ( self . _created_paths ) > 0 : for cur_path in reversed ( self . _created_paths ): if cur_path . exists (): if cur_path . is_file (): cur_path . unlink () elif cur_path . is_dir (): cur_path . rmdir () self . _created_paths . clear () # rollback the content of a file if required # we should be here only if there were no path created and the sub_part already existed elif self . _sub_path . is_file () and self . _sub_path . exists () and self . _clear_content is True : if self . _old_file_content is not None : with open ( self . _sub_path , 'w' , encoding = const . FILE_ENCODING ) as fp : fp . write ( self . _old_file_content ) self . _mark_rollback () RemoveAction ( Action ) \u00a4 Remove sub element at the element path in the source element. Methods \u00a4 __init__ ( self , src_element , sub_element_path ) special \u00a4 Initialize a remove element action. Source code in trestle/core/models/actions.py def __init__ ( self , src_element : Element , sub_element_path : ElementPath ) -> None : \"\"\"Initialize a remove element action.\"\"\" super () . __init__ ( ActionType . REMOVE , True ) self . _src_element : Element = src_element self . _sub_element_path : ElementPath = sub_element_path self . _prev_sub_element = None __str__ ( self ) special \u00a4 Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } element at { self . _sub_element_path } from { self . _src_element } ' execute ( self ) \u00a4 Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" self . _prev_sub_element = self . _src_element . get_at ( self . _sub_element_path ) self . _src_element . set_at ( self . _sub_element_path , None ) self . _mark_executed () rollback ( self ) \u00a4 Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if self . has_executed (): self . _src_element . set_at ( self . _sub_element_path , self . _prev_sub_element ) self . _mark_rollback () RemovePathAction ( Action ) \u00a4 Remove a file or directory path. Methods \u00a4 __init__ ( self , sub_path ) special \u00a4 Initialize a remove path action. It removes the file or directory recursively into trash. Parameters: Name Type Description Default sub_path Path this is the desired file or directory path that needs to be removed under the project root required Source code in trestle/core/models/actions.py def __init__ ( self , sub_path : pathlib . Path ) -> None : \"\"\"Initialize a remove path action. It removes the file or directory recursively into trash. Arguments: sub_path: this is the desired file or directory path that needs to be removed under the project root \"\"\" if not isinstance ( sub_path , pathlib . Path ): raise TrestleError ( 'Sub path must be of type pathlib.Path' ) self . _trestle_project_root = fs . get_trestle_project_root ( sub_path ) if self . _trestle_project_root is None : raise TrestleError ( f 'Sub path \" { sub_path } \" should be child of a valid trestle project.' ) self . _sub_path = sub_path super () . __init__ ( ActionType . REMOVE_PATH , True ) __str__ ( self ) special \u00a4 Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } { self . _sub_path } ' execute ( self ) \u00a4 Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" if not self . _sub_path . exists (): logger . debug ( f 'path { self . _sub_path } does not exist in remove path action - ignoring.' ) # silently ignore until plan/execute made robust # raise TrestleError(f'Path \"{self._sub_path}\" does not exist in remove path action') # noqa: E800 trash . store ( self . _sub_path , True ) self . _mark_executed () get_trestle_project_root ( self ) \u00a4 Return the trestle project root path. Source code in trestle/core/models/actions.py def get_trestle_project_root ( self ) -> Optional [ pathlib . Path ]: \"\"\"Return the trestle project root path.\"\"\" return self . _trestle_project_root rollback ( self ) \u00a4 Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if self . has_executed (): trash_path = trash . to_trash_path ( self . _sub_path ) if trash_path is None or trash_path . exists () is False : # FIXME suppress file contents not found message til trash/rollback behavior is fixed. # issue 412 return trash . recover ( self . _sub_path , True ) self . _mark_rollback () UpdateAction ( Action ) \u00a4 Update element at the element path in the destination element with the source element. Methods \u00a4 __init__ ( self , sub_element , dest_element , sub_element_path ) special \u00a4 Initialize an add element action. Sub element can be OscalBaseModel, Element, list or None Source code in trestle/core/models/actions.py def __init__ ( self , sub_element , dest_element : Element , sub_element_path : ElementPath ) -> None : \"\"\"Initialize an add element action. Sub element can be OscalBaseModel, Element, list or None \"\"\" super () . __init__ ( ActionType . UPDATE , True ) if not Element . is_allowed_sub_element_type ( sub_element ): allowed_types = Element . get_allowed_sub_element_types () raise TrestleError ( f 'Sub element \" { sub_element . __class__ } is not a allowed sub element types in \" { allowed_types } \"' ) self . _sub_element = sub_element self . _dest_element : Element = dest_element self . _sub_element_path : ElementPath = sub_element_path self . _prev_sub_element = None __str__ ( self ) special \u00a4 Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } { self . _model_obj . __class__ } to { self . _dest_element } at { self . _sub_element_path } ' execute ( self ) \u00a4 Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" self . _prev_sub_element = self . _dest_element . get_at ( self . _sub_element_path ) self . _dest_element . set_at ( self . _sub_element_path , self . _sub_element ) self . _mark_executed () rollback ( self ) \u00a4 Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if self . has_executed (): self . _dest_element . set_at ( self . _sub_element_path , self . _prev_sub_element ) self . _mark_rollback () WriteAction ( Action ) \u00a4 Write the element to a destination stream. Methods \u00a4 __init__ ( self , writer , element , content_type ) special \u00a4 Initialize an write file action. Source code in trestle/core/models/actions.py def __init__ ( self , writer : Optional [ io . TextIOWrapper ], element : Element , content_type : FileContentType ) -> None : \"\"\"Initialize an write file action.\"\"\" super () . __init__ ( ActionType . WRITE , True ) if writer is not None and not issubclass ( io . TextIOWrapper , writer . __class__ ): raise TrestleError ( f 'Writer must be of io.TextIOWrapper, given f { writer . __class__ } ' ) self . _writer : Optional [ io . TextIOWrapper ] = writer self . _element : Element = element self . _content_type : FileContentType = content_type self . _lastStreamPos = - 1 if self . _writer is not None : self . _lastStreamPos = self . _writer . tell () __str__ ( self ) special \u00a4 Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . get_type () } { self . _element } ' execute ( self ) \u00a4 Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" if self . _element is None : raise TrestleError ( 'Element is empty and cannot write' ) if not self . _is_writer_valid (): raise TrestleError ( 'Writer is not provided or closed' ) self . _writer . write ( self . _encode ()) self . _writer . flush () self . _mark_executed () rollback ( self ) \u00a4 Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if not self . _is_writer_valid (): raise TrestleError ( 'Writer is not provided or closed' ) if self . _lastStreamPos < 0 : raise TrestleError ( 'Last stream position is not available to rollback to' ) if self . has_executed (): self . _writer . seek ( self . _lastStreamPos ) self . _writer . truncate () self . _mark_rollback () WriteFileAction ( WriteAction ) \u00a4 Write the element to a destination file. Methods \u00a4 __init__ ( self , file_path , element , content_type ) special \u00a4 Initialize a write file action. It opens the file in append mode. Therefore the file needs to exist even if it is a new file. Source code in trestle/core/models/actions.py def __init__ ( self , file_path : pathlib . Path , element : Element , content_type : FileContentType ) -> None : \"\"\"Initialize a write file action. It opens the file in append mode. Therefore the file needs to exist even if it is a new file. \"\"\" if not isinstance ( file_path , pathlib . Path ): raise TrestleError ( 'file_path should be of type pathlib.Path' ) inferred_content_type = FileContentType . to_content_type ( file_path . suffix ) if inferred_content_type != content_type : raise TrestleError ( f 'Mismatch between stated content type { content_type . name } and file path { file_path } ' ) self . _file_path = file_path # initialize super without writer for now # Note, execute and rollback sets the writer as appropriate super () . __init__ ( None , element , content_type ) __str__ ( self ) special \u00a4 Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } { self . _element } to \" { self . _file_path } \"' execute ( self ) \u00a4 Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" if not self . _file_path . exists (): raise TrestleError ( f 'File at { self . _file_path } does not exist' ) with open ( self . _file_path , 'a+' , encoding = const . FILE_ENCODING ) as writer : if self . _lastStreamPos < 0 : self . _lastStreamPos = writer . tell () else : writer . seek ( self . _lastStreamPos ) self . _writer = writer super () . execute () rollback ( self ) \u00a4 Execute the rollback action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Execute the rollback action.\"\"\" if not self . _file_path . exists (): raise TrestleError ( f 'File at { self . _file_path } does not exist' ) with open ( self . _file_path , 'a+' , encoding = const . FILE_ENCODING ) as writer : self . _writer = writer super () . rollback () handler: python","title":"actions"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions","text":"Action wrapper of a command.","title":"actions"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action","text":"Action wrapper of a command.","title":"Action"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action.__eq__","text":"Check that two actions are equal. Source code in trestle/core/models/actions.py def __eq__ ( self , other : object ) -> bool : \"\"\"Check that two actions are equal.\"\"\" if not isinstance ( other , Action ): return False if self . get_type () is not other . get_type (): return False is_eq = self . __dict__ == other . __dict__ return is_eq","title":"__eq__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action.__init__","text":"Initialize an base action. Source code in trestle/core/models/actions.py def __init__ ( self , action_type : ActionType , has_rollback : bool ) -> None : \"\"\"Initialize an base action.\"\"\" self . _type : ActionType = action_type self . _has_rollback : bool = has_rollback # child class must set this flag once it executes self . _has_executed = False","title":"__init__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action.execute","text":"Execute the action. Source code in trestle/core/models/actions.py @abstractmethod def execute ( self ) -> None : \"\"\"Execute the action.\"\"\"","title":"execute()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action.get_type","text":"Return the action type. Source code in trestle/core/models/actions.py def get_type ( self ) -> ActionType : \"\"\"Return the action type.\"\"\" return self . _type","title":"get_type()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action.has_executed","text":"Return if the action has been executed. Source code in trestle/core/models/actions.py def has_executed ( self ) -> bool : \"\"\"Return if the action has been executed.\"\"\" return self . _has_executed","title":"has_executed()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action.has_rollback","text":"Return if rollback of the action is possible. Source code in trestle/core/models/actions.py def has_rollback ( self ) -> bool : \"\"\"Return if rollback of the action is possible.\"\"\" return self . _has_rollback","title":"has_rollback()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action.rollback","text":"Rollback the action. Source code in trestle/core/models/actions.py @abstractmethod def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\"","title":"rollback()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.Action.to_string","text":"Return a string representation. Source code in trestle/core/models/actions.py def to_string ( self ) -> str : \"\"\"Return a string representation.\"\"\" return self . __str__ ()","title":"to_string()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.ActionType","text":"Action type enum for different action type. File system related actions have code like 1 Model processing related actions have code like 2","title":"ActionType"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.ActionType.CREATE_PATH","text":"","title":"CREATE_PATH"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.ActionType.REMOVE","text":"","title":"REMOVE"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.ActionType.REMOVE_PATH","text":"","title":"REMOVE_PATH"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.ActionType.UPDATE","text":"","title":"UPDATE"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.ActionType.WRITE","text":"","title":"WRITE"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.CreatePathAction","text":"Create a file or directory path.","title":"CreatePathAction"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.CreatePathAction-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.CreatePathAction.__init__","text":"Initialize a create path action. It creates all the missing directories in the path. If it is a file, then it also creates an empty file with the name provided Parameters: Name Type Description Default sub_path Path this is the desired file or directory path that needs to be created under the project root required Source code in trestle/core/models/actions.py def __init__ ( self , sub_path : pathlib . Path , clear_content : bool = False ) -> None : \"\"\"Initialize a create path action. It creates all the missing directories in the path. If it is a file, then it also creates an empty file with the name provided Arguments: sub_path: this is the desired file or directory path that needs to be created under the project root \"\"\" sub_path = sub_path . resolve () self . _trestle_project_root = fs . get_trestle_project_root ( sub_path ) if self . _trestle_project_root is None : raise TrestleError ( f 'Sub path \" { sub_path } \" should be child of a valid trestle project' ) self . _sub_path = sub_path self . _created_paths : List [ pathlib . Path ] = [] # variables for handling with file content self . _clear_content = clear_content self . _old_file_content = None super () . __init__ ( ActionType . CREATE_PATH , True )","title":"__init__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.CreatePathAction.__str__","text":"Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } { self . _sub_path } '","title":"__str__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.CreatePathAction.execute","text":"Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" # find the start of the sub_path relative to trestle project root cur_index = len ( self . _trestle_project_root . parts ) # loop through the sub_path parts and create as necessary cur_path = self . _trestle_project_root while cur_index < len ( self . _sub_path . parts ): part = self . _sub_path . parts [ cur_index ] # create a path relative to the current # it starts with the project root, so we shall always create # sub directories or files relative to the project root cur_path = cur_path / part # create the sub_path file or directory if it does not exists already if cur_path . suffix != '' : # suffix will denote a file if not cur_path . exists (): # create file cur_path . touch () # add in the list for rollback self . _created_paths . append ( cur_path ) elif self . _clear_content : # read file content for rollback with open ( cur_path , 'r+' , encoding = const . FILE_ENCODING ) as fp : # read all content self . _old_file_content = fp . read () # clear file content fp . truncate ( 0 ) else : if not cur_path . exists (): # create directory cur_path . mkdir () # add in the list for rollback self . _created_paths . append ( cur_path ) # move to the next part of the sub_path parts cur_index = cur_index + 1 self . _mark_executed ()","title":"execute()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.CreatePathAction.get_created_paths","text":"Get the list of paths that were created after being executed. Source code in trestle/core/models/actions.py def get_created_paths ( self ) -> List [ pathlib . Path ]: \"\"\"Get the list of paths that were created after being executed.\"\"\" return self . _created_paths","title":"get_created_paths()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.CreatePathAction.get_trestle_project_root","text":"Return the trestle project root path. Source code in trestle/core/models/actions.py def get_trestle_project_root ( self ) -> pathlib . Path : \"\"\"Return the trestle project root path.\"\"\" return self . _trestle_project_root","title":"get_trestle_project_root()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.CreatePathAction.rollback","text":"Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if self . has_executed (): if len ( self . _created_paths ) > 0 : for cur_path in reversed ( self . _created_paths ): if cur_path . exists (): if cur_path . is_file (): cur_path . unlink () elif cur_path . is_dir (): cur_path . rmdir () self . _created_paths . clear () # rollback the content of a file if required # we should be here only if there were no path created and the sub_part already existed elif self . _sub_path . is_file () and self . _sub_path . exists () and self . _clear_content is True : if self . _old_file_content is not None : with open ( self . _sub_path , 'w' , encoding = const . FILE_ENCODING ) as fp : fp . write ( self . _old_file_content ) self . _mark_rollback ()","title":"rollback()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemoveAction","text":"Remove sub element at the element path in the source element.","title":"RemoveAction"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemoveAction-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemoveAction.__init__","text":"Initialize a remove element action. Source code in trestle/core/models/actions.py def __init__ ( self , src_element : Element , sub_element_path : ElementPath ) -> None : \"\"\"Initialize a remove element action.\"\"\" super () . __init__ ( ActionType . REMOVE , True ) self . _src_element : Element = src_element self . _sub_element_path : ElementPath = sub_element_path self . _prev_sub_element = None","title":"__init__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemoveAction.__str__","text":"Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } element at { self . _sub_element_path } from { self . _src_element } '","title":"__str__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemoveAction.execute","text":"Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" self . _prev_sub_element = self . _src_element . get_at ( self . _sub_element_path ) self . _src_element . set_at ( self . _sub_element_path , None ) self . _mark_executed ()","title":"execute()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemoveAction.rollback","text":"Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if self . has_executed (): self . _src_element . set_at ( self . _sub_element_path , self . _prev_sub_element ) self . _mark_rollback ()","title":"rollback()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemovePathAction","text":"Remove a file or directory path.","title":"RemovePathAction"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemovePathAction-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemovePathAction.__init__","text":"Initialize a remove path action. It removes the file or directory recursively into trash. Parameters: Name Type Description Default sub_path Path this is the desired file or directory path that needs to be removed under the project root required Source code in trestle/core/models/actions.py def __init__ ( self , sub_path : pathlib . Path ) -> None : \"\"\"Initialize a remove path action. It removes the file or directory recursively into trash. Arguments: sub_path: this is the desired file or directory path that needs to be removed under the project root \"\"\" if not isinstance ( sub_path , pathlib . Path ): raise TrestleError ( 'Sub path must be of type pathlib.Path' ) self . _trestle_project_root = fs . get_trestle_project_root ( sub_path ) if self . _trestle_project_root is None : raise TrestleError ( f 'Sub path \" { sub_path } \" should be child of a valid trestle project.' ) self . _sub_path = sub_path super () . __init__ ( ActionType . REMOVE_PATH , True )","title":"__init__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemovePathAction.__str__","text":"Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } { self . _sub_path } '","title":"__str__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemovePathAction.execute","text":"Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" if not self . _sub_path . exists (): logger . debug ( f 'path { self . _sub_path } does not exist in remove path action - ignoring.' ) # silently ignore until plan/execute made robust # raise TrestleError(f'Path \"{self._sub_path}\" does not exist in remove path action') # noqa: E800 trash . store ( self . _sub_path , True ) self . _mark_executed ()","title":"execute()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemovePathAction.get_trestle_project_root","text":"Return the trestle project root path. Source code in trestle/core/models/actions.py def get_trestle_project_root ( self ) -> Optional [ pathlib . Path ]: \"\"\"Return the trestle project root path.\"\"\" return self . _trestle_project_root","title":"get_trestle_project_root()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.RemovePathAction.rollback","text":"Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if self . has_executed (): trash_path = trash . to_trash_path ( self . _sub_path ) if trash_path is None or trash_path . exists () is False : # FIXME suppress file contents not found message til trash/rollback behavior is fixed. # issue 412 return trash . recover ( self . _sub_path , True ) self . _mark_rollback ()","title":"rollback()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.UpdateAction","text":"Update element at the element path in the destination element with the source element.","title":"UpdateAction"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.UpdateAction-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.UpdateAction.__init__","text":"Initialize an add element action. Sub element can be OscalBaseModel, Element, list or None Source code in trestle/core/models/actions.py def __init__ ( self , sub_element , dest_element : Element , sub_element_path : ElementPath ) -> None : \"\"\"Initialize an add element action. Sub element can be OscalBaseModel, Element, list or None \"\"\" super () . __init__ ( ActionType . UPDATE , True ) if not Element . is_allowed_sub_element_type ( sub_element ): allowed_types = Element . get_allowed_sub_element_types () raise TrestleError ( f 'Sub element \" { sub_element . __class__ } is not a allowed sub element types in \" { allowed_types } \"' ) self . _sub_element = sub_element self . _dest_element : Element = dest_element self . _sub_element_path : ElementPath = sub_element_path self . _prev_sub_element = None","title":"__init__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.UpdateAction.__str__","text":"Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } { self . _model_obj . __class__ } to { self . _dest_element } at { self . _sub_element_path } '","title":"__str__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.UpdateAction.execute","text":"Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" self . _prev_sub_element = self . _dest_element . get_at ( self . _sub_element_path ) self . _dest_element . set_at ( self . _sub_element_path , self . _sub_element ) self . _mark_executed ()","title":"execute()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.UpdateAction.rollback","text":"Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if self . has_executed (): self . _dest_element . set_at ( self . _sub_element_path , self . _prev_sub_element ) self . _mark_rollback ()","title":"rollback()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteAction","text":"Write the element to a destination stream.","title":"WriteAction"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteAction-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteAction.__init__","text":"Initialize an write file action. Source code in trestle/core/models/actions.py def __init__ ( self , writer : Optional [ io . TextIOWrapper ], element : Element , content_type : FileContentType ) -> None : \"\"\"Initialize an write file action.\"\"\" super () . __init__ ( ActionType . WRITE , True ) if writer is not None and not issubclass ( io . TextIOWrapper , writer . __class__ ): raise TrestleError ( f 'Writer must be of io.TextIOWrapper, given f { writer . __class__ } ' ) self . _writer : Optional [ io . TextIOWrapper ] = writer self . _element : Element = element self . _content_type : FileContentType = content_type self . _lastStreamPos = - 1 if self . _writer is not None : self . _lastStreamPos = self . _writer . tell ()","title":"__init__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteAction.__str__","text":"Return string representation. Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . get_type () } { self . _element } '","title":"__str__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteAction.execute","text":"Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" if self . _element is None : raise TrestleError ( 'Element is empty and cannot write' ) if not self . _is_writer_valid (): raise TrestleError ( 'Writer is not provided or closed' ) self . _writer . write ( self . _encode ()) self . _writer . flush () self . _mark_executed ()","title":"execute()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteAction.rollback","text":"Rollback the action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Rollback the action.\"\"\" if not self . _is_writer_valid (): raise TrestleError ( 'Writer is not provided or closed' ) if self . _lastStreamPos < 0 : raise TrestleError ( 'Last stream position is not available to rollback to' ) if self . has_executed (): self . _writer . seek ( self . _lastStreamPos ) self . _writer . truncate () self . _mark_rollback ()","title":"rollback()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteFileAction","text":"Write the element to a destination file.","title":"WriteFileAction"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteFileAction-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteFileAction.__init__","text":"Initialize a write file action. It opens the file in append mode. Therefore the file needs to exist even if it is a new file. Source code in trestle/core/models/actions.py def __init__ ( self , file_path : pathlib . Path , element : Element , content_type : FileContentType ) -> None : \"\"\"Initialize a write file action. It opens the file in append mode. Therefore the file needs to exist even if it is a new file. \"\"\" if not isinstance ( file_path , pathlib . Path ): raise TrestleError ( 'file_path should be of type pathlib.Path' ) inferred_content_type = FileContentType . to_content_type ( file_path . suffix ) if inferred_content_type != content_type : raise TrestleError ( f 'Mismatch between stated content type { content_type . name } and file path { file_path } ' ) self . _file_path = file_path # initialize super without writer for now # Note, execute and rollback sets the writer as appropriate super () . __init__ ( None , element , content_type )","title":"__init__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteFileAction.__str__","text":"Source code in trestle/core/models/actions.py def __str__ ( self ) -> str : \"\"\"Return string representation.\"\"\" return f ' { self . _type } { self . _element } to \" { self . _file_path } \"'","title":"__str__()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteFileAction.execute","text":"Execute the action. Source code in trestle/core/models/actions.py def execute ( self ) -> None : \"\"\"Execute the action.\"\"\" if not self . _file_path . exists (): raise TrestleError ( f 'File at { self . _file_path } does not exist' ) with open ( self . _file_path , 'a+' , encoding = const . FILE_ENCODING ) as writer : if self . _lastStreamPos < 0 : self . _lastStreamPos = writer . tell () else : writer . seek ( self . _lastStreamPos ) self . _writer = writer super () . execute ()","title":"execute()"},{"location":"api_reference/trestle.core.models.actions/#trestle.core.models.actions.WriteFileAction.rollback","text":"Execute the rollback action. Source code in trestle/core/models/actions.py def rollback ( self ) -> None : \"\"\"Execute the rollback action.\"\"\" if not self . _file_path . exists (): raise TrestleError ( f 'File at { self . _file_path } does not exist' ) with open ( self . _file_path , 'a+' , encoding = const . FILE_ENCODING ) as writer : self . _writer = writer super () . rollback () handler: python","title":"rollback()"},{"location":"api_reference/trestle.core.models.elements/","text":"trestle.core.models.elements \u00a4 Element wrapper of an OSCAL model element. logger \u00a4 Classes \u00a4 Element \u00a4 Element wrapper of an OSCAL model. IGNORE_WRAPPER_ALIAS \u00a4 Methods \u00a4 __eq__ ( self , other ) special \u00a4 Check that two elements are equal. Source code in trestle/core/models/elements.py def __eq__ ( self , other : object ) -> bool : \"\"\"Check that two elements are equal.\"\"\" if not isinstance ( other , Element ): return False return self . get () == other . get () __init__ ( self , elem , wrapper_alias = '' ) special \u00a4 Initialize an element wrapper. wrapper_alias is the OSCAL alias for the given elem object and used for seriazation in to_json() method. For example, - List[Catalog.Group] element should have wrapper alias 'groups' - Catalog element should have wrapper alias 'catalog' wrapper_alias is deduced for collection type object if wrapper_alias = IGNORE_WRAPPER_ALIAS, then it is ignored and assumed to be json-serializable during to_json() Source code in trestle/core/models/elements.py def __init__ ( self , elem : OscalBaseModel , wrapper_alias : str = '' ): \"\"\"Initialize an element wrapper. wrapper_alias is the OSCAL alias for the given elem object and used for seriazation in to_json() method. For example, - List[Catalog.Group] element should have wrapper alias 'groups' - Catalog element should have wrapper alias 'catalog' wrapper_alias is deduced for collection type object if wrapper_alias = IGNORE_WRAPPER_ALIAS, then it is ignored and assumed to be json-serializable during to_json() \"\"\" # FIXME: There are instances where elem is a list. self . _elem : OscalBaseModel = elem if wrapper_alias == '' and wrapper_alias != self . IGNORE_WRAPPER_ALIAS : class_name = elem . __class__ . __name__ if utils . is_collection_field_type ( elem ): class_name = self . _get_singular_classname () if class_name is None : raise TrestleError ( f 'wrapper_alias not found for a collection type object: { elem . __class__ . __name__ } ' ) wrapper_alias = utils . classname_to_alias ( class_name , 'json' ) self . _wrapper_alias : str = wrapper_alias __str__ ( self ) special \u00a4 Return string representation of element. Source code in trestle/core/models/elements.py def __str__ ( self ) -> str : \"\"\"Return string representation of element.\"\"\" return type ( self . _elem ) . __name__ get ( self ) \u00a4 Return the model object. Source code in trestle/core/models/elements.py def get ( self ) -> OscalBaseModel : \"\"\"Return the model object.\"\"\" return self . _elem get_allowed_sub_element_types () classmethod \u00a4 Get the list of allowed sub element types. Source code in trestle/core/models/elements.py @classmethod def get_allowed_sub_element_types ( cls ) -> List [ str ]: \"\"\"Get the list of allowed sub element types.\"\"\" return cls . _allowed_sub_element_types get_at ( self , element_path = None , check_parent = True ) \u00a4 Get the element at the specified element path. it will return the sub-model object at the path. Sub-model object can be of type OscalBaseModel or List Source code in trestle/core/models/elements.py def get_at ( self , element_path : ElementPath = None , check_parent : bool = True ) -> Union [ OscalBaseModel , List [ OscalBaseModel ]]: \"\"\"Get the element at the specified element path. it will return the sub-model object at the path. Sub-model object can be of type OscalBaseModel or List \"\"\" if element_path is None : return self . _elem # find the root-model and element path parts _ , path_parts = self . _split_element_path ( element_path ) # TODO validate that self._elem is of same type as root_model # initialize the starting element for search elm = self . _elem if hasattr ( elm , '__root__' ) and ( isinstance ( elm . __root__ , dict ) or isinstance ( elm . __root__ , list )): elm = elm . __root__ # if parent exists and does not end with wildcard, use the parent as the starting element for search if check_parent and element_path . get_parent ( ) is not None and element_path . get_parent () . get_last () != ElementPath . WILDCARD : elm_at = self . get_at ( element_path . get_parent ()) if elm_at is None : raise TrestleNotFoundError ( f 'Invalid parent path { element_path . get_parent () } ' ) elm = elm_at # return the sub-element at the specified path for attr in path_parts : if elm is None : break # process for wildcard and array indexes if attr == ElementPath . WILDCARD : break elif attr . isnumeric (): if isinstance ( elm , list ): elm = elm [ int ( attr )] else : # index to a non list type should return None return None else : elm = elm . get_field_value_by_alias ( attr ) return elm get_preceding_element ( self , element_path ) \u00a4 Get the preceding element in the path. Source code in trestle/core/models/elements.py def get_preceding_element ( self , element_path : ElementPath ) -> Optional [ OscalBaseModel ]: \"\"\"Get the preceding element in the path.\"\"\" preceding_path = element_path . get_preceding_path () preceding_elm : Optional [ OscalBaseModel ] = self . get_at ( preceding_path ) return preceding_elm get_sub_element_class ( parent_elm , sub_element_name ) classmethod \u00a4 Get the class of the sub-element. Source code in trestle/core/models/elements.py @classmethod def get_sub_element_class ( cls , parent_elm : OscalBaseModel , sub_element_name : str ): \"\"\"Get the class of the sub-element.\"\"\" sub_element_class = parent_elm . __fields__ [ sub_element_name ] . outer_type_ return sub_element_class is_allowed_sub_element_type ( elm ) classmethod \u00a4 Check if is of allowed sub element type. Source code in trestle/core/models/elements.py @classmethod def is_allowed_sub_element_type ( cls , elm ) -> bool : \"\"\"Check if is of allowed sub element type.\"\"\" # FIXME: The following logic does not use the _allowed_sub_element_types being defined for the class if ( isinstance ( elm , Element ) or isinstance ( elm , OscalBaseModel ) or isinstance ( elm , list ) or isinstance ( elm , dict ) or elm is None ): return True return False set_at ( self , element_path , sub_element ) \u00a4 Set a sub_element at the path in the current element. Sub element can be Element, OscalBaseModel, list or None type It returns the element itself so that chaining operation can be done such as element.set_at(path, sub-element).get() . Source code in trestle/core/models/elements.py def set_at ( self , element_path : ElementPath , sub_element : OscalBaseModel ) -> 'Element' : \"\"\"Set a sub_element at the path in the current element. Sub element can be Element, OscalBaseModel, list or None type It returns the element itself so that chaining operation can be done such as `element.set_at(path, sub-element).get()`. \"\"\" # convert the element_path to ElementPath if needed if isinstance ( element_path , str ): element_path = ElementPath ( element_path ) # convert sub-element to OscalBaseModel if needed model_obj = self . _get_sub_element_obj ( sub_element ) # find the root-model and element path parts _ , path_parts = self . _split_element_path ( element_path ) # TODO validate that self._elem is of same type as root_model # If wildcard is present, check the input type and determine the preceding element if element_path . get_last () == ElementPath . WILDCARD : # validate the type is either list or OscalBaseModel if not isinstance ( model_obj , list ) and not isinstance ( model_obj , OscalBaseModel ): raise TrestleError ( f 'The model object needs to be a List or OscalBaseModel for path with \" { ElementPath . WILDCARD } \"' ) # since wildcard * is there, we need to go one level up for preceding element in the path preceding_elm = self . get_preceding_element ( element_path . get_preceding_path ()) else : # get the preceding element in the path preceding_elm = self . get_preceding_element ( element_path ) if preceding_elm is None : raise TrestleError ( f 'Invalid sub element path { element_path } with no valid preceding element' ) # check if it can be a valid sub_element of the parent sub_element_name = element_path . get_element_name () . replace ( '-' , '_' ) if hasattr ( preceding_elm , sub_element_name ) is False : raise TrestleError ( f 'Element \" { preceding_elm . __class__ } \" does not have the attribute \" { sub_element_name } \" ' f 'of type \" { model_obj . __class__ } \"' ) # set the sub-element try : setattr ( preceding_elm , sub_element_name , model_obj ) except ValidationError : sub_element_class = self . get_sub_element_class ( preceding_elm , sub_element_name ) raise TrestleError ( f 'Validation error: { sub_element_name } is expected to be \" { sub_element_class } \", ' f 'but found \" { model_obj . __class__ } \"' ) # returning self will allow to do 'chaining' of commands after set return self to_json ( self ) \u00a4 Convert into JSON string. Source code in trestle/core/models/elements.py def to_json ( self ) -> str : \"\"\"Convert into JSON string.\"\"\" if self . _wrapper_alias == self . IGNORE_WRAPPER_ALIAS : json_data = json . dumps ( self . _elem , sort_keys = False , indent = 4 , ensure_ascii = False ) else : # Note before trying to edit this # This transient model allows self._elem not be an OscalBaseModel (e.g. a DICT or LIST) # typing need to be clarified. dynamic_passer = {} dynamic_passer [ 'TransientField' ] = ( self . _elem . __class__ , Field ( self , alias = self . _wrapper_alias )) wrapper_model = create_model ( 'TransientModel' , __base__ = OscalBaseModel , ** dynamic_passer ) # type: ignore wrapped_model = wrapper_model ( ** { self . _wrapper_alias : self . _elem }) json_data = wrapped_model . json ( exclude_none = True , by_alias = True , indent = 4 , ensure_ascii = False ) return json_data to_yaml ( self ) \u00a4 Convert into YAML string. Source code in trestle/core/models/elements.py def to_yaml ( self ) -> str : \"\"\"Convert into YAML string.\"\"\" yaml = YAML ( typ = 'safe' ) yaml . default_flow_style = False from io import StringIO string_stream = StringIO () yaml . dump ( yaml . load ( self . to_json ()), string_stream ) yaml_data = string_stream . getvalue () string_stream . close () return yaml_data ElementPath \u00a4 Element path wrapper of an element. This only allows a single wildcard '*' at the end to denote elements of an array or dict PATH_SEPARATOR : str \u00a4 WILDCARD : str \u00a4 Methods \u00a4 __eq__ ( self , other ) special \u00a4 Override equality method. Source code in trestle/core/models/elements.py def __eq__ ( self , other ) -> bool : \"\"\"Override equality method.\"\"\" if not isinstance ( other , ElementPath ): return False return self . get () == other . get () __init__ ( self , element_path , parent_path = None ) special \u00a4 Initialize an element wrapper. It assumes the element path contains oscal field alias with hyphens only Source code in trestle/core/models/elements.py def __init__ ( self , element_path : str , parent_path : Optional [ 'ElementPath' ] = None ) -> None : \"\"\"Initialize an element wrapper. It assumes the element path contains oscal field alias with hyphens only \"\"\" self . _parent_path = parent_path self . _path : List [ str ] = self . _parse ( element_path ) # Initialize private variables for lazy processing and caching self . _element_name : Optional [ str ] = None self . _preceding_path : Optional [ 'ElementPath' ] = None __str__ ( self ) special \u00a4 Return string representation of element path. Source code in trestle/core/models/elements.py def __str__ ( self ) -> str : \"\"\"Return string representation of element path.\"\"\" return self . to_string () find_last_file_in_path ( self , content_type , model_dir ) \u00a4 Find the last (nearest) existing file in the element path leading to this element. Source code in trestle/core/models/elements.py def find_last_file_in_path ( self , content_type : FileContentType , model_dir : pathlib . Path ) -> pathlib . Path : \"\"\"Find the last (nearest) existing file in the element path leading to this element.\"\"\" # model dir is the top level dir for this model, e.g. catalogs/mycat path = model_dir extension = FileContentType . to_file_extension ( content_type ) good_model : pathlib . Path = None for element in self . _path : if element == '*' : break model_file = ( path / element ) . with_suffix ( extension ) if not model_file . exists (): break path = path / element good_model = model_file return good_model get ( self ) \u00a4 Return the path parts as a list. Source code in trestle/core/models/elements.py def get ( self ) -> List [ str ]: \"\"\"Return the path parts as a list.\"\"\" return self . _path get_element_name ( self ) \u00a4 Return the element alias name from the path. Essentailly this the last part of the element path Source code in trestle/core/models/elements.py def get_element_name ( self ) -> str : \"\"\"Return the element alias name from the path. Essentailly this the last part of the element path \"\"\" # if it is available then return otherwise compute if self . _element_name is None : element_name = self . get_last () if element_name == self . WILDCARD : element_name = self . _path [ - 2 ] self . _element_name = element_name return self . _element_name get_first ( self ) \u00a4 Return the first part of the path. Source code in trestle/core/models/elements.py def get_first ( self ) -> str : \"\"\"Return the first part of the path.\"\"\" return self . _path [ 0 ] get_full ( self ) \u00a4 Return the full path including parent path parts as a dot separated str. Source code in trestle/core/models/elements.py def get_full ( self ) -> str : \"\"\"Return the full path including parent path parts as a dot separated str.\"\"\" all_parts = self . get_full_path_parts () return self . PATH_SEPARATOR . join ( all_parts ) get_full_path_parts ( self ) \u00a4 Get full path parts to the element including parent path parts as a list. Source code in trestle/core/models/elements.py def get_full_path_parts ( self ) -> List [ str ]: \"\"\"Get full path parts to the element including parent path parts as a list.\"\"\" path_parts = [] if self . get_parent () is not None : parent_path_parts = self . get_parent () . get_full_path_parts () path_parts . extend ( parent_path_parts ) path_parts . extend ( self . get ()[ 1 :]) # don't use the first part else : path_parts . extend ( self . get ()) return path_parts get_last ( self ) \u00a4 Return the last part of the path. Source code in trestle/core/models/elements.py def get_last ( self ) -> str : \"\"\"Return the last part of the path.\"\"\" return self . _path [ - 1 ] get_obm_wrapped_type ( self , root_model = None , use_parent = False ) \u00a4 Get the type of the element. If the type is a collection wrap the type in an OscalBaseModel as a root element. This should principally be used for validating content. Parameters: Name Type Description Default root_model Optional[Type[Any]] An OscalBaseModel Type from which to base the approach on. None use_parent bool Whether or not to normalise the full path across parent ElementPaths, default to not. False Returns: Type Description Type[trestle.core.base_model.OscalBaseModel] The type of the model whether wrapped or not as an OscalBaseModel. Source code in trestle/core/models/elements.py def get_obm_wrapped_type ( self , root_model : Optional [ Type [ Any ]] = None , use_parent : bool = False ) -> Type [ OscalBaseModel ]: \"\"\"Get the type of the element. If the type is a collection wrap the type in an OscalBaseModel as a __root__ element. This should principally be used for validating content. Args: root_model: An OscalBaseModel Type from which to base the approach on. use_parent: Whether or not to normalise the full path across parent ElementPaths, default to not. Returns: The type of the model whether wrapped or not as an OscalBaseModel. \"\"\" base_type = self . get_type ( root_model , use_parent ) # Get an outer model type. origin_type = utils . get_origin ( base_type ) if origin_type in [ list , dict ]: # OSCAL does not support collections of collections directly. We should not hit this scenario collection_name = self . get_last () if collection_name == self . WILDCARD : logger . critical ( 'Unexpected error in type system when inferring type from element path.' ) logger . critical ( 'Please report this issue.' ) raise TrestleError ( 'Unknown error inferring type from element path.' ) # Final path must be the alias new_base_type = create_model ( utils . alias_to_classname ( collection_name , 'json' ), __base__ = OscalBaseModel , __root__ = ( base_type , ... ) ) return new_base_type return base_type get_parent ( self ) \u00a4 Return the parent path. It can be None or a valid ElementPath Source code in trestle/core/models/elements.py def get_parent ( self ) -> 'ElementPath' : \"\"\"Return the parent path. It can be None or a valid ElementPath \"\"\" return self . _parent_path get_preceding_path ( self ) \u00a4 Return the element path to the preceding element in the path. Source code in trestle/core/models/elements.py def get_preceding_path ( self ) -> 'ElementPath' : \"\"\"Return the element path to the preceding element in the path.\"\"\" # if it is available then return otherwise compute if self . _preceding_path is None : path_parts = self . get_full_path_parts () if len ( path_parts ) > 1 : prec_path_parts = path_parts [: - 1 ] self . _preceding_path = ElementPath ( self . PATH_SEPARATOR . join ( prec_path_parts )) return self . _preceding_path get_type ( self , root_model = None , use_parent = False ) \u00a4 Get the type of an element. If possible the model type will be derived from one of the top level models, otherwise a 'root model' can be passed for situations where this is not possible. This type path should NOT have wild cards in it. It may have* indices. Valid Examples: catalog.metadata catalog.groups catalog.groups.group catalog catalog.groups.0 Parameters: Name Type Description Default root_model Optional[Type[Any]] An OscalBaseModel Type from which to base the approach on. None use_parent bool Whether or not to normalise the full path across parent ElementPaths, default to not. False Returns: Type Description Type[Any] The type of the model whether or not it is an OscalBaseModel or not. Source code in trestle/core/models/elements.py def get_type ( self , root_model : Optional [ Type [ Any ]] = None , use_parent : bool = False ) -> Type [ Any ]: \"\"\"Get the type of an element. If possible the model type will be derived from one of the top level models, otherwise a 'root model' can be passed for situations where this is not possible. This type path should *NOT* have wild cards in it. It *may* have* indices. Valid Examples: catalog.metadata catalog.groups catalog.groups.group catalog catalog.groups.0 Args: root_model: An OscalBaseModel Type from which to base the approach on. use_parent: Whether or not to normalise the full path across parent ElementPaths, default to not. Returns: The type of the model whether or not it is an OscalBaseModel or not. \"\"\" effective_path : List [ str ] if use_parent : effective_path = self . get_full_path_parts () else : effective_path = self . _path if not root_model : # lookup root model from top level oscal models or fail prev_model = self . _top_level_type_lookup ( effective_path [ 0 ]) else : prev_model = root_model if len ( effective_path ) == 1 : return prev_model # variables # for current_element_str in effective_path[1:]: for current_element_str in effective_path [ 1 :]: # Determine if the parent model is a collection. if utils . is_collection_field_type ( prev_model ): inner_model = utils . get_inner_type ( prev_model ) inner_class_name = utils . classname_to_alias ( inner_model . __name__ , 'json' ) # Assert that the current name fits an expected form. # Valid choices here are *, integer (for arrays) and the inner model alias if ( inner_class_name == current_element_str or current_element_str == self . WILDCARD or current_element_str . isnumeric ()): prev_model = inner_model else : raise TrestleError ( 'Unexpected key in element path when finding type.' ) else : # Indices, * are not allowed on non-collection types if current_element_str == self . WILDCARD : logger . error ( 'Cannot get the type of an element path where wild cards do not match a ' ) raise TrestleError ( 'Wild card in unexpected position when trying to find class type.' + ' Element path type lookup can only occur where a single type can be identified.' ) prev_model = prev_model . alias_to_field_map ()[ current_element_str ] . outer_type_ return prev_model is_multipart ( self ) \u00a4 Assert whether or not an element path is multiple parts. Originally element paths had to have multiple paths. This provides a check for higher level code that still has that requirement. Single part: catalog control assessment-results Multipart catalog.metadata catalog.controls.control Source code in trestle/core/models/elements.py def is_multipart ( self ) -> bool : \"\"\"Assert whether or not an element path is multiple parts. Originally element paths had to have multiple paths. This provides a check for higher level code that still has that requirement. Single part: catalog control assessment-results Multipart: catalog.metadata catalog.controls.control \"\"\" return len ( self . _path ) > 1 make_absolute ( self , model_dir , reference_dir ) \u00a4 Make the parts absolute from the top model dir. Source code in trestle/core/models/elements.py def make_absolute ( self , model_dir : pathlib . Path , reference_dir : pathlib . Path ): \"\"\"Make the parts absolute from the top model dir.\"\"\" # Match the current relative element path to the model directory and reference directory # If the element path is partial and doesn't connect to the top of the model, # need to deduce absolute element path from the model_dir and the reference directory # that corresponds to the root of the element path # if first element is a model type it is already absolute if self . _path [ 0 ] not in const . MODEL_TYPE_LIST : rel_path = list ( reference_dir . relative_to ( model_dir ) . parts ) rel_path . extend ( self . _path ) self . _path = rel_path make_relative ( self , model_relative_path ) \u00a4 Make the parts relative to the model path. Source code in trestle/core/models/elements.py def make_relative ( self , model_relative_path : pathlib . Path ) -> int : \"\"\"Make the parts relative to the model path.\"\"\" # The element path should currently be absolute # The model relative path should be relative to the top leve of the model # Change the element path to be relative to the model being loaded # Returns 0 on success and 1 on failur rel_path_parts = model_relative_path . parts [: - 1 ] n_rel_parts = len ( rel_path_parts ) # the element path can't start above the model path if n_rel_parts >= len ( self . _path ): return 1 # confirm the leading parts match for ii in range ( n_rel_parts ): if rel_path_parts [ ii ] != self . _path [ ii ]: return 1 # chop off the leading parts of the absolute element path self . _path = self . _path [ n_rel_parts :] return 0 to_file_path ( self , content_type = None , root_dir = '' ) \u00a4 Convert to a file or directory path for the element path. if content_type is not passed, it will return a path for directory Source code in trestle/core/models/elements.py def to_file_path ( self , content_type : FileContentType = None , root_dir : str = '' ) -> pathlib . Path : \"\"\"Convert to a file or directory path for the element path. if content_type is not passed, it will return a path for directory \"\"\" path_parts = self . get () # skip wildcard if path_parts [ - 1 ] == ElementPath . WILDCARD : path_parts = path_parts [: - 1 ] if root_dir != '' : path_parts [ 0 ] = root_dir path_str = '/' . join ( path_parts ) # add file extension if required # this will be omitted if it is a dir path if content_type is not None : file_extension = FileContentType . to_file_extension ( content_type ) path_str = path_str + file_extension # prepare the path file_path : pathlib . Path = pathlib . Path ( f './ { path_str } ' ) return file_path to_root_path ( self , content_type = None ) \u00a4 Convert to a file path for the element root. Source code in trestle/core/models/elements.py def to_root_path ( self , content_type : FileContentType = None ) -> pathlib . Path : \"\"\"Convert to a file path for the element root.\"\"\" path_str = f './ { self . get_first () } ' if content_type is not None : file_extension = FileContentType . to_file_extension ( content_type ) path_str = path_str + file_extension file_path : pathlib . Path = pathlib . Path ( path_str ) return file_path to_string ( self ) \u00a4 Return the path parts as a dot-separated string. Source code in trestle/core/models/elements.py def to_string ( self ) -> str : \"\"\"Return the path parts as a dot-separated string.\"\"\" return self . PATH_SEPARATOR . join ( self . get ()) handler: python","title":"elements"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements","text":"Element wrapper of an OSCAL model element.","title":"elements"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element","text":"Element wrapper of an OSCAL model.","title":"Element"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.IGNORE_WRAPPER_ALIAS","text":"","title":"IGNORE_WRAPPER_ALIAS"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.__eq__","text":"Check that two elements are equal. Source code in trestle/core/models/elements.py def __eq__ ( self , other : object ) -> bool : \"\"\"Check that two elements are equal.\"\"\" if not isinstance ( other , Element ): return False return self . get () == other . get ()","title":"__eq__()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.__init__","text":"Initialize an element wrapper. wrapper_alias is the OSCAL alias for the given elem object and used for seriazation in to_json() method. For example, - List[Catalog.Group] element should have wrapper alias 'groups' - Catalog element should have wrapper alias 'catalog' wrapper_alias is deduced for collection type object if wrapper_alias = IGNORE_WRAPPER_ALIAS, then it is ignored and assumed to be json-serializable during to_json() Source code in trestle/core/models/elements.py def __init__ ( self , elem : OscalBaseModel , wrapper_alias : str = '' ): \"\"\"Initialize an element wrapper. wrapper_alias is the OSCAL alias for the given elem object and used for seriazation in to_json() method. For example, - List[Catalog.Group] element should have wrapper alias 'groups' - Catalog element should have wrapper alias 'catalog' wrapper_alias is deduced for collection type object if wrapper_alias = IGNORE_WRAPPER_ALIAS, then it is ignored and assumed to be json-serializable during to_json() \"\"\" # FIXME: There are instances where elem is a list. self . _elem : OscalBaseModel = elem if wrapper_alias == '' and wrapper_alias != self . IGNORE_WRAPPER_ALIAS : class_name = elem . __class__ . __name__ if utils . is_collection_field_type ( elem ): class_name = self . _get_singular_classname () if class_name is None : raise TrestleError ( f 'wrapper_alias not found for a collection type object: { elem . __class__ . __name__ } ' ) wrapper_alias = utils . classname_to_alias ( class_name , 'json' ) self . _wrapper_alias : str = wrapper_alias","title":"__init__()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.__str__","text":"Return string representation of element. Source code in trestle/core/models/elements.py def __str__ ( self ) -> str : \"\"\"Return string representation of element.\"\"\" return type ( self . _elem ) . __name__","title":"__str__()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.get","text":"Return the model object. Source code in trestle/core/models/elements.py def get ( self ) -> OscalBaseModel : \"\"\"Return the model object.\"\"\" return self . _elem","title":"get()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.get_allowed_sub_element_types","text":"Get the list of allowed sub element types. Source code in trestle/core/models/elements.py @classmethod def get_allowed_sub_element_types ( cls ) -> List [ str ]: \"\"\"Get the list of allowed sub element types.\"\"\" return cls . _allowed_sub_element_types","title":"get_allowed_sub_element_types()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.get_at","text":"Get the element at the specified element path. it will return the sub-model object at the path. Sub-model object can be of type OscalBaseModel or List Source code in trestle/core/models/elements.py def get_at ( self , element_path : ElementPath = None , check_parent : bool = True ) -> Union [ OscalBaseModel , List [ OscalBaseModel ]]: \"\"\"Get the element at the specified element path. it will return the sub-model object at the path. Sub-model object can be of type OscalBaseModel or List \"\"\" if element_path is None : return self . _elem # find the root-model and element path parts _ , path_parts = self . _split_element_path ( element_path ) # TODO validate that self._elem is of same type as root_model # initialize the starting element for search elm = self . _elem if hasattr ( elm , '__root__' ) and ( isinstance ( elm . __root__ , dict ) or isinstance ( elm . __root__ , list )): elm = elm . __root__ # if parent exists and does not end with wildcard, use the parent as the starting element for search if check_parent and element_path . get_parent ( ) is not None and element_path . get_parent () . get_last () != ElementPath . WILDCARD : elm_at = self . get_at ( element_path . get_parent ()) if elm_at is None : raise TrestleNotFoundError ( f 'Invalid parent path { element_path . get_parent () } ' ) elm = elm_at # return the sub-element at the specified path for attr in path_parts : if elm is None : break # process for wildcard and array indexes if attr == ElementPath . WILDCARD : break elif attr . isnumeric (): if isinstance ( elm , list ): elm = elm [ int ( attr )] else : # index to a non list type should return None return None else : elm = elm . get_field_value_by_alias ( attr ) return elm","title":"get_at()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.get_preceding_element","text":"Get the preceding element in the path. Source code in trestle/core/models/elements.py def get_preceding_element ( self , element_path : ElementPath ) -> Optional [ OscalBaseModel ]: \"\"\"Get the preceding element in the path.\"\"\" preceding_path = element_path . get_preceding_path () preceding_elm : Optional [ OscalBaseModel ] = self . get_at ( preceding_path ) return preceding_elm","title":"get_preceding_element()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.get_sub_element_class","text":"Get the class of the sub-element. Source code in trestle/core/models/elements.py @classmethod def get_sub_element_class ( cls , parent_elm : OscalBaseModel , sub_element_name : str ): \"\"\"Get the class of the sub-element.\"\"\" sub_element_class = parent_elm . __fields__ [ sub_element_name ] . outer_type_ return sub_element_class","title":"get_sub_element_class()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.is_allowed_sub_element_type","text":"Check if is of allowed sub element type. Source code in trestle/core/models/elements.py @classmethod def is_allowed_sub_element_type ( cls , elm ) -> bool : \"\"\"Check if is of allowed sub element type.\"\"\" # FIXME: The following logic does not use the _allowed_sub_element_types being defined for the class if ( isinstance ( elm , Element ) or isinstance ( elm , OscalBaseModel ) or isinstance ( elm , list ) or isinstance ( elm , dict ) or elm is None ): return True return False","title":"is_allowed_sub_element_type()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.set_at","text":"Set a sub_element at the path in the current element. Sub element can be Element, OscalBaseModel, list or None type It returns the element itself so that chaining operation can be done such as element.set_at(path, sub-element).get() . Source code in trestle/core/models/elements.py def set_at ( self , element_path : ElementPath , sub_element : OscalBaseModel ) -> 'Element' : \"\"\"Set a sub_element at the path in the current element. Sub element can be Element, OscalBaseModel, list or None type It returns the element itself so that chaining operation can be done such as `element.set_at(path, sub-element).get()`. \"\"\" # convert the element_path to ElementPath if needed if isinstance ( element_path , str ): element_path = ElementPath ( element_path ) # convert sub-element to OscalBaseModel if needed model_obj = self . _get_sub_element_obj ( sub_element ) # find the root-model and element path parts _ , path_parts = self . _split_element_path ( element_path ) # TODO validate that self._elem is of same type as root_model # If wildcard is present, check the input type and determine the preceding element if element_path . get_last () == ElementPath . WILDCARD : # validate the type is either list or OscalBaseModel if not isinstance ( model_obj , list ) and not isinstance ( model_obj , OscalBaseModel ): raise TrestleError ( f 'The model object needs to be a List or OscalBaseModel for path with \" { ElementPath . WILDCARD } \"' ) # since wildcard * is there, we need to go one level up for preceding element in the path preceding_elm = self . get_preceding_element ( element_path . get_preceding_path ()) else : # get the preceding element in the path preceding_elm = self . get_preceding_element ( element_path ) if preceding_elm is None : raise TrestleError ( f 'Invalid sub element path { element_path } with no valid preceding element' ) # check if it can be a valid sub_element of the parent sub_element_name = element_path . get_element_name () . replace ( '-' , '_' ) if hasattr ( preceding_elm , sub_element_name ) is False : raise TrestleError ( f 'Element \" { preceding_elm . __class__ } \" does not have the attribute \" { sub_element_name } \" ' f 'of type \" { model_obj . __class__ } \"' ) # set the sub-element try : setattr ( preceding_elm , sub_element_name , model_obj ) except ValidationError : sub_element_class = self . get_sub_element_class ( preceding_elm , sub_element_name ) raise TrestleError ( f 'Validation error: { sub_element_name } is expected to be \" { sub_element_class } \", ' f 'but found \" { model_obj . __class__ } \"' ) # returning self will allow to do 'chaining' of commands after set return self","title":"set_at()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.to_json","text":"Convert into JSON string. Source code in trestle/core/models/elements.py def to_json ( self ) -> str : \"\"\"Convert into JSON string.\"\"\" if self . _wrapper_alias == self . IGNORE_WRAPPER_ALIAS : json_data = json . dumps ( self . _elem , sort_keys = False , indent = 4 , ensure_ascii = False ) else : # Note before trying to edit this # This transient model allows self._elem not be an OscalBaseModel (e.g. a DICT or LIST) # typing need to be clarified. dynamic_passer = {} dynamic_passer [ 'TransientField' ] = ( self . _elem . __class__ , Field ( self , alias = self . _wrapper_alias )) wrapper_model = create_model ( 'TransientModel' , __base__ = OscalBaseModel , ** dynamic_passer ) # type: ignore wrapped_model = wrapper_model ( ** { self . _wrapper_alias : self . _elem }) json_data = wrapped_model . json ( exclude_none = True , by_alias = True , indent = 4 , ensure_ascii = False ) return json_data","title":"to_json()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.Element.to_yaml","text":"Convert into YAML string. Source code in trestle/core/models/elements.py def to_yaml ( self ) -> str : \"\"\"Convert into YAML string.\"\"\" yaml = YAML ( typ = 'safe' ) yaml . default_flow_style = False from io import StringIO string_stream = StringIO () yaml . dump ( yaml . load ( self . to_json ()), string_stream ) yaml_data = string_stream . getvalue () string_stream . close () return yaml_data","title":"to_yaml()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath","text":"Element path wrapper of an element. This only allows a single wildcard '*' at the end to denote elements of an array or dict","title":"ElementPath"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.PATH_SEPARATOR","text":"","title":"PATH_SEPARATOR"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.WILDCARD","text":"","title":"WILDCARD"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.__eq__","text":"Override equality method. Source code in trestle/core/models/elements.py def __eq__ ( self , other ) -> bool : \"\"\"Override equality method.\"\"\" if not isinstance ( other , ElementPath ): return False return self . get () == other . get ()","title":"__eq__()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.__init__","text":"Initialize an element wrapper. It assumes the element path contains oscal field alias with hyphens only Source code in trestle/core/models/elements.py def __init__ ( self , element_path : str , parent_path : Optional [ 'ElementPath' ] = None ) -> None : \"\"\"Initialize an element wrapper. It assumes the element path contains oscal field alias with hyphens only \"\"\" self . _parent_path = parent_path self . _path : List [ str ] = self . _parse ( element_path ) # Initialize private variables for lazy processing and caching self . _element_name : Optional [ str ] = None self . _preceding_path : Optional [ 'ElementPath' ] = None","title":"__init__()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.__str__","text":"Return string representation of element path. Source code in trestle/core/models/elements.py def __str__ ( self ) -> str : \"\"\"Return string representation of element path.\"\"\" return self . to_string ()","title":"__str__()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.find_last_file_in_path","text":"Find the last (nearest) existing file in the element path leading to this element. Source code in trestle/core/models/elements.py def find_last_file_in_path ( self , content_type : FileContentType , model_dir : pathlib . Path ) -> pathlib . Path : \"\"\"Find the last (nearest) existing file in the element path leading to this element.\"\"\" # model dir is the top level dir for this model, e.g. catalogs/mycat path = model_dir extension = FileContentType . to_file_extension ( content_type ) good_model : pathlib . Path = None for element in self . _path : if element == '*' : break model_file = ( path / element ) . with_suffix ( extension ) if not model_file . exists (): break path = path / element good_model = model_file return good_model","title":"find_last_file_in_path()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get","text":"Return the path parts as a list. Source code in trestle/core/models/elements.py def get ( self ) -> List [ str ]: \"\"\"Return the path parts as a list.\"\"\" return self . _path","title":"get()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_element_name","text":"Return the element alias name from the path. Essentailly this the last part of the element path Source code in trestle/core/models/elements.py def get_element_name ( self ) -> str : \"\"\"Return the element alias name from the path. Essentailly this the last part of the element path \"\"\" # if it is available then return otherwise compute if self . _element_name is None : element_name = self . get_last () if element_name == self . WILDCARD : element_name = self . _path [ - 2 ] self . _element_name = element_name return self . _element_name","title":"get_element_name()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_first","text":"Return the first part of the path. Source code in trestle/core/models/elements.py def get_first ( self ) -> str : \"\"\"Return the first part of the path.\"\"\" return self . _path [ 0 ]","title":"get_first()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_full","text":"Return the full path including parent path parts as a dot separated str. Source code in trestle/core/models/elements.py def get_full ( self ) -> str : \"\"\"Return the full path including parent path parts as a dot separated str.\"\"\" all_parts = self . get_full_path_parts () return self . PATH_SEPARATOR . join ( all_parts )","title":"get_full()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_full_path_parts","text":"Get full path parts to the element including parent path parts as a list. Source code in trestle/core/models/elements.py def get_full_path_parts ( self ) -> List [ str ]: \"\"\"Get full path parts to the element including parent path parts as a list.\"\"\" path_parts = [] if self . get_parent () is not None : parent_path_parts = self . get_parent () . get_full_path_parts () path_parts . extend ( parent_path_parts ) path_parts . extend ( self . get ()[ 1 :]) # don't use the first part else : path_parts . extend ( self . get ()) return path_parts","title":"get_full_path_parts()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_last","text":"Return the last part of the path. Source code in trestle/core/models/elements.py def get_last ( self ) -> str : \"\"\"Return the last part of the path.\"\"\" return self . _path [ - 1 ]","title":"get_last()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_obm_wrapped_type","text":"Get the type of the element. If the type is a collection wrap the type in an OscalBaseModel as a root element. This should principally be used for validating content. Parameters: Name Type Description Default root_model Optional[Type[Any]] An OscalBaseModel Type from which to base the approach on. None use_parent bool Whether or not to normalise the full path across parent ElementPaths, default to not. False Returns: Type Description Type[trestle.core.base_model.OscalBaseModel] The type of the model whether wrapped or not as an OscalBaseModel. Source code in trestle/core/models/elements.py def get_obm_wrapped_type ( self , root_model : Optional [ Type [ Any ]] = None , use_parent : bool = False ) -> Type [ OscalBaseModel ]: \"\"\"Get the type of the element. If the type is a collection wrap the type in an OscalBaseModel as a __root__ element. This should principally be used for validating content. Args: root_model: An OscalBaseModel Type from which to base the approach on. use_parent: Whether or not to normalise the full path across parent ElementPaths, default to not. Returns: The type of the model whether wrapped or not as an OscalBaseModel. \"\"\" base_type = self . get_type ( root_model , use_parent ) # Get an outer model type. origin_type = utils . get_origin ( base_type ) if origin_type in [ list , dict ]: # OSCAL does not support collections of collections directly. We should not hit this scenario collection_name = self . get_last () if collection_name == self . WILDCARD : logger . critical ( 'Unexpected error in type system when inferring type from element path.' ) logger . critical ( 'Please report this issue.' ) raise TrestleError ( 'Unknown error inferring type from element path.' ) # Final path must be the alias new_base_type = create_model ( utils . alias_to_classname ( collection_name , 'json' ), __base__ = OscalBaseModel , __root__ = ( base_type , ... ) ) return new_base_type return base_type","title":"get_obm_wrapped_type()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_parent","text":"Return the parent path. It can be None or a valid ElementPath Source code in trestle/core/models/elements.py def get_parent ( self ) -> 'ElementPath' : \"\"\"Return the parent path. It can be None or a valid ElementPath \"\"\" return self . _parent_path","title":"get_parent()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_preceding_path","text":"Return the element path to the preceding element in the path. Source code in trestle/core/models/elements.py def get_preceding_path ( self ) -> 'ElementPath' : \"\"\"Return the element path to the preceding element in the path.\"\"\" # if it is available then return otherwise compute if self . _preceding_path is None : path_parts = self . get_full_path_parts () if len ( path_parts ) > 1 : prec_path_parts = path_parts [: - 1 ] self . _preceding_path = ElementPath ( self . PATH_SEPARATOR . join ( prec_path_parts )) return self . _preceding_path","title":"get_preceding_path()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.get_type","text":"Get the type of an element. If possible the model type will be derived from one of the top level models, otherwise a 'root model' can be passed for situations where this is not possible. This type path should NOT have wild cards in it. It may have* indices. Valid Examples: catalog.metadata catalog.groups catalog.groups.group catalog catalog.groups.0 Parameters: Name Type Description Default root_model Optional[Type[Any]] An OscalBaseModel Type from which to base the approach on. None use_parent bool Whether or not to normalise the full path across parent ElementPaths, default to not. False Returns: Type Description Type[Any] The type of the model whether or not it is an OscalBaseModel or not. Source code in trestle/core/models/elements.py def get_type ( self , root_model : Optional [ Type [ Any ]] = None , use_parent : bool = False ) -> Type [ Any ]: \"\"\"Get the type of an element. If possible the model type will be derived from one of the top level models, otherwise a 'root model' can be passed for situations where this is not possible. This type path should *NOT* have wild cards in it. It *may* have* indices. Valid Examples: catalog.metadata catalog.groups catalog.groups.group catalog catalog.groups.0 Args: root_model: An OscalBaseModel Type from which to base the approach on. use_parent: Whether or not to normalise the full path across parent ElementPaths, default to not. Returns: The type of the model whether or not it is an OscalBaseModel or not. \"\"\" effective_path : List [ str ] if use_parent : effective_path = self . get_full_path_parts () else : effective_path = self . _path if not root_model : # lookup root model from top level oscal models or fail prev_model = self . _top_level_type_lookup ( effective_path [ 0 ]) else : prev_model = root_model if len ( effective_path ) == 1 : return prev_model # variables # for current_element_str in effective_path[1:]: for current_element_str in effective_path [ 1 :]: # Determine if the parent model is a collection. if utils . is_collection_field_type ( prev_model ): inner_model = utils . get_inner_type ( prev_model ) inner_class_name = utils . classname_to_alias ( inner_model . __name__ , 'json' ) # Assert that the current name fits an expected form. # Valid choices here are *, integer (for arrays) and the inner model alias if ( inner_class_name == current_element_str or current_element_str == self . WILDCARD or current_element_str . isnumeric ()): prev_model = inner_model else : raise TrestleError ( 'Unexpected key in element path when finding type.' ) else : # Indices, * are not allowed on non-collection types if current_element_str == self . WILDCARD : logger . error ( 'Cannot get the type of an element path where wild cards do not match a ' ) raise TrestleError ( 'Wild card in unexpected position when trying to find class type.' + ' Element path type lookup can only occur where a single type can be identified.' ) prev_model = prev_model . alias_to_field_map ()[ current_element_str ] . outer_type_ return prev_model","title":"get_type()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.is_multipart","text":"Assert whether or not an element path is multiple parts. Originally element paths had to have multiple paths. This provides a check for higher level code that still has that requirement. Single part: catalog control assessment-results Multipart catalog.metadata catalog.controls.control Source code in trestle/core/models/elements.py def is_multipart ( self ) -> bool : \"\"\"Assert whether or not an element path is multiple parts. Originally element paths had to have multiple paths. This provides a check for higher level code that still has that requirement. Single part: catalog control assessment-results Multipart: catalog.metadata catalog.controls.control \"\"\" return len ( self . _path ) > 1","title":"is_multipart()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.make_absolute","text":"Make the parts absolute from the top model dir. Source code in trestle/core/models/elements.py def make_absolute ( self , model_dir : pathlib . Path , reference_dir : pathlib . Path ): \"\"\"Make the parts absolute from the top model dir.\"\"\" # Match the current relative element path to the model directory and reference directory # If the element path is partial and doesn't connect to the top of the model, # need to deduce absolute element path from the model_dir and the reference directory # that corresponds to the root of the element path # if first element is a model type it is already absolute if self . _path [ 0 ] not in const . MODEL_TYPE_LIST : rel_path = list ( reference_dir . relative_to ( model_dir ) . parts ) rel_path . extend ( self . _path ) self . _path = rel_path","title":"make_absolute()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.make_relative","text":"Make the parts relative to the model path. Source code in trestle/core/models/elements.py def make_relative ( self , model_relative_path : pathlib . Path ) -> int : \"\"\"Make the parts relative to the model path.\"\"\" # The element path should currently be absolute # The model relative path should be relative to the top leve of the model # Change the element path to be relative to the model being loaded # Returns 0 on success and 1 on failur rel_path_parts = model_relative_path . parts [: - 1 ] n_rel_parts = len ( rel_path_parts ) # the element path can't start above the model path if n_rel_parts >= len ( self . _path ): return 1 # confirm the leading parts match for ii in range ( n_rel_parts ): if rel_path_parts [ ii ] != self . _path [ ii ]: return 1 # chop off the leading parts of the absolute element path self . _path = self . _path [ n_rel_parts :] return 0","title":"make_relative()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.to_file_path","text":"Convert to a file or directory path for the element path. if content_type is not passed, it will return a path for directory Source code in trestle/core/models/elements.py def to_file_path ( self , content_type : FileContentType = None , root_dir : str = '' ) -> pathlib . Path : \"\"\"Convert to a file or directory path for the element path. if content_type is not passed, it will return a path for directory \"\"\" path_parts = self . get () # skip wildcard if path_parts [ - 1 ] == ElementPath . WILDCARD : path_parts = path_parts [: - 1 ] if root_dir != '' : path_parts [ 0 ] = root_dir path_str = '/' . join ( path_parts ) # add file extension if required # this will be omitted if it is a dir path if content_type is not None : file_extension = FileContentType . to_file_extension ( content_type ) path_str = path_str + file_extension # prepare the path file_path : pathlib . Path = pathlib . Path ( f './ { path_str } ' ) return file_path","title":"to_file_path()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.to_root_path","text":"Convert to a file path for the element root. Source code in trestle/core/models/elements.py def to_root_path ( self , content_type : FileContentType = None ) -> pathlib . Path : \"\"\"Convert to a file path for the element root.\"\"\" path_str = f './ { self . get_first () } ' if content_type is not None : file_extension = FileContentType . to_file_extension ( content_type ) path_str = path_str + file_extension file_path : pathlib . Path = pathlib . Path ( path_str ) return file_path","title":"to_root_path()"},{"location":"api_reference/trestle.core.models.elements/#trestle.core.models.elements.ElementPath.to_string","text":"Return the path parts as a dot-separated string. Source code in trestle/core/models/elements.py def to_string ( self ) -> str : \"\"\"Return the path parts as a dot-separated string.\"\"\" return self . PATH_SEPARATOR . join ( self . get ()) handler: python","title":"to_string()"},{"location":"api_reference/trestle.core.models.file_content_type/","text":"trestle.core.models.file_content_type \u00a4 Action wrapper of a command. Classes \u00a4 FileContentType ( Enum ) \u00a4 File Content type for read/write. DIRLIKE \u00a4 JSON \u00a4 UNKNOWN \u00a4 YAML \u00a4 handler: python","title":"file_content_type"},{"location":"api_reference/trestle.core.models.file_content_type/#trestle.core.models.file_content_type","text":"Action wrapper of a command.","title":"file_content_type"},{"location":"api_reference/trestle.core.models.file_content_type/#trestle.core.models.file_content_type-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.models.file_content_type/#trestle.core.models.file_content_type.FileContentType","text":"File Content type for read/write.","title":"FileContentType"},{"location":"api_reference/trestle.core.models.file_content_type/#trestle.core.models.file_content_type.FileContentType.DIRLIKE","text":"","title":"DIRLIKE"},{"location":"api_reference/trestle.core.models.file_content_type/#trestle.core.models.file_content_type.FileContentType.JSON","text":"","title":"JSON"},{"location":"api_reference/trestle.core.models.file_content_type/#trestle.core.models.file_content_type.FileContentType.UNKNOWN","text":"","title":"UNKNOWN"},{"location":"api_reference/trestle.core.models.file_content_type/#trestle.core.models.file_content_type.FileContentType.YAML","text":"handler: python","title":"YAML"},{"location":"api_reference/trestle.core.models.interfaces/","text":"trestle.core.models.interfaces \u00a4 Interfaces for use within other trestle functions defined as pydantic data models. Classes \u00a4 OSCALAssembly ( BaseModel ) pydantic-model \u00a4 Data model to represent an assembled set of OSCAL objects. Here the assembly represents the constraints as expected by the current OSCAL schema. At this point in time a 'flat' model has been chosen rather than an tree. catalogs : Dict [ str , trestle . oscal . catalog . Catalog ] pydantic-field \u00a4 components : Dict [ str , trestle . oscal . component . ComponentDefinition ] pydantic-field \u00a4 poam : PlanOfActionAndMilestones pydantic-field \u00a4 profiles : Dict [ str , trestle . oscal . profile . Profile ] pydantic-field \u00a4 sap : AssessmentPlan pydantic-field \u00a4 sar : AssessmentResults pydantic-field \u00a4 ssp : SystemSecurityPlan pydantic-field \u00a4 Classes \u00a4 Config \u00a4 Pydantic config overrides. allow_population_by_field_name \u00a4 extra \u00a4 validate_assignment \u00a4 handler: python","title":"interfaces"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces","text":"Interfaces for use within other trestle functions defined as pydantic data models.","title":"interfaces"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly","text":"Data model to represent an assembled set of OSCAL objects. Here the assembly represents the constraints as expected by the current OSCAL schema. At this point in time a 'flat' model has been chosen rather than an tree.","title":"OSCALAssembly"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly.catalogs","text":"","title":"catalogs"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly.components","text":"","title":"components"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly.poam","text":"","title":"poam"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly.profiles","text":"","title":"profiles"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly.sap","text":"","title":"sap"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly.sar","text":"","title":"sar"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly.ssp","text":"","title":"ssp"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.models.interfaces/#trestle.core.models.interfaces.OSCALAssembly.Config","text":"Pydantic config overrides. allow_population_by_field_name \u00a4 extra \u00a4 validate_assignment \u00a4 handler: python","title":"Config"},{"location":"api_reference/trestle.core.models.plans/","text":"trestle.core.models.plans \u00a4 Plan of action of a command. Classes \u00a4 Plan \u00a4 Plan of action of a command. Methods \u00a4 __eq__ ( self , other ) special \u00a4 Check that two plans are equal. Source code in trestle/core/models/plans.py def __eq__ ( self , other : object ) -> bool : \"\"\"Check that two plans are equal.\"\"\" if not isinstance ( other , Plan ): return False return self . get_actions () == other . get_actions () __init__ ( self ) special \u00a4 Initialize a plan. Source code in trestle/core/models/plans.py def __init__ ( self ) -> None : \"\"\"Initialize a plan.\"\"\" self . _actions : List [ Action ] = [] __str__ ( self ) special \u00a4 Print the plan. Source code in trestle/core/models/plans.py def __str__ ( self ) -> str : \"\"\"Print the plan.\"\"\" list_actions = [] index = 1 for action in self . _actions : list_actions . append ( f ' { index } . { action } ' ) index = index + 1 list_str = ' \\n ' . join ( list_actions ) return list_str add_action ( self , action ) \u00a4 Add a new action. Source code in trestle/core/models/plans.py def add_action ( self , action : Action ) -> None : \"\"\"Add a new action.\"\"\" self . _actions . append ( action ) add_actions ( self , actions ) \u00a4 Add actions in order. Source code in trestle/core/models/plans.py def add_actions ( self , actions : List [ Action ]) -> None : \"\"\"Add actions in order.\"\"\" self . _actions . extend ( actions ) clear_actions ( self ) \u00a4 Clear all actions. Source code in trestle/core/models/plans.py def clear_actions ( self ) -> None : \"\"\"Clear all actions.\"\"\" self . _actions = [] execute ( self ) \u00a4 Execute the actions in the plan. Source code in trestle/core/models/plans.py def execute ( self ) -> None : \"\"\"Execute the actions in the plan.\"\"\" for action in self . _actions : action . execute () get_actions ( self ) \u00a4 Get all actions. Source code in trestle/core/models/plans.py def get_actions ( self ) -> List [ Action ]: \"\"\"Get all actions.\"\"\" return self . _actions rollback ( self ) \u00a4 Rollback the actions in the plan. Source code in trestle/core/models/plans.py def rollback ( self ) -> None : \"\"\"Rollback the actions in the plan.\"\"\" # execute in reverse order for action in reversed ( self . _actions ): if action . has_rollback () is False : raise UnsupportedOperation ( f ' { action . get_type () } does not support rollback' ) action . rollback () simulate ( self ) \u00a4 Simulate execution of the plan. Source code in trestle/core/models/plans.py def simulate ( self ) -> None : \"\"\"Simulate execution of the plan.\"\"\" # Check if all of the actions support rollback or not for action in self . _actions : if action . has_rollback () is False : raise UnsupportedOperation ( f ' { action . get_type () } does not support rollback' ) try : self . execute () except Exception as ex : raise ex finally : self . rollback () handler: python","title":"plans"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans","text":"Plan of action of a command.","title":"plans"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan","text":"Plan of action of a command.","title":"Plan"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.__eq__","text":"Check that two plans are equal. Source code in trestle/core/models/plans.py def __eq__ ( self , other : object ) -> bool : \"\"\"Check that two plans are equal.\"\"\" if not isinstance ( other , Plan ): return False return self . get_actions () == other . get_actions ()","title":"__eq__()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.__init__","text":"Initialize a plan. Source code in trestle/core/models/plans.py def __init__ ( self ) -> None : \"\"\"Initialize a plan.\"\"\" self . _actions : List [ Action ] = []","title":"__init__()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.__str__","text":"Print the plan. Source code in trestle/core/models/plans.py def __str__ ( self ) -> str : \"\"\"Print the plan.\"\"\" list_actions = [] index = 1 for action in self . _actions : list_actions . append ( f ' { index } . { action } ' ) index = index + 1 list_str = ' \\n ' . join ( list_actions ) return list_str","title":"__str__()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.add_action","text":"Add a new action. Source code in trestle/core/models/plans.py def add_action ( self , action : Action ) -> None : \"\"\"Add a new action.\"\"\" self . _actions . append ( action )","title":"add_action()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.add_actions","text":"Add actions in order. Source code in trestle/core/models/plans.py def add_actions ( self , actions : List [ Action ]) -> None : \"\"\"Add actions in order.\"\"\" self . _actions . extend ( actions )","title":"add_actions()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.clear_actions","text":"Clear all actions. Source code in trestle/core/models/plans.py def clear_actions ( self ) -> None : \"\"\"Clear all actions.\"\"\" self . _actions = []","title":"clear_actions()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.execute","text":"Execute the actions in the plan. Source code in trestle/core/models/plans.py def execute ( self ) -> None : \"\"\"Execute the actions in the plan.\"\"\" for action in self . _actions : action . execute ()","title":"execute()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.get_actions","text":"Get all actions. Source code in trestle/core/models/plans.py def get_actions ( self ) -> List [ Action ]: \"\"\"Get all actions.\"\"\" return self . _actions","title":"get_actions()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.rollback","text":"Rollback the actions in the plan. Source code in trestle/core/models/plans.py def rollback ( self ) -> None : \"\"\"Rollback the actions in the plan.\"\"\" # execute in reverse order for action in reversed ( self . _actions ): if action . has_rollback () is False : raise UnsupportedOperation ( f ' { action . get_type () } does not support rollback' ) action . rollback ()","title":"rollback()"},{"location":"api_reference/trestle.core.models.plans/#trestle.core.models.plans.Plan.simulate","text":"Simulate execution of the plan. Source code in trestle/core/models/plans.py def simulate ( self ) -> None : \"\"\"Simulate execution of the plan.\"\"\" # Check if all of the actions support rollback or not for action in self . _actions : if action . has_rollback () is False : raise UnsupportedOperation ( f ' { action . get_type () } does not support rollback' ) try : self . execute () except Exception as ex : raise ex finally : self . rollback () handler: python","title":"simulate()"},{"location":"api_reference/trestle.core.object_factory/","text":"trestle.core.object_factory \u00a4 Generic object factory. Classes \u00a4 ObjectFactory \u00a4 Allow registration and creation of factory objects. Methods \u00a4 __init__ ( self ) special \u00a4 Initialize the objects dictionary as empty. Source code in trestle/core/object_factory.py def __init__ ( self ) -> None : \"\"\"Initialize the objects dictionary as empty.\"\"\" self . _objects : Dict [ str , Any ] = {} get ( self , args ) \u00a4 Create the object from the args. Source code in trestle/core/object_factory.py def get ( self , args : argparse . Namespace ) -> Any : \"\"\"Create the object from the args.\"\"\" return self . _objects . get ( args . mode ) get_all ( self ) \u00a4 Get all registered objects. Source code in trestle/core/object_factory.py def get_all ( self ) -> ValuesView [ Any ]: \"\"\"Get all registered objects.\"\"\" return self . _objects . values () register_object ( self , mode , obj ) \u00a4 Register an object to the object factory. Parameters: Name Type Description Default mode str Descriptive key for the mode / type of object to be retrieved. required obj Any The object type to be registered. required Source code in trestle/core/object_factory.py def register_object ( self , mode : str , obj : Any ) -> None : \"\"\"Register an object to the object factory. Args: mode: Descriptive key for the mode / type of object to be retrieved. obj: The object type to be registered. \"\"\" self . _objects [ mode ] = obj handler: python","title":"object_factory"},{"location":"api_reference/trestle.core.object_factory/#trestle.core.object_factory","text":"Generic object factory.","title":"object_factory"},{"location":"api_reference/trestle.core.object_factory/#trestle.core.object_factory-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.object_factory/#trestle.core.object_factory.ObjectFactory","text":"Allow registration and creation of factory objects.","title":"ObjectFactory"},{"location":"api_reference/trestle.core.object_factory/#trestle.core.object_factory.ObjectFactory-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.object_factory/#trestle.core.object_factory.ObjectFactory.__init__","text":"Initialize the objects dictionary as empty. Source code in trestle/core/object_factory.py def __init__ ( self ) -> None : \"\"\"Initialize the objects dictionary as empty.\"\"\" self . _objects : Dict [ str , Any ] = {}","title":"__init__()"},{"location":"api_reference/trestle.core.object_factory/#trestle.core.object_factory.ObjectFactory.get","text":"Create the object from the args. Source code in trestle/core/object_factory.py def get ( self , args : argparse . Namespace ) -> Any : \"\"\"Create the object from the args.\"\"\" return self . _objects . get ( args . mode )","title":"get()"},{"location":"api_reference/trestle.core.object_factory/#trestle.core.object_factory.ObjectFactory.get_all","text":"Get all registered objects. Source code in trestle/core/object_factory.py def get_all ( self ) -> ValuesView [ Any ]: \"\"\"Get all registered objects.\"\"\" return self . _objects . values ()","title":"get_all()"},{"location":"api_reference/trestle.core.object_factory/#trestle.core.object_factory.ObjectFactory.register_object","text":"Register an object to the object factory. Parameters: Name Type Description Default mode str Descriptive key for the mode / type of object to be retrieved. required obj Any The object type to be registered. required Source code in trestle/core/object_factory.py def register_object ( self , mode : str , obj : Any ) -> None : \"\"\"Register an object to the object factory. Args: mode: Descriptive key for the mode / type of object to be retrieved. obj: The object type to be registered. \"\"\" self . _objects [ mode ] = obj handler: python","title":"register_object()"},{"location":"api_reference/trestle.core.oscal_version_validator/","text":"trestle.core.oscal_version_validator \u00a4 Validate by confirming no duplicate items. logger \u00a4 Classes \u00a4 OSCALVersionValidator ( Validator ) \u00a4 Validator to confirm the OSCAL version is the one supported. Methods \u00a4 model_is_valid ( self , model ) \u00a4 Test if the model is valid based on OSCAL version. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool True (valid) if the OSCAL version in the model is supported. Source code in trestle/core/oscal_version_validator.py def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Test if the model is valid based on OSCAL version. args: model: An Oscal model that can be passed to the validator. returns: True (valid) if the OSCAL version in the model is supported. \"\"\" oscal_version = model . metadata . oscal_version . __root__ p = re . compile ( OSCAL_VERSION_REGEX ) matched = p . match ( oscal_version ) return matched is not None handler: python","title":"oscal_version_validator"},{"location":"api_reference/trestle.core.oscal_version_validator/#trestle.core.oscal_version_validator","text":"Validate by confirming no duplicate items.","title":"oscal_version_validator"},{"location":"api_reference/trestle.core.oscal_version_validator/#trestle.core.oscal_version_validator.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.oscal_version_validator/#trestle.core.oscal_version_validator-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.oscal_version_validator/#trestle.core.oscal_version_validator.OSCALVersionValidator","text":"Validator to confirm the OSCAL version is the one supported.","title":"OSCALVersionValidator"},{"location":"api_reference/trestle.core.oscal_version_validator/#trestle.core.oscal_version_validator.OSCALVersionValidator-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.oscal_version_validator/#trestle.core.oscal_version_validator.OSCALVersionValidator.model_is_valid","text":"Test if the model is valid based on OSCAL version. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool True (valid) if the OSCAL version in the model is supported. Source code in trestle/core/oscal_version_validator.py def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Test if the model is valid based on OSCAL version. args: model: An Oscal model that can be passed to the validator. returns: True (valid) if the OSCAL version in the model is supported. \"\"\" oscal_version = model . metadata . oscal_version . __root__ p = re . compile ( OSCAL_VERSION_REGEX ) matched = p . match ( oscal_version ) return matched is not None handler: python","title":"model_is_valid()"},{"location":"api_reference/trestle.core.parser/","text":"trestle.core.parser \u00a4 Model parsing for use when models themselves must be infered and are not known. Under most use cases trestle.core.base_model.OscalBaseModel provides functionality for loading Oscal models from files. However, under some circumstances are unknown. Use of functionality in this module should be avoided and inspected when used as to it's appropriateness. logger \u00a4 Functions \u00a4 parse_dict ( data , model_name ) \u00a4 Load a model from the data dict. This functionality is provided for situations when the OSCAL data type is not known ahead of time. Here the model has been loaded into memory using json loads or similar and passed as a dict. Parameters: Name Type Description Default data Dict[str, Any] Oscal data loaded into memory in a dictionary with the root key removed. required model_name str it should be of the form 'module.class' from trestle.oscal.* modules required Returns: Type Description OscalBaseModel The oscal model of the desired model. Source code in trestle/core/parser.py def parse_dict ( data : Dict [ str , Any ], model_name : str ) -> OscalBaseModel : \"\"\"Load a model from the data dict. This functionality is provided for situations when the OSCAL data type is not known ahead of time. Here the model has been loaded into memory using json loads or similar and passed as a dict. Args: data: Oscal data loaded into memory in a dictionary with the `root key` removed. model_name: it should be of the form 'module.class' from trestle.oscal.* modules Returns: The oscal model of the desired model. \"\"\" if data is None : raise TrestleError ( 'data name is required' ) if model_name is None : raise TrestleError ( 'model_name is required' ) parts = model_name . split ( '.' ) class_name = parts . pop () module_name = '.' . join ( parts ) logger . debug ( f 'Loading class \" { class_name } \" from \" { module_name } \"' ) module = importlib . import_module ( module_name ) mclass = getattr ( module , class_name ) if mclass is None : raise TrestleError ( f 'class \" { class_name } \" could not be found in \" { module_name } \"' ) instance = mclass . parse_obj ( data ) return instance parse_file ( file_name , model_name ) \u00a4 Load an oscal file from the file system where the oscal model type is not known. Parameters: Name Type Description Default file_name Path File path required model_name Optional[str] it should be of the form module.class which is derived from OscalBaseModel required Source code in trestle/core/parser.py def parse_file ( file_name : pathlib . Path , model_name : Optional [ str ]) -> OscalBaseModel : \"\"\" Load an oscal file from the file system where the oscal model type is not known. Args: file_name: File path model_name: it should be of the form module.class which is derived from OscalBaseModel \"\"\" if file_name is None : raise TrestleError ( 'file_name is required' ) data = fs . load_file ( file_name ) rkey = root_key ( data ) if model_name is None : model_name = to_full_model_name ( rkey ) return parse_dict ( data [ rkey ], model_name ) root_key ( data ) \u00a4 Find root model name in the data. Source code in trestle/core/parser.py def root_key ( data : Dict [ str , Any ]) -> str : \"\"\"Find root model name in the data.\"\"\" if len ( data . items ()) == 1 : return next ( iter ( data )) raise TrestleError ( 'data does not contain a root key' ) to_full_model_name ( root_key ) \u00a4 Find model name from the root_key in the file. Parameters: Name Type Description Default root_key str root key such as 'system-security-plan' from a top level OSCAL model. required Source code in trestle/core/parser.py def to_full_model_name ( root_key : str ) -> Optional [ str ]: \"\"\" Find model name from the root_key in the file. Args: root_key: root key such as 'system-security-plan' from a top level OSCAL model. \"\"\" if root_key not in const . MODEL_TYPE_LIST : logger . warning ( f ' { root_key } is not a top level model name.' ) return None module = const . MODEL_TYPE_TO_MODEL_MODULE [ root_key ] class_name = utils . alias_to_classname ( root_key , 'json' ) return f ' { module } . { class_name } ' handler: python","title":"parser"},{"location":"api_reference/trestle.core.parser/#trestle.core.parser","text":"Model parsing for use when models themselves must be infered and are not known. Under most use cases trestle.core.base_model.OscalBaseModel provides functionality for loading Oscal models from files. However, under some circumstances are unknown. Use of functionality in this module should be avoided and inspected when used as to it's appropriateness.","title":"parser"},{"location":"api_reference/trestle.core.parser/#trestle.core.parser.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.parser/#trestle.core.parser-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.core.parser/#trestle.core.parser.parse_dict","text":"Load a model from the data dict. This functionality is provided for situations when the OSCAL data type is not known ahead of time. Here the model has been loaded into memory using json loads or similar and passed as a dict. Parameters: Name Type Description Default data Dict[str, Any] Oscal data loaded into memory in a dictionary with the root key removed. required model_name str it should be of the form 'module.class' from trestle.oscal.* modules required Returns: Type Description OscalBaseModel The oscal model of the desired model. Source code in trestle/core/parser.py def parse_dict ( data : Dict [ str , Any ], model_name : str ) -> OscalBaseModel : \"\"\"Load a model from the data dict. This functionality is provided for situations when the OSCAL data type is not known ahead of time. Here the model has been loaded into memory using json loads or similar and passed as a dict. Args: data: Oscal data loaded into memory in a dictionary with the `root key` removed. model_name: it should be of the form 'module.class' from trestle.oscal.* modules Returns: The oscal model of the desired model. \"\"\" if data is None : raise TrestleError ( 'data name is required' ) if model_name is None : raise TrestleError ( 'model_name is required' ) parts = model_name . split ( '.' ) class_name = parts . pop () module_name = '.' . join ( parts ) logger . debug ( f 'Loading class \" { class_name } \" from \" { module_name } \"' ) module = importlib . import_module ( module_name ) mclass = getattr ( module , class_name ) if mclass is None : raise TrestleError ( f 'class \" { class_name } \" could not be found in \" { module_name } \"' ) instance = mclass . parse_obj ( data ) return instance","title":"parse_dict()"},{"location":"api_reference/trestle.core.parser/#trestle.core.parser.parse_file","text":"Load an oscal file from the file system where the oscal model type is not known. Parameters: Name Type Description Default file_name Path File path required model_name Optional[str] it should be of the form module.class which is derived from OscalBaseModel required Source code in trestle/core/parser.py def parse_file ( file_name : pathlib . Path , model_name : Optional [ str ]) -> OscalBaseModel : \"\"\" Load an oscal file from the file system where the oscal model type is not known. Args: file_name: File path model_name: it should be of the form module.class which is derived from OscalBaseModel \"\"\" if file_name is None : raise TrestleError ( 'file_name is required' ) data = fs . load_file ( file_name ) rkey = root_key ( data ) if model_name is None : model_name = to_full_model_name ( rkey ) return parse_dict ( data [ rkey ], model_name )","title":"parse_file()"},{"location":"api_reference/trestle.core.parser/#trestle.core.parser.root_key","text":"Find root model name in the data. Source code in trestle/core/parser.py def root_key ( data : Dict [ str , Any ]) -> str : \"\"\"Find root model name in the data.\"\"\" if len ( data . items ()) == 1 : return next ( iter ( data )) raise TrestleError ( 'data does not contain a root key' )","title":"root_key()"},{"location":"api_reference/trestle.core.parser/#trestle.core.parser.to_full_model_name","text":"Find model name from the root_key in the file. Parameters: Name Type Description Default root_key str root key such as 'system-security-plan' from a top level OSCAL model. required Source code in trestle/core/parser.py def to_full_model_name ( root_key : str ) -> Optional [ str ]: \"\"\" Find model name from the root_key in the file. Args: root_key: root key such as 'system-security-plan' from a top level OSCAL model. \"\"\" if root_key not in const . MODEL_TYPE_LIST : logger . warning ( f ' { root_key } is not a top level model name.' ) return None module = const . MODEL_TYPE_TO_MODEL_MODULE [ root_key ] class_name = utils . alias_to_classname ( root_key , 'json' ) return f ' { module } . { class_name } ' handler: python","title":"to_full_model_name()"},{"location":"api_reference/trestle.core.pipeline/","text":"trestle.core.pipeline \u00a4 Abstract base class for pipelines and filters. Classes \u00a4 Pipeline \u00a4 Pipeline base class. Classes \u00a4 Filter ( ABC ) \u00a4 Filter class used by pipeline. Methods \u00a4 process ( input_ ) classmethod \u00a4 Process the input to output. Source code in trestle/core/pipeline.py @abstractclassmethod def process ( self , input_ : Any ) -> Any : \"\"\"Process the input to output.\"\"\" return input_ Methods \u00a4 __init__ ( self , filters ) special \u00a4 Initialize the class. Source code in trestle/core/pipeline.py def __init__ ( self , filters : List [ Filter ]) -> None : \"\"\"Initialize the class.\"\"\" self . _filters = filters process ( self , input_ ) \u00a4 Process the filter pipeline. Source code in trestle/core/pipeline.py def process ( self , input_ : Any ) -> Any : \"\"\"Process the filter pipeline.\"\"\" for filter_ in self . _filters : input_ = filter_ . process ( input_ ) return input_ handler: python","title":"pipeline"},{"location":"api_reference/trestle.core.pipeline/#trestle.core.pipeline","text":"Abstract base class for pipelines and filters.","title":"pipeline"},{"location":"api_reference/trestle.core.pipeline/#trestle.core.pipeline-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.pipeline/#trestle.core.pipeline.Pipeline","text":"Pipeline base class.","title":"Pipeline"},{"location":"api_reference/trestle.core.pipeline/#trestle.core.pipeline.Pipeline-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.pipeline/#trestle.core.pipeline.Pipeline.Filter","text":"Filter class used by pipeline. Methods \u00a4 process ( input_ ) classmethod \u00a4 Process the input to output. Source code in trestle/core/pipeline.py @abstractclassmethod def process ( self , input_ : Any ) -> Any : \"\"\"Process the input to output.\"\"\" return input_","title":"Filter"},{"location":"api_reference/trestle.core.pipeline/#trestle.core.pipeline.Pipeline-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.pipeline/#trestle.core.pipeline.Pipeline.__init__","text":"Initialize the class. Source code in trestle/core/pipeline.py def __init__ ( self , filters : List [ Filter ]) -> None : \"\"\"Initialize the class.\"\"\" self . _filters = filters","title":"__init__()"},{"location":"api_reference/trestle.core.pipeline/#trestle.core.pipeline.Pipeline.process","text":"Process the filter pipeline. Source code in trestle/core/pipeline.py def process ( self , input_ : Any ) -> Any : \"\"\"Process the filter pipeline.\"\"\" for filter_ in self . _filters : input_ = filter_ . process ( input_ ) return input_ handler: python","title":"process()"},{"location":"api_reference/trestle.core.profile_resolver/","text":"trestle.core.profile_resolver \u00a4 Create resolved catalog from profile. logger \u00a4 Classes \u00a4 CatalogInterface \u00a4 Interface to query and modify catalog contents. Classes \u00a4 ControlHandle ( BaseModel ) pydantic-model \u00a4 Convenience class for handling controls as members of a group. group_id: id of parent group or 'catalog' if not in a group group_title: title of the group group_class: class of the group path: path of parent controls leading to this child control control: the control itself control : Control pydantic-field required \u00a4 group_class : str pydantic-field \u00a4 group_id : str pydantic-field required \u00a4 group_title : str pydantic-field \u00a4 path : List [ str ] pydantic-field required \u00a4 Methods \u00a4 __init__ ( self , catalog ) special \u00a4 Initialize the interface with the catalog. Source code in trestle/core/profile_resolver.py def __init__ ( self , catalog : cat . Catalog ) -> None : \"\"\"Initialize the interface with the catalog.\"\"\" self . _catalog = catalog self . _control_dict = self . _create_control_dict () find_string_in_control ( self , control , seek_str ) \u00a4 Find all instances of this string in prose of control. Source code in trestle/core/profile_resolver.py def find_string_in_control ( self , control : cat . Control , seek_str : str ) -> List [ Tuple [ str , str ]]: \"\"\"Find all instances of this string in prose of control.\"\"\" hits : List [ Tuple [ str , str ]] = [] if control . parts : for part in control . parts : hits . extend ( self . _find_string_in_part ( control . id , part , seek_str )) return hits get_all_controls ( self , recurse ) \u00a4 Yield all deep and individual controls from the catalog by group. Source code in trestle/core/profile_resolver.py def get_all_controls ( self , recurse : bool ) -> Iterator [ cat . Control ]: \"\"\"Yield all deep and individual controls from the catalog by group.\"\"\" if self . _catalog . groups : for group in self . _catalog . groups : controls = self . _get_all_controls_in_group ( group , recurse ) for control in controls : yield control if self . _catalog . controls : cat_controls = self . _get_all_controls_in_list ( self . _catalog . controls , recurse ) for control in cat_controls : yield control get_control ( self , control_id ) \u00a4 Get control from catalog with this id using the dict. Source code in trestle/core/profile_resolver.py def get_control ( self , control_id : str ) -> cat . Control : \"\"\"Get control from catalog with this id using the dict.\"\"\" return self . _control_dict [ control_id ] . control get_control_ids ( self ) \u00a4 Get all control ids in catalog using the dict. Source code in trestle/core/profile_resolver.py def get_control_ids ( self ) -> List [ str ]: \"\"\"Get all control ids in catalog using the dict.\"\"\" return self . _control_dict . keys () get_count_of_controls ( self , recurse ) \u00a4 Find number of controls in the catalog with or without recursion. Source code in trestle/core/profile_resolver.py def get_count_of_controls ( self , recurse : bool ) -> int : \"\"\"Find number of controls in the catalog with or without recursion.\"\"\" return len ( list ( self . get_all_controls ( recurse ))) get_dependent_control_ids ( self , control_id ) \u00a4 Find all children of this control. Source code in trestle/core/profile_resolver.py def get_dependent_control_ids ( self , control_id : str ) -> List [ str ]: \"\"\"Find all children of this control.\"\"\" children : List [ str ] = [] control = self . get_control ( control_id ) if control . controls : new_controls = self . _get_all_controls_in_list ( control . controls , True ) children . extend ([ con . id for con in new_controls ]) return children get_group_info ( self , control_id ) \u00a4 Get the group_id, title, class for this control. Source code in trestle/core/profile_resolver.py def get_group_info ( self , control_id : str ) -> Tuple [ str , str , str ]: \"\"\"Get the group_id, title, class for this control.\"\"\" return ( self . _control_dict [ control_id ] . group_id , self . _control_dict [ control_id ] . group_title , self . _control_dict [ control_id ] . group_class ) get_path ( self , control_id ) \u00a4 Return the path into the catalog for this control. Source code in trestle/core/profile_resolver.py def get_path ( self , control_id : str ) -> List [ str ]: \"\"\"Return the path into the catalog for this control.\"\"\" return self . _control_dict [ control_id ] . path replace_control ( self , control ) \u00a4 Replace the control in the control_dict after modifying it. Source code in trestle/core/profile_resolver.py def replace_control ( self , control : cat . Control ) -> None : \"\"\"Replace the control in the control_dict after modifying it.\"\"\" self . _control_dict [ control . id ] . control = control ProfileResolver \u00a4 Class to resolve a catalog given a profile. Classes \u00a4 Import ( Filter ) \u00a4 Import filter class. Methods \u00a4 __init__ ( self , trestle_root , import_ ) special \u00a4 Initialize and store trestle root for cache access. Source code in trestle/core/profile_resolver.py def __init__ ( self , trestle_root : pathlib . Path , import_ : prof . Import ) -> None : \"\"\"Initialize and store trestle root for cache access.\"\"\" self . _trestle_root = trestle_root self . _import = import_ process ( self , input_ = None ) \u00a4 Load href for catalog or profile and yield each import as catalog imported by its distinct pipeline. Source code in trestle/core/profile_resolver.py def process ( self , input_ = None ) -> Iterator [ cat . Catalog ]: \"\"\"Load href for catalog or profile and yield each import as catalog imported by its distinct pipeline.\"\"\" logger . debug ( f 'import entering process with href { self . _import . href } ' ) fetcher = cache . FetcherFactory . get_fetcher ( self . _trestle_root , self . _import . href ) model : Union [ cat . Catalog , prof . Profile ] model , model_type = fetcher . get_oscal () if model_type == 'catalog' : logger . debug ( f 'DIRECT YIELD in import of catalog { model . metadata . title } ' ) yield model else : if model_type != 'profile' : raise TrestleError ( f 'Improper model type { model_type } as profile import.' ) profile : prof . Profile = model pipelines : List [ Pipeline ] = [] logger . debug ( f 'import pipelines for sub_imports of profile { self . _import . href } with title { model . metadata . title } ' ) for sub_import in profile . imports : import_filter = ProfileResolver . Import ( self . _trestle_root , sub_import ) prune_filter = ProfileResolver . Prune ( sub_import ) pipeline = Pipeline ([ import_filter , prune_filter ]) pipelines . append ( pipeline ) logger . debug ( f 'sub_import add pipeline for sub href { sub_import . href } of main href { self . _import . href } ' ) merge_filter = ProfileResolver . Merge ( profile ) modify_filter = ProfileResolver . Modify ( profile ) final_pipeline = Pipeline ([ merge_filter , modify_filter ]) yield next ( final_pipeline . process ( pipelines )) Merge ( Filter ) \u00a4 Merge the incoming catalogs according to rules in the profile. Methods \u00a4 __init__ ( self , profile ) special \u00a4 Initialize the class with the profile. Source code in trestle/core/profile_resolver.py def __init__ ( self , profile : prof . Profile ) -> None : \"\"\"Initialize the class with the profile.\"\"\" logger . debug ( 'merge filter initialize' ) self . _profile = profile process ( self , pipelines ) \u00a4 Merge the incoming catalogs. This pulls from import and iterates over the incoming catalogs. Source code in trestle/core/profile_resolver.py def process ( self , pipelines : List [ Pipeline ]) -> Iterator [ cat . Catalog ]: \"\"\" Merge the incoming catalogs. This pulls from import and iterates over the incoming catalogs. \"\"\" merged : Optional [ cat . Catalog ] = None logger . debug ( f 'merge entering process with { len ( pipelines ) } pipelines' ) for pipeline in pipelines : catalog = next ( pipeline . process ( None )) merged = self . _merge_catalog ( merged , catalog ) yield merged Modify ( Filter ) \u00a4 Modify the controls based on the profile. Methods \u00a4 __init__ ( self , profile ) special \u00a4 Initialize the filter. Source code in trestle/core/profile_resolver.py def __init__ ( self , profile : prof . Profile ) -> None : \"\"\"Initialize the filter.\"\"\" self . _profile = profile self . _catalog_interface : Optional [ CatalogInterface ] = None logger . debug ( f 'modify initialize filter with profile { profile . metadata . title } ' ) process ( self , catalog_iter ) \u00a4 Make the modifications to the controls based on the profile. Source code in trestle/core/profile_resolver.py def process ( self , catalog_iter : Iterator [ cat . Catalog ]) -> Iterator [ cat . Catalog ]: \"\"\"Make the modifications to the controls based on the profile.\"\"\" catalog = next ( catalog_iter ) logger . debug ( f 'modify process with catalog { catalog . metadata . title } using profile { self . _profile . metadata . title } ' ) yield self . _modify_controls ( catalog ) Prune ( Filter ) \u00a4 Prune the catalog based on the import include rule. Methods \u00a4 __init__ ( self , import_ ) special \u00a4 Inject the import. This needs to be created prior to knowing the catalog. Source code in trestle/core/profile_resolver.py def __init__ ( self , import_ : prof . Import ) -> None : \"\"\" Inject the import. This needs to be created prior to knowing the catalog. \"\"\" self . _import : prof . Import = import_ self . _catalog_interface : Optional [ CatalogInterface ] = None self . _catalog : Optional [ cat . Catalog ] = None process ( self , catalog_iter ) \u00a4 Prune the catalog based on the include rule in the import_. This only processes the one catalog yielded by the one import in this pipeline. It must yield in order to have the merge filter loop over available imported catalogs. Source code in trestle/core/profile_resolver.py def process ( self , catalog_iter : Iterator [ cat . Catalog ]) -> Iterator [ cat . Catalog ]: \"\"\" Prune the catalog based on the include rule in the import_. This only processes the one catalog yielded by the one import in this pipeline. It must yield in order to have the merge filter loop over available imported catalogs. \"\"\" self . _set_catalog ( next ( catalog_iter )) logger . debug ( f 'prune yielding catalog { self . _catalog . metadata . title } with import { self . _import . href } ' ) yield self . _prune_catalog () Methods \u00a4 get_resolved_profile_catalog ( trestle_root , profile_path ) staticmethod \u00a4 Create the resolved profile catalog given a profile path. Source code in trestle/core/profile_resolver.py @staticmethod def get_resolved_profile_catalog ( trestle_root : pathlib . Path , profile_path : pathlib . Path ) -> cat . Catalog : \"\"\"Create the resolved profile catalog given a profile path.\"\"\" logger . debug ( f 'get resolved profile catalog for { profile_path } via generated Import.' ) import_ = prof . Import ( href = str ( profile_path ), include_all = {}) import_filter = ProfileResolver . Import ( trestle_root , import_ ) logger . debug ( 'launch pipeline' ) result = next ( import_filter . process ()) return result handler: python","title":"profile_resolver"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver","text":"Create resolved catalog from profile.","title":"profile_resolver"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface","text":"Interface to query and modify catalog contents.","title":"CatalogInterface"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.ControlHandle","text":"Convenience class for handling controls as members of a group. group_id: id of parent group or 'catalog' if not in a group group_title: title of the group group_class: class of the group path: path of parent controls leading to this child control control: the control itself control : Control pydantic-field required \u00a4 group_class : str pydantic-field \u00a4 group_id : str pydantic-field required \u00a4 group_title : str pydantic-field \u00a4 path : List [ str ] pydantic-field required \u00a4","title":"ControlHandle"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.__init__","text":"Initialize the interface with the catalog. Source code in trestle/core/profile_resolver.py def __init__ ( self , catalog : cat . Catalog ) -> None : \"\"\"Initialize the interface with the catalog.\"\"\" self . _catalog = catalog self . _control_dict = self . _create_control_dict ()","title":"__init__()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.find_string_in_control","text":"Find all instances of this string in prose of control. Source code in trestle/core/profile_resolver.py def find_string_in_control ( self , control : cat . Control , seek_str : str ) -> List [ Tuple [ str , str ]]: \"\"\"Find all instances of this string in prose of control.\"\"\" hits : List [ Tuple [ str , str ]] = [] if control . parts : for part in control . parts : hits . extend ( self . _find_string_in_part ( control . id , part , seek_str )) return hits","title":"find_string_in_control()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.get_all_controls","text":"Yield all deep and individual controls from the catalog by group. Source code in trestle/core/profile_resolver.py def get_all_controls ( self , recurse : bool ) -> Iterator [ cat . Control ]: \"\"\"Yield all deep and individual controls from the catalog by group.\"\"\" if self . _catalog . groups : for group in self . _catalog . groups : controls = self . _get_all_controls_in_group ( group , recurse ) for control in controls : yield control if self . _catalog . controls : cat_controls = self . _get_all_controls_in_list ( self . _catalog . controls , recurse ) for control in cat_controls : yield control","title":"get_all_controls()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.get_control","text":"Get control from catalog with this id using the dict. Source code in trestle/core/profile_resolver.py def get_control ( self , control_id : str ) -> cat . Control : \"\"\"Get control from catalog with this id using the dict.\"\"\" return self . _control_dict [ control_id ] . control","title":"get_control()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.get_control_ids","text":"Get all control ids in catalog using the dict. Source code in trestle/core/profile_resolver.py def get_control_ids ( self ) -> List [ str ]: \"\"\"Get all control ids in catalog using the dict.\"\"\" return self . _control_dict . keys ()","title":"get_control_ids()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.get_count_of_controls","text":"Find number of controls in the catalog with or without recursion. Source code in trestle/core/profile_resolver.py def get_count_of_controls ( self , recurse : bool ) -> int : \"\"\"Find number of controls in the catalog with or without recursion.\"\"\" return len ( list ( self . get_all_controls ( recurse )))","title":"get_count_of_controls()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.get_dependent_control_ids","text":"Find all children of this control. Source code in trestle/core/profile_resolver.py def get_dependent_control_ids ( self , control_id : str ) -> List [ str ]: \"\"\"Find all children of this control.\"\"\" children : List [ str ] = [] control = self . get_control ( control_id ) if control . controls : new_controls = self . _get_all_controls_in_list ( control . controls , True ) children . extend ([ con . id for con in new_controls ]) return children","title":"get_dependent_control_ids()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.get_group_info","text":"Get the group_id, title, class for this control. Source code in trestle/core/profile_resolver.py def get_group_info ( self , control_id : str ) -> Tuple [ str , str , str ]: \"\"\"Get the group_id, title, class for this control.\"\"\" return ( self . _control_dict [ control_id ] . group_id , self . _control_dict [ control_id ] . group_title , self . _control_dict [ control_id ] . group_class )","title":"get_group_info()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.get_path","text":"Return the path into the catalog for this control. Source code in trestle/core/profile_resolver.py def get_path ( self , control_id : str ) -> List [ str ]: \"\"\"Return the path into the catalog for this control.\"\"\" return self . _control_dict [ control_id ] . path","title":"get_path()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.CatalogInterface.replace_control","text":"Replace the control in the control_dict after modifying it. Source code in trestle/core/profile_resolver.py def replace_control ( self , control : cat . Control ) -> None : \"\"\"Replace the control in the control_dict after modifying it.\"\"\" self . _control_dict [ control . id ] . control = control","title":"replace_control()"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.ProfileResolver","text":"Class to resolve a catalog given a profile.","title":"ProfileResolver"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.ProfileResolver-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.ProfileResolver.Import","text":"Import filter class. Methods \u00a4 __init__ ( self , trestle_root , import_ ) special \u00a4 Initialize and store trestle root for cache access. Source code in trestle/core/profile_resolver.py def __init__ ( self , trestle_root : pathlib . Path , import_ : prof . Import ) -> None : \"\"\"Initialize and store trestle root for cache access.\"\"\" self . _trestle_root = trestle_root self . _import = import_ process ( self , input_ = None ) \u00a4 Load href for catalog or profile and yield each import as catalog imported by its distinct pipeline. Source code in trestle/core/profile_resolver.py def process ( self , input_ = None ) -> Iterator [ cat . Catalog ]: \"\"\"Load href for catalog or profile and yield each import as catalog imported by its distinct pipeline.\"\"\" logger . debug ( f 'import entering process with href { self . _import . href } ' ) fetcher = cache . FetcherFactory . get_fetcher ( self . _trestle_root , self . _import . href ) model : Union [ cat . Catalog , prof . Profile ] model , model_type = fetcher . get_oscal () if model_type == 'catalog' : logger . debug ( f 'DIRECT YIELD in import of catalog { model . metadata . title } ' ) yield model else : if model_type != 'profile' : raise TrestleError ( f 'Improper model type { model_type } as profile import.' ) profile : prof . Profile = model pipelines : List [ Pipeline ] = [] logger . debug ( f 'import pipelines for sub_imports of profile { self . _import . href } with title { model . metadata . title } ' ) for sub_import in profile . imports : import_filter = ProfileResolver . Import ( self . _trestle_root , sub_import ) prune_filter = ProfileResolver . Prune ( sub_import ) pipeline = Pipeline ([ import_filter , prune_filter ]) pipelines . append ( pipeline ) logger . debug ( f 'sub_import add pipeline for sub href { sub_import . href } of main href { self . _import . href } ' ) merge_filter = ProfileResolver . Merge ( profile ) modify_filter = ProfileResolver . Modify ( profile ) final_pipeline = Pipeline ([ merge_filter , modify_filter ]) yield next ( final_pipeline . process ( pipelines ))","title":"Import"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.ProfileResolver.Merge","text":"Merge the incoming catalogs according to rules in the profile. Methods \u00a4 __init__ ( self , profile ) special \u00a4 Initialize the class with the profile. Source code in trestle/core/profile_resolver.py def __init__ ( self , profile : prof . Profile ) -> None : \"\"\"Initialize the class with the profile.\"\"\" logger . debug ( 'merge filter initialize' ) self . _profile = profile process ( self , pipelines ) \u00a4 Merge the incoming catalogs. This pulls from import and iterates over the incoming catalogs. Source code in trestle/core/profile_resolver.py def process ( self , pipelines : List [ Pipeline ]) -> Iterator [ cat . Catalog ]: \"\"\" Merge the incoming catalogs. This pulls from import and iterates over the incoming catalogs. \"\"\" merged : Optional [ cat . Catalog ] = None logger . debug ( f 'merge entering process with { len ( pipelines ) } pipelines' ) for pipeline in pipelines : catalog = next ( pipeline . process ( None )) merged = self . _merge_catalog ( merged , catalog ) yield merged","title":"Merge"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.ProfileResolver.Modify","text":"Modify the controls based on the profile. Methods \u00a4 __init__ ( self , profile ) special \u00a4 Initialize the filter. Source code in trestle/core/profile_resolver.py def __init__ ( self , profile : prof . Profile ) -> None : \"\"\"Initialize the filter.\"\"\" self . _profile = profile self . _catalog_interface : Optional [ CatalogInterface ] = None logger . debug ( f 'modify initialize filter with profile { profile . metadata . title } ' ) process ( self , catalog_iter ) \u00a4 Make the modifications to the controls based on the profile. Source code in trestle/core/profile_resolver.py def process ( self , catalog_iter : Iterator [ cat . Catalog ]) -> Iterator [ cat . Catalog ]: \"\"\"Make the modifications to the controls based on the profile.\"\"\" catalog = next ( catalog_iter ) logger . debug ( f 'modify process with catalog { catalog . metadata . title } using profile { self . _profile . metadata . title } ' ) yield self . _modify_controls ( catalog )","title":"Modify"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.ProfileResolver.Prune","text":"Prune the catalog based on the import include rule. Methods \u00a4 __init__ ( self , import_ ) special \u00a4 Inject the import. This needs to be created prior to knowing the catalog. Source code in trestle/core/profile_resolver.py def __init__ ( self , import_ : prof . Import ) -> None : \"\"\" Inject the import. This needs to be created prior to knowing the catalog. \"\"\" self . _import : prof . Import = import_ self . _catalog_interface : Optional [ CatalogInterface ] = None self . _catalog : Optional [ cat . Catalog ] = None process ( self , catalog_iter ) \u00a4 Prune the catalog based on the include rule in the import_. This only processes the one catalog yielded by the one import in this pipeline. It must yield in order to have the merge filter loop over available imported catalogs. Source code in trestle/core/profile_resolver.py def process ( self , catalog_iter : Iterator [ cat . Catalog ]) -> Iterator [ cat . Catalog ]: \"\"\" Prune the catalog based on the include rule in the import_. This only processes the one catalog yielded by the one import in this pipeline. It must yield in order to have the merge filter loop over available imported catalogs. \"\"\" self . _set_catalog ( next ( catalog_iter )) logger . debug ( f 'prune yielding catalog { self . _catalog . metadata . title } with import { self . _import . href } ' ) yield self . _prune_catalog ()","title":"Prune"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.ProfileResolver-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.profile_resolver/#trestle.core.profile_resolver.ProfileResolver.get_resolved_profile_catalog","text":"Create the resolved profile catalog given a profile path. Source code in trestle/core/profile_resolver.py @staticmethod def get_resolved_profile_catalog ( trestle_root : pathlib . Path , profile_path : pathlib . Path ) -> cat . Catalog : \"\"\"Create the resolved profile catalog given a profile path.\"\"\" logger . debug ( f 'get resolved profile catalog for { profile_path } via generated Import.' ) import_ = prof . Import ( href = str ( profile_path ), include_all = {}) import_filter = ProfileResolver . Import ( trestle_root , import_ ) logger . debug ( 'launch pipeline' ) result = next ( import_filter . process ()) return result handler: python","title":"get_resolved_profile_catalog()"},{"location":"api_reference/trestle.core.refs_validator/","text":"trestle.core.refs_validator \u00a4 Validate by confirming all refs have corresponding id. Classes \u00a4 RefsValidator ( Validator ) \u00a4 Validator to confirm all references in responsible parties are found in roles. Methods \u00a4 model_is_valid ( self , model ) \u00a4 Test if the model is valid. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool True (valid) if the model's responsible parties match those found in roles. Source code in trestle/core/refs_validator.py def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Test if the model is valid. args: model: An Oscal model that can be passed to the validator. returns: True (valid) if the model's responsible parties match those found in roles. \"\"\" # FIXME oscal 1.0.0 metadata = model . metadata roles_list_of_lists = find_values_by_name ( metadata , 'roles' ) roles_list = [ item . id for sublist in roles_list_of_lists for item in sublist ] roles_set = set ( roles_list ) responsible_parties_list = find_values_by_name ( metadata , 'responsible_parties' ) if not responsible_parties_list : return True responsible_parties = [ item for sublist in responsible_parties_list for item in sublist ] party_roles = [] for r in responsible_parties : party_roles . append ( r . role_id ) for party in party_roles : if party not in roles_set : return False return True handler: python","title":"refs_validator"},{"location":"api_reference/trestle.core.refs_validator/#trestle.core.refs_validator","text":"Validate by confirming all refs have corresponding id.","title":"refs_validator"},{"location":"api_reference/trestle.core.refs_validator/#trestle.core.refs_validator-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.refs_validator/#trestle.core.refs_validator.RefsValidator","text":"Validator to confirm all references in responsible parties are found in roles.","title":"RefsValidator"},{"location":"api_reference/trestle.core.refs_validator/#trestle.core.refs_validator.RefsValidator-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.refs_validator/#trestle.core.refs_validator.RefsValidator.model_is_valid","text":"Test if the model is valid. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool True (valid) if the model's responsible parties match those found in roles. Source code in trestle/core/refs_validator.py def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Test if the model is valid. args: model: An Oscal model that can be passed to the validator. returns: True (valid) if the model's responsible parties match those found in roles. \"\"\" # FIXME oscal 1.0.0 metadata = model . metadata roles_list_of_lists = find_values_by_name ( metadata , 'roles' ) roles_list = [ item . id for sublist in roles_list_of_lists for item in sublist ] roles_set = set ( roles_list ) responsible_parties_list = find_values_by_name ( metadata , 'responsible_parties' ) if not responsible_parties_list : return True responsible_parties = [ item for sublist in responsible_parties_list for item in sublist ] party_roles = [] for r in responsible_parties : party_roles . append ( r . role_id ) for party in party_roles : if party not in roles_set : return False return True handler: python","title":"model_is_valid()"},{"location":"api_reference/trestle.core.remote.cache/","text":"trestle.core.remote.cache \u00a4 Trestle cache operations library. Allows for using URI's to reference external directories and then expand. logger \u00a4 Classes \u00a4 FetcherBase ( ABC ) \u00a4 FetcherBase - base class for caching and fetching remote oscal objects. Methods \u00a4 __init__ ( self , trestle_root , uri ) special \u00a4 Intialize fetcher base. Parameters: Name Type Description Default trestle_root Path Path of the Trestle project path, i.e., within which .trestle is to be found. required uri str Reference to the source object to cache. required Source code in trestle/core/remote/cache.py def __init__ ( self , trestle_root : pathlib . Path , uri : str ) -> None : \"\"\"Intialize fetcher base. Args: trestle_root: Path of the Trestle project path, i.e., within which .trestle is to be found. uri: Reference to the source object to cache. \"\"\" logger . debug ( 'Initializing FetcherBase' ) self . _cached_object_path : pathlib . Path self . _uri = uri self . _trestle_root = trestle_root . resolve () self . _trestle_cache_path : pathlib . Path = self . _trestle_root / const . TRESTLE_CACHE_DIR # ensure trestle cache directory exists. self . _trestle_cache_path . mkdir ( exist_ok = True ) self . _expiration_seconds = const . DAY_SECONDS get_oscal ( self , force_update = False ) \u00a4 Retrieve the cached file and model name without knowing its model type. Source code in trestle/core/remote/cache.py def get_oscal ( self , force_update = False ) -> Tuple [ OscalBaseModel , str ]: \"\"\"Retrieve the cached file and model name without knowing its model type.\"\"\" model_dict = self . get_raw ( force_update ) root_key = parser . root_key ( model_dict ) model_name = parser . to_full_model_name ( root_key ) if model_name is None : raise TrestleError ( f 'Failed cache read of non top level model with root_key { root_key } ' ) return parser . parse_dict ( model_dict [ root_key ], model_name ), root_key get_oscal_with_model_type ( self , model_type , force_update = False ) \u00a4 Retrieve the cached file as a particular OSCAL model. Parameters: Name Type Description Default model_type Type[trestle.core.base_model.OscalBaseModel] Type[OscalBaseModel] Specifies the OSCAL model type of the fetched object. required Source code in trestle/core/remote/cache.py def get_oscal_with_model_type ( self , model_type : Type [ OscalBaseModel ], force_update = False ) -> OscalBaseModel : \"\"\"Retrieve the cached file as a particular OSCAL model. Arguments: model_type: Type[OscalBaseModel] Specifies the OSCAL model type of the fetched object. \"\"\" self . _update_cache ( force_update ) cache_file = self . _cached_object_path if cache_file . exists (): try : return model_type . oscal_read ( cache_file ) except Exception as e : logger . error ( f 'get_oscal failed, error loading cache file for { self . _uri } as { model_type } ' ) logger . debug ( e ) raise TrestleError ( f 'get_oscal failure for { self . _uri } ' ) from e else : logger . error ( f 'get_oscal error, no cached file for { self . _uri } ' ) raise TrestleError ( f 'get_oscal failure for { self . _uri } ' ) get_raw ( self , force_update = False ) \u00a4 Retrieve the raw dictionary representing the underlying object. Source code in trestle/core/remote/cache.py def get_raw ( self , force_update = False ) -> Dict [ str , Any ]: \"\"\"Retrieve the raw dictionary representing the underlying object.\"\"\" self . _update_cache ( force_update ) # Return results in the cache, whether yaml or json, or whatever is supported by fs.load_file(). try : raw_data = fs . load_file ( self . _cached_object_path ) except Exception : try : raw_data = fs . load_file ( self . _cached_object_path ) except Exception as e : logger . error ( f 'Cannot fs.load_file { self . _cached_object_path } ' ) logger . debug ( e ) raise TrestleError ( f 'Cache get failure for { self . _uri } ' ) from e return raw_data FetcherFactory \u00a4 Factory method for creating a fetcher. Classes \u00a4 UriType ( Enum ) \u00a4 Specify types of URI. HTTPS \u00a4 LOCAL_FILE \u00a4 SFTP \u00a4 TRESTLE \u00a4 Methods \u00a4 get_fetcher ( trestle_root , uri ) classmethod \u00a4 Return an instantiated fetcher object based on the type of URI. Parameters: Name Type Description Default trestle_root Path Path of the Trestle project path, i.e., within which .trestle is to be found. required uri str Reference to the remote object to cache. required Returns: Type Description FetcherBase fetcher object for the given URI. Source code in trestle/core/remote/cache.py @classmethod def get_fetcher ( cls , trestle_root : pathlib . Path , uri : str ) -> FetcherBase : \"\"\"Return an instantiated fetcher object based on the type of URI. Args: trestle_root: Path of the Trestle project path, i.e., within which .trestle is to be found. uri: Reference to the remote object to cache. Returns: fetcher object for the given URI. \"\"\" fetcher_dict = { FetcherFactory . UriType . LOCAL_FILE : LocalFetcher , FetcherFactory . UriType . SFTP : SFTPFetcher , FetcherFactory . UriType . HTTPS : HTTPSFetcher , FetcherFactory . UriType . TRESTLE : LocalFetcher , } uri_type = cls . _get_uri_type ( uri ) return fetcher_dict [ uri_type ]( trestle_root , uri ) in_trestle_directory ( trestle_root , uri ) staticmethod \u00a4 Check if in trestle directory when uri may not be a file path. Source code in trestle/core/remote/cache.py @staticmethod def in_trestle_directory ( trestle_root : pathlib . Path , uri : str ) -> bool : \"\"\"Check if in trestle directory when uri may not be a file path.\"\"\" uri_type = FetcherFactory . _get_uri_type ( uri ) if uri_type == FetcherFactory . UriType . TRESTLE : return True if uri_type != FetcherFactory . UriType . LOCAL_FILE : return False try : pathlib . Path ( uri ) . resolve () . relative_to ( str ( trestle_root . resolve ())) except Exception : return False return True HTTPSFetcher ( FetcherBase ) \u00a4 Fetcher for https content. Methods \u00a4 __init__ ( self , trestle_root , uri ) special \u00a4 Initialize HTTPS fetcher. Source code in trestle/core/remote/cache.py def __init__ ( self , trestle_root : pathlib . Path , uri : str ) -> None : \"\"\"Initialize HTTPS fetcher.\"\"\" logger . debug ( 'Initializing HTTPSFetcher' ) super () . __init__ ( trestle_root , uri ) self . _username = None self . _password = None u = parse . urlparse ( self . _uri ) self . _url = uri # If the either the username or password is omitted in the URI, then the other becomes '' # so we test for either None or ''. if u . username != '' and u . username is not None : # This also checks for invalid environment variable name (IEEE 1003.1) if not re . match ( '{{[a-zA-Z_][a-zA-Z0-9_]*}}' , u . username ) or u . username == '{{_}}' : logger . error ( 'Malformed URI, ' f 'username must refer to an environment variable using moustache { self . _uri } ' ) raise TrestleError ( 'Cache request for invalid input URI: ' f 'username must refer to an environment variable using moustache { self . _uri } ' ) username_var = u . username [ 2 : - 2 ] if username_var not in os . environ : logger . error ( f 'Malformed URI, username not found in the environment { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: username not found in the environment { self . _uri } ' ) self . _username = os . environ [ username_var ] if u . password != '' and u . password is not None : if not re . match ( '{{[a-zA-Z_][a-zA-Z0-9_]*}}' , u . password ) or u . password == '{{_}}' : logger . error ( f 'Malformed URI, password must refer to an environment variable using moustache { self . _uri } ' ) raise TrestleError ( 'Cache request for invalid input URI: ' f 'password must refer to an environment variable using moustache { self . _uri } ' ) password_var = u . password [ 2 : - 2 ] if password_var not in os . environ : logger . error ( f 'Malformed URI, password not found in the environment { self . _uri } ' ) raise TrestleError ( 'Cache request for invalid input URI: ' f 'password not found in the environment { self . _uri } ' ) self . _password = os . environ [ password_var ] if self . _username and ( self . _password == '' or self . _password is None ): logger . error ( 'Malformed URI, username found but valid password not found ' f 'via environment variable in URI { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: username found ' f 'but password not found via environment variable { self . _uri } ' ) if self . _password and not self . _username : logger . error ( f 'Malformed URI, password found ' f 'but valid username environment variable missing in URI { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: password found ' f 'but username not found via environment variable { self . _uri } ' ) https_cached_dir = self . _trestle_cache_path / u . hostname # Skip any number of back- or forward slashes preceding the URI path (u.path) path_parent = pathlib . Path ( u . path [ re . search ( '[^/ \\\\\\\\ ]' , u . path ) . span ()[ 0 ]:]) . parent https_cached_dir = https_cached_dir / path_parent https_cached_dir . mkdir ( parents = True , exist_ok = True ) self . _cached_object_path = https_cached_dir / pathlib . Path ( pathlib . Path ( u . path ) . name ) LocalFetcher ( FetcherBase ) \u00a4 Fetcher for local content. Used for both file:/// and C:\\ or C:/ type paths, but the path must be absolute. Also used for trestle:// files present in the current trestle root. If file:/// is used on a Windows system, it must be followed by C:/ or other drive letter to be sure it is an absolute path, e.g. file:///C:/Users/Default/Documents/profile.json. The drive letter may be lowercase. LocalFetcher does not do any caching and assumes the file is quickly accessible. Methods \u00a4 __init__ ( self , trestle_root , uri ) special \u00a4 Initialize local fetcher. Parameters: Name Type Description Default trestle_root Path trestle root path required uri str Reference to the file in the local filesystem to cache, which must be outside trestle_root. required Source code in trestle/core/remote/cache.py def __init__ ( self , trestle_root : pathlib . Path , uri : str ) -> None : \"\"\"Initialize local fetcher. Args: trestle_root: trestle root path uri: Reference to the file in the local filesystem to cache, which must be outside trestle_root. \"\"\" super () . __init__ ( trestle_root , uri ) # Handle as file:/// form if uri . startswith ( const . FILE_URI ): # strip off entire header including / uri = uri [ len ( const . FILE_URI ):] # if it has a drive letter don't add / to front uri = uri if re . match ( const . WINDOWS_DRIVE_LETTER_REGEX , uri ) else '/' + uri elif uri . startswith ( const . TRESTLE_HREF_HEADING ): uri = str ( trestle_root / uri [ len ( const . TRESTLE_HREF_HEADING ):]) self . _abs_path = pathlib . Path ( uri ) . resolve () self . _cached_object_path = self . _abs_path return # now the URI should be either unix / style or windows C:/ style. It may be relative. if ':' in uri and platform . system () != const . WINDOWS_PLATFORM_STR : raise TrestleError ( f 'Cannot have : in uri on non-Windows system unless ftps, https or trestle: { uri } ' ) # if it has a drive letter but no / after it, it is not absolute if re . match ( const . WINDOWS_DRIVE_LETTER_REGEX , uri ): if platform . system () != const . WINDOWS_PLATFORM_STR : raise TrestleError ( f 'Cannot cache Windows paths on non-Windows system. { uri } ' ) # store the abs path to the file for fetching # if this is a windows file it will have a drive letter at start after resolve try : self . _abs_path = pathlib . Path ( uri ) . resolve () except Exception : raise TrestleError ( f 'The uri provided is invalid or unresolvable as a file path: { uri } ' ) # set the cached path to be the actual file path self . _cached_object_path = self . _abs_path SFTPFetcher ( FetcherBase ) \u00a4 Fetcher for SFTP content. Methods \u00a4 __init__ ( self , trestle_root , uri ) special \u00a4 Initialize SFTP fetcher. Update the expected cache path as per caching specs. Parameters: Name Type Description Default trestle_root Path Path of the Trestle project path, i.e., within which .trestle is to be found. required uri str Reference to the remote file to cache that can be fetched using the sftp:// scheme. required Source code in trestle/core/remote/cache.py def __init__ ( self , trestle_root : pathlib . Path , uri : str ) -> None : \"\"\"Initialize SFTP fetcher. Update the expected cache path as per caching specs. Args: trestle_root: Path of the Trestle project path, i.e., within which .trestle is to be found. uri: Reference to the remote file to cache that can be fetched using the sftp:// scheme. \"\"\" logger . debug ( f 'initialize SFTPFetcher for uri { uri } ' ) super () . __init__ ( trestle_root , uri ) # Is this a valid URI, however? Username and password are optional, of course. try : u = parse . urlparse ( self . _uri ) except Exception as e : logger . warning ( f 'SFTP fetcher unable to parse uri { self . _uri } error { e } ' ) raise TrestleError ( f 'Unable to parse malformed url { self . _uri } error { e } ' ) logger . debug ( f 'SFTP fetcher with parsed uri { u } ' ) if not u . hostname : logger . debug ( 'SFTP fetcher uri missing hostname' ) logger . warning ( f 'Malformed URI, cannot parse hostname in URL { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: missing hostname { self . _uri } ' ) if not u . path : logger . debug ( 'SFTP fetcher uri missing path' ) logger . warning ( f 'Malformed URI, cannot parse path in URL { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: missing file path { self . _uri } ' ) sftp_cached_dir = self . _trestle_cache_path / u . hostname # Skip any number of back- or forward slashes preceding the URL path (u.path) path_parent = pathlib . Path ( u . path [ re . search ( '[^/ \\\\\\\\ ]' , u . path ) . span ()[ 0 ]:]) . parent sftp_cached_dir = sftp_cached_dir / path_parent sftp_cached_dir . mkdir ( parents = True , exist_ok = True ) self . _cached_object_path = sftp_cached_dir / pathlib . Path ( pathlib . Path ( u . path ) . name ) handler: python","title":"cache"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache","text":"Trestle cache operations library. Allows for using URI's to reference external directories and then expand.","title":"cache"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherBase","text":"FetcherBase - base class for caching and fetching remote oscal objects.","title":"FetcherBase"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherBase-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherBase.__init__","text":"Intialize fetcher base. Parameters: Name Type Description Default trestle_root Path Path of the Trestle project path, i.e., within which .trestle is to be found. required uri str Reference to the source object to cache. required Source code in trestle/core/remote/cache.py def __init__ ( self , trestle_root : pathlib . Path , uri : str ) -> None : \"\"\"Intialize fetcher base. Args: trestle_root: Path of the Trestle project path, i.e., within which .trestle is to be found. uri: Reference to the source object to cache. \"\"\" logger . debug ( 'Initializing FetcherBase' ) self . _cached_object_path : pathlib . Path self . _uri = uri self . _trestle_root = trestle_root . resolve () self . _trestle_cache_path : pathlib . Path = self . _trestle_root / const . TRESTLE_CACHE_DIR # ensure trestle cache directory exists. self . _trestle_cache_path . mkdir ( exist_ok = True ) self . _expiration_seconds = const . DAY_SECONDS","title":"__init__()"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherBase.get_oscal","text":"Retrieve the cached file and model name without knowing its model type. Source code in trestle/core/remote/cache.py def get_oscal ( self , force_update = False ) -> Tuple [ OscalBaseModel , str ]: \"\"\"Retrieve the cached file and model name without knowing its model type.\"\"\" model_dict = self . get_raw ( force_update ) root_key = parser . root_key ( model_dict ) model_name = parser . to_full_model_name ( root_key ) if model_name is None : raise TrestleError ( f 'Failed cache read of non top level model with root_key { root_key } ' ) return parser . parse_dict ( model_dict [ root_key ], model_name ), root_key","title":"get_oscal()"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherBase.get_oscal_with_model_type","text":"Retrieve the cached file as a particular OSCAL model. Parameters: Name Type Description Default model_type Type[trestle.core.base_model.OscalBaseModel] Type[OscalBaseModel] Specifies the OSCAL model type of the fetched object. required Source code in trestle/core/remote/cache.py def get_oscal_with_model_type ( self , model_type : Type [ OscalBaseModel ], force_update = False ) -> OscalBaseModel : \"\"\"Retrieve the cached file as a particular OSCAL model. Arguments: model_type: Type[OscalBaseModel] Specifies the OSCAL model type of the fetched object. \"\"\" self . _update_cache ( force_update ) cache_file = self . _cached_object_path if cache_file . exists (): try : return model_type . oscal_read ( cache_file ) except Exception as e : logger . error ( f 'get_oscal failed, error loading cache file for { self . _uri } as { model_type } ' ) logger . debug ( e ) raise TrestleError ( f 'get_oscal failure for { self . _uri } ' ) from e else : logger . error ( f 'get_oscal error, no cached file for { self . _uri } ' ) raise TrestleError ( f 'get_oscal failure for { self . _uri } ' )","title":"get_oscal_with_model_type()"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherBase.get_raw","text":"Retrieve the raw dictionary representing the underlying object. Source code in trestle/core/remote/cache.py def get_raw ( self , force_update = False ) -> Dict [ str , Any ]: \"\"\"Retrieve the raw dictionary representing the underlying object.\"\"\" self . _update_cache ( force_update ) # Return results in the cache, whether yaml or json, or whatever is supported by fs.load_file(). try : raw_data = fs . load_file ( self . _cached_object_path ) except Exception : try : raw_data = fs . load_file ( self . _cached_object_path ) except Exception as e : logger . error ( f 'Cannot fs.load_file { self . _cached_object_path } ' ) logger . debug ( e ) raise TrestleError ( f 'Cache get failure for { self . _uri } ' ) from e return raw_data","title":"get_raw()"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherFactory","text":"Factory method for creating a fetcher.","title":"FetcherFactory"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherFactory-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherFactory.UriType","text":"Specify types of URI. HTTPS \u00a4 LOCAL_FILE \u00a4 SFTP \u00a4 TRESTLE \u00a4","title":"UriType"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherFactory-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherFactory.get_fetcher","text":"Return an instantiated fetcher object based on the type of URI. Parameters: Name Type Description Default trestle_root Path Path of the Trestle project path, i.e., within which .trestle is to be found. required uri str Reference to the remote object to cache. required Returns: Type Description FetcherBase fetcher object for the given URI. Source code in trestle/core/remote/cache.py @classmethod def get_fetcher ( cls , trestle_root : pathlib . Path , uri : str ) -> FetcherBase : \"\"\"Return an instantiated fetcher object based on the type of URI. Args: trestle_root: Path of the Trestle project path, i.e., within which .trestle is to be found. uri: Reference to the remote object to cache. Returns: fetcher object for the given URI. \"\"\" fetcher_dict = { FetcherFactory . UriType . LOCAL_FILE : LocalFetcher , FetcherFactory . UriType . SFTP : SFTPFetcher , FetcherFactory . UriType . HTTPS : HTTPSFetcher , FetcherFactory . UriType . TRESTLE : LocalFetcher , } uri_type = cls . _get_uri_type ( uri ) return fetcher_dict [ uri_type ]( trestle_root , uri )","title":"get_fetcher()"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.FetcherFactory.in_trestle_directory","text":"Check if in trestle directory when uri may not be a file path. Source code in trestle/core/remote/cache.py @staticmethod def in_trestle_directory ( trestle_root : pathlib . Path , uri : str ) -> bool : \"\"\"Check if in trestle directory when uri may not be a file path.\"\"\" uri_type = FetcherFactory . _get_uri_type ( uri ) if uri_type == FetcherFactory . UriType . TRESTLE : return True if uri_type != FetcherFactory . UriType . LOCAL_FILE : return False try : pathlib . Path ( uri ) . resolve () . relative_to ( str ( trestle_root . resolve ())) except Exception : return False return True","title":"in_trestle_directory()"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.HTTPSFetcher","text":"Fetcher for https content.","title":"HTTPSFetcher"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.HTTPSFetcher-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.HTTPSFetcher.__init__","text":"Initialize HTTPS fetcher. Source code in trestle/core/remote/cache.py def __init__ ( self , trestle_root : pathlib . Path , uri : str ) -> None : \"\"\"Initialize HTTPS fetcher.\"\"\" logger . debug ( 'Initializing HTTPSFetcher' ) super () . __init__ ( trestle_root , uri ) self . _username = None self . _password = None u = parse . urlparse ( self . _uri ) self . _url = uri # If the either the username or password is omitted in the URI, then the other becomes '' # so we test for either None or ''. if u . username != '' and u . username is not None : # This also checks for invalid environment variable name (IEEE 1003.1) if not re . match ( '{{[a-zA-Z_][a-zA-Z0-9_]*}}' , u . username ) or u . username == '{{_}}' : logger . error ( 'Malformed URI, ' f 'username must refer to an environment variable using moustache { self . _uri } ' ) raise TrestleError ( 'Cache request for invalid input URI: ' f 'username must refer to an environment variable using moustache { self . _uri } ' ) username_var = u . username [ 2 : - 2 ] if username_var not in os . environ : logger . error ( f 'Malformed URI, username not found in the environment { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: username not found in the environment { self . _uri } ' ) self . _username = os . environ [ username_var ] if u . password != '' and u . password is not None : if not re . match ( '{{[a-zA-Z_][a-zA-Z0-9_]*}}' , u . password ) or u . password == '{{_}}' : logger . error ( f 'Malformed URI, password must refer to an environment variable using moustache { self . _uri } ' ) raise TrestleError ( 'Cache request for invalid input URI: ' f 'password must refer to an environment variable using moustache { self . _uri } ' ) password_var = u . password [ 2 : - 2 ] if password_var not in os . environ : logger . error ( f 'Malformed URI, password not found in the environment { self . _uri } ' ) raise TrestleError ( 'Cache request for invalid input URI: ' f 'password not found in the environment { self . _uri } ' ) self . _password = os . environ [ password_var ] if self . _username and ( self . _password == '' or self . _password is None ): logger . error ( 'Malformed URI, username found but valid password not found ' f 'via environment variable in URI { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: username found ' f 'but password not found via environment variable { self . _uri } ' ) if self . _password and not self . _username : logger . error ( f 'Malformed URI, password found ' f 'but valid username environment variable missing in URI { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: password found ' f 'but username not found via environment variable { self . _uri } ' ) https_cached_dir = self . _trestle_cache_path / u . hostname # Skip any number of back- or forward slashes preceding the URI path (u.path) path_parent = pathlib . Path ( u . path [ re . search ( '[^/ \\\\\\\\ ]' , u . path ) . span ()[ 0 ]:]) . parent https_cached_dir = https_cached_dir / path_parent https_cached_dir . mkdir ( parents = True , exist_ok = True ) self . _cached_object_path = https_cached_dir / pathlib . Path ( pathlib . Path ( u . path ) . name )","title":"__init__()"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.LocalFetcher","text":"Fetcher for local content. Used for both file:/// and C:\\ or C:/ type paths, but the path must be absolute. Also used for trestle:// files present in the current trestle root. If file:/// is used on a Windows system, it must be followed by C:/ or other drive letter to be sure it is an absolute path, e.g. file:///C:/Users/Default/Documents/profile.json. The drive letter may be lowercase. LocalFetcher does not do any caching and assumes the file is quickly accessible.","title":"LocalFetcher"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.LocalFetcher-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.LocalFetcher.__init__","text":"Initialize local fetcher. Parameters: Name Type Description Default trestle_root Path trestle root path required uri str Reference to the file in the local filesystem to cache, which must be outside trestle_root. required Source code in trestle/core/remote/cache.py def __init__ ( self , trestle_root : pathlib . Path , uri : str ) -> None : \"\"\"Initialize local fetcher. Args: trestle_root: trestle root path uri: Reference to the file in the local filesystem to cache, which must be outside trestle_root. \"\"\" super () . __init__ ( trestle_root , uri ) # Handle as file:/// form if uri . startswith ( const . FILE_URI ): # strip off entire header including / uri = uri [ len ( const . FILE_URI ):] # if it has a drive letter don't add / to front uri = uri if re . match ( const . WINDOWS_DRIVE_LETTER_REGEX , uri ) else '/' + uri elif uri . startswith ( const . TRESTLE_HREF_HEADING ): uri = str ( trestle_root / uri [ len ( const . TRESTLE_HREF_HEADING ):]) self . _abs_path = pathlib . Path ( uri ) . resolve () self . _cached_object_path = self . _abs_path return # now the URI should be either unix / style or windows C:/ style. It may be relative. if ':' in uri and platform . system () != const . WINDOWS_PLATFORM_STR : raise TrestleError ( f 'Cannot have : in uri on non-Windows system unless ftps, https or trestle: { uri } ' ) # if it has a drive letter but no / after it, it is not absolute if re . match ( const . WINDOWS_DRIVE_LETTER_REGEX , uri ): if platform . system () != const . WINDOWS_PLATFORM_STR : raise TrestleError ( f 'Cannot cache Windows paths on non-Windows system. { uri } ' ) # store the abs path to the file for fetching # if this is a windows file it will have a drive letter at start after resolve try : self . _abs_path = pathlib . Path ( uri ) . resolve () except Exception : raise TrestleError ( f 'The uri provided is invalid or unresolvable as a file path: { uri } ' ) # set the cached path to be the actual file path self . _cached_object_path = self . _abs_path","title":"__init__()"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.SFTPFetcher","text":"Fetcher for SFTP content.","title":"SFTPFetcher"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.SFTPFetcher-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.remote.cache/#trestle.core.remote.cache.SFTPFetcher.__init__","text":"Initialize SFTP fetcher. Update the expected cache path as per caching specs. Parameters: Name Type Description Default trestle_root Path Path of the Trestle project path, i.e., within which .trestle is to be found. required uri str Reference to the remote file to cache that can be fetched using the sftp:// scheme. required Source code in trestle/core/remote/cache.py def __init__ ( self , trestle_root : pathlib . Path , uri : str ) -> None : \"\"\"Initialize SFTP fetcher. Update the expected cache path as per caching specs. Args: trestle_root: Path of the Trestle project path, i.e., within which .trestle is to be found. uri: Reference to the remote file to cache that can be fetched using the sftp:// scheme. \"\"\" logger . debug ( f 'initialize SFTPFetcher for uri { uri } ' ) super () . __init__ ( trestle_root , uri ) # Is this a valid URI, however? Username and password are optional, of course. try : u = parse . urlparse ( self . _uri ) except Exception as e : logger . warning ( f 'SFTP fetcher unable to parse uri { self . _uri } error { e } ' ) raise TrestleError ( f 'Unable to parse malformed url { self . _uri } error { e } ' ) logger . debug ( f 'SFTP fetcher with parsed uri { u } ' ) if not u . hostname : logger . debug ( 'SFTP fetcher uri missing hostname' ) logger . warning ( f 'Malformed URI, cannot parse hostname in URL { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: missing hostname { self . _uri } ' ) if not u . path : logger . debug ( 'SFTP fetcher uri missing path' ) logger . warning ( f 'Malformed URI, cannot parse path in URL { self . _uri } ' ) raise TrestleError ( f 'Cache request for invalid input URI: missing file path { self . _uri } ' ) sftp_cached_dir = self . _trestle_cache_path / u . hostname # Skip any number of back- or forward slashes preceding the URL path (u.path) path_parent = pathlib . Path ( u . path [ re . search ( '[^/ \\\\\\\\ ]' , u . path ) . span ()[ 0 ]:]) . parent sftp_cached_dir = sftp_cached_dir / path_parent sftp_cached_dir . mkdir ( parents = True , exist_ok = True ) self . _cached_object_path = sftp_cached_dir / pathlib . Path ( pathlib . Path ( u . path ) . name ) handler: python","title":"__init__()"},{"location":"api_reference/trestle.core.repository/","text":"trestle.core.repository \u00a4 Trestle Repository APIs. logger \u00a4 Classes \u00a4 ManagedOSCAL \u00a4 Object representing OSCAL models in repository for programmatic manipulation. Methods \u00a4 __init__ ( self , root_dir , model_type , name ) special \u00a4 Initialize repository OSCAL model object. Source code in trestle/core/repository.py def __init__ ( self , root_dir : pathlib . Path , model_type : Type [ OscalBaseModel ], name : str ) -> None : \"\"\"Initialize repository OSCAL model object.\"\"\" if not fs . is_valid_project_root ( root_dir ): raise TrestleError ( f 'Provided root directory { str ( root_dir ) } is not a valid Trestle root directory.' ) self . root_dir = root_dir self . model_type = model_type self . model_name = name # set model alais and dir self . model_alias = classname_to_alias ( self . model_type . __name__ , 'json' ) if parser . to_full_model_name ( self . model_alias ) is None : raise TrestleError ( f 'Given model { self . model_alias } is not a top level model.' ) plural_path = fs . model_type_to_model_dir ( self . model_alias ) self . model_dir = self . root_dir / plural_path / self . model_name if not self . model_dir . exists () or not self . model_dir . is_dir (): raise TrestleError ( f 'Model dir { self . model_name } does not exist.' ) file_content_type = FileContentType . path_to_content_type ( self . model_dir / self . model_alias ) if file_content_type == FileContentType . UNKNOWN : raise TrestleError ( f 'Model file for model { self . model_name } does not exist.' ) self . file_content_type = file_content_type filepath = pathlib . Path ( self . model_dir , self . model_alias + FileContentType . path_to_file_extension ( self . model_dir / self . model_alias ) ) self . filepath = filepath merge ( self , elements , parent_model_dir = None ) \u00a4 Merge OSCAL elements in repository. The parent_model_dir specifies the parent model direcotry in which to merge relative to main model dir. For example, if we have to merge 'metadata.*' into 'metadata' then parent_model_dir should be the 'catalog' dir that contains the 'metadata.json' file or the 'metadata' directory Source code in trestle/core/repository.py def merge ( self , elements : List [ str ], parent_model_dir : pathlib . Path = None ) -> bool : \"\"\"Merge OSCAL elements in repository. The parent_model_dir specifies the parent model direcotry in which to merge relative to main model dir. For example, if we have to merge 'metadata.*' into 'metadata' then parent_model_dir should be the 'catalog' dir that contains the 'metadata.json' file or the 'metadata' directory \"\"\" logger . debug ( f 'Merging model { self . model_name } , parent dir { parent_model_dir } .' ) if parent_model_dir is None : effective_cwd = self . model_dir else : effective_cwd = self . model_dir / parent_model_dir success = True try : for elem in elements : plan = mergecmd . MergeCmd . merge ( effective_cwd , ElementPath ( elem ), self . root_dir ) plan . simulate () plan . execute () except Exception as e : raise TrestleError ( f 'Error in merging model: { e } ' ) logger . debug ( f 'Model { self . model_name } merged successfully.' ) return success read ( self ) \u00a4 Read OSCAL model from repository. Source code in trestle/core/repository.py def read ( self ) -> OscalBaseModel : \"\"\"Read OSCAL model from repository.\"\"\" logger . debug ( f 'Reading model { self . model_name } .' ) _ , _ , model = load_distributed ( self . filepath , self . root_dir ) return model split ( self , model_file , elements ) \u00a4 Split the given OSCAL model file in repository. Model file path should be relative to the main model directory, e.g., model dir is /catalogs/NIST then model file path can be 'catalog/metadata.json' if metadata is to be split. Elements should be specified relative to model file, e.g., 'metadata.props.*' Source code in trestle/core/repository.py def split ( self , model_file : pathlib . Path , elements : List [ str ]) -> bool : \"\"\"Split the given OSCAL model file in repository. Model file path should be relative to the main model directory, e.g., model dir is <trestle-root>/catalogs/NIST then model file path can be 'catalog/metadata.json' if metadata is to be split. Elements should be specified relative to model file, e.g., 'metadata.props.*' \"\"\" logger . debug ( f 'Splitting model { self . model_name } , file { model_file } .' ) # input model_file should be relative to the model dir model_file_path = self . model_dir / model_file model_file_path = model_file_path . resolve () file_parent = model_file_path . parent filename = model_file_path . name elems = '' first = True for elem in elements : if first : elems = elem first = False else : elems = elems + ',' + elem success = False try : ret = splitcmd . SplitCmd () . perform_split ( file_parent , filename , elems , self . root_dir ) if ret == 0 : success = True except Exception as e : raise TrestleError ( f 'Error in splitting model: { e } ' ) logger . debug ( f 'Model { self . model_name } , file { model_file } splitted successfully.' ) return success validate ( self ) \u00a4 Validate OSCAL model in repository. Source code in trestle/core/repository.py def validate ( self ) -> bool : \"\"\"Validate OSCAL model in repository.\"\"\" logger . debug ( f 'Validating model { self . model_name } .' ) repo = Repository ( self . root_dir ) success = repo . validate_model ( self . model_type , self . model_name ) return success write ( self , model ) \u00a4 Write OSCAL model to repository. Source code in trestle/core/repository.py def write ( self , model : OscalBaseModel ) -> bool : \"\"\"Write OSCAL model to repository.\"\"\" logger . debug ( f 'Writing model { self . model_name } .' ) model_alias = classname_to_alias ( model . __class__ . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) # split directory if the model was split split_dir = pathlib . Path ( self . model_dir , self . model_alias ) # Prepare actions; delete split model dir if any, recreate model file, and write to filepath top_element = Element ( model ) remove_action = RemovePathAction ( split_dir ) create_action = CreatePathAction ( self . filepath , True ) write_action = WriteFileAction ( self . filepath , top_element , self . file_content_type ) # create a plan to create the directory and imported file. import_plan = Plan () import_plan . add_action ( remove_action ) import_plan . add_action ( create_action ) import_plan . add_action ( write_action ) import_plan . simulate () import_plan . execute () logger . debug ( f 'Model { self . model_name } written to repository' ) return True Repository \u00a4 Repository class for performing operations on Trestle repository. This class provides a set of APIs to perform operations on trestle repository programmatically rather than using the command line. It takes the trestle root directory as input while creating an instance of this object. Operations such as import and get model return a ManagedOSCAL object representing the specific model that can be used to perform operations on the specific models. Methods \u00a4 __init__ ( self , root_dir ) special \u00a4 Initialize trestle repository object. Source code in trestle/core/repository.py def __init__ ( self , root_dir : pathlib . Path ) -> None : \"\"\"Initialize trestle repository object.\"\"\" if not fs . is_valid_project_root ( root_dir ): raise TrestleError ( f 'Provided root directory { str ( root_dir ) } is not a valid Trestle root directory.' ) self . root_dir = root_dir assemble_model ( self , model_type , name , extension = 'json' ) \u00a4 Assemble an OSCAL model in repository and publish it to 'dist' directory. Source code in trestle/core/repository.py def assemble_model ( self , model_type : Type [ OscalBaseModel ], name : str , extension = 'json' ) -> bool : \"\"\"Assemble an OSCAL model in repository and publish it to 'dist' directory.\"\"\" logger . debug ( f 'Assembling model { name } of type { model_type . __name__ } .' ) success = False model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) if logger . getEffectiveLevel () <= logging . DEBUG : verbose = True else : verbose = False args = argparse . Namespace ( type = model_alias , name = name , extension = extension , trestle_root = self . root_dir , verbose = verbose ) try : ret = assemblecmd . AssembleCmd () . assemble_model ( model_alias , model_type , args ) if ret == 0 : success = True except Exception as e : raise TrestleError ( f 'Error in assembling model: { e } ' ) logger . debug ( f 'Model { name } assembled successfully.' ) return success delete_model ( self , model_type , name ) \u00a4 Delete an OSCAL model from repository. Source code in trestle/core/repository.py def delete_model ( self , model_type : Type [ OscalBaseModel ], name : str ) -> bool : \"\"\"Delete an OSCAL model from repository.\"\"\" logger . debug ( f 'Deleting model { name } of type { model_type . __name__ } .' ) model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) plural_path = fs . model_type_to_model_dir ( model_alias ) desired_model_dir = self . root_dir / plural_path / name if not desired_model_dir . exists () or not desired_model_dir . is_dir (): logger . error ( f 'Model { name } does not exist.' ) raise TrestleError ( f 'Model { name } does not exist.' ) shutil . rmtree ( desired_model_dir ) # remove model from dist directory if it exists dist_model_dir = self . root_dir / const . TRESTLE_DIST_DIR / plural_path file_content_type = FileContentType . path_to_content_type ( dist_model_dir / name ) if file_content_type != FileContentType . UNKNOWN : file_path = pathlib . Path ( dist_model_dir , name + FileContentType . path_to_file_extension ( dist_model_dir / name ) ) logger . debug ( f 'Deleting model { name } from dist directory.' ) os . remove ( file_path ) logger . debug ( f 'Model { name } deleted successfully.' ) return True get_model ( self , model_type , name ) \u00a4 Get a specific OSCAL model from repository. Source code in trestle/core/repository.py def get_model ( self , model_type : Type [ OscalBaseModel ], name : str ) -> ManagedOSCAL : \"\"\"Get a specific OSCAL model from repository.\"\"\" logger . debug ( f 'Getting model { name } of type { model_type . __name__ } .' ) model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) plural_path = fs . model_type_to_model_dir ( model_alias ) desired_model_dir = self . root_dir / plural_path / name if not desired_model_dir . exists () or not desired_model_dir . is_dir (): logger . error ( f 'Model { name } does not exist.' ) raise TrestleError ( f 'Model { name } does not exist.' ) return ManagedOSCAL ( self . root_dir , model_type , name ) import_model ( self , model , name , content_type = 'json' ) \u00a4 Import OSCAL object into trestle repository. Source code in trestle/core/repository.py def import_model ( self , model : OscalBaseModel , name : str , content_type = 'json' ) -> ManagedOSCAL : \"\"\"Import OSCAL object into trestle repository.\"\"\" logger . debug ( f 'Importing model { name } of type { model . __class__ . __name__ } .' ) model_alias = classname_to_alias ( model . __class__ . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) # Work out output directory and file plural_path = fs . model_type_to_model_dir ( model_alias ) desired_model_dir = self . root_dir / plural_path desired_model_path = desired_model_dir / name / ( model_alias + '.' + content_type ) desired_model_path = desired_model_path . resolve () if desired_model_path . exists (): logger . error ( f 'OSCAL file to be created here: { desired_model_path } exists.' ) raise TrestleError ( f 'OSCAL file to be created here: { desired_model_path } exists.' ) content_type = FileContentType . to_content_type ( pathlib . Path ( desired_model_path ) . suffix ) # Prepare actions top_element = Element ( model ) create_action = CreatePathAction ( desired_model_path , True ) write_action = WriteFileAction ( desired_model_path , top_element , content_type ) # create a plan to create the directory and imported file. import_plan = Plan () import_plan . add_action ( create_action ) import_plan . add_action ( write_action ) import_plan . simulate () import_plan . execute () # Validate the imported file, rollback if unsuccessful success = False errmsg = '' try : success = self . validate_model ( model . __class__ , name ) if not success : errmsg = f 'Validation of model { name } did not pass' logger . error ( errmsg ) except Exception as err : logger . error ( errmsg ) errmsg = f 'Import of model { name } failed. Validation failed with error: { err } ' if not success : # rollback in case of validation error or failure logger . debug ( f 'Rolling back import of model { name } to { desired_model_path } ' ) try : import_plan . rollback () except TrestleError as err : logger . error ( f 'Failed to rollback: { err } . Remove { desired_model_path } to resolve state.' ) else : logger . debug ( f 'Successful rollback of import to { desired_model_path } ' ) # raise trestle error raise TrestleError ( errmsg ) # all well; model was imported and validated successfully logger . debug ( f 'Model { name } of type { model . __class__ . __name__ } imported successfully.' ) return ManagedOSCAL ( self . root_dir , model . __class__ , name ) list_models ( self , model_type ) \u00a4 List models of a given type in trestle repository. Source code in trestle/core/repository.py def list_models ( self , model_type : Type [ OscalBaseModel ]) -> List [ str ]: \"\"\"List models of a given type in trestle repository.\"\"\" logger . debug ( f 'Listing models of type { model_type . __name__ } .' ) model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) models = fs . get_models_of_type ( model_alias , self . root_dir ) return models validate_model ( self , model_type , name ) \u00a4 Validate an OSCAL model in repository. Source code in trestle/core/repository.py def validate_model ( self , model_type : Type [ OscalBaseModel ], name : str ) -> bool : \"\"\"Validate an OSCAL model in repository.\"\"\" logger . debug ( f 'Validating model { name } of type { model_type . __name__ } .' ) success = False model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) if logger . getEffectiveLevel () <= logging . DEBUG : verbose = True else : verbose = False args = argparse . Namespace ( type = model_alias , name = name , trestle_root = self . root_dir , verbose = verbose ) try : ret = validatecmd . ValidateCmd () . _run ( args ) if ret == 0 : success = True except Exception as e : raise TrestleError ( f 'Error in validating model: { e } ' ) logger . debug ( f 'Model { name } validated successfully.' ) return success handler: python","title":"repository"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository","text":"Trestle Repository APIs.","title":"repository"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.ManagedOSCAL","text":"Object representing OSCAL models in repository for programmatic manipulation.","title":"ManagedOSCAL"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.ManagedOSCAL-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.ManagedOSCAL.__init__","text":"Initialize repository OSCAL model object. Source code in trestle/core/repository.py def __init__ ( self , root_dir : pathlib . Path , model_type : Type [ OscalBaseModel ], name : str ) -> None : \"\"\"Initialize repository OSCAL model object.\"\"\" if not fs . is_valid_project_root ( root_dir ): raise TrestleError ( f 'Provided root directory { str ( root_dir ) } is not a valid Trestle root directory.' ) self . root_dir = root_dir self . model_type = model_type self . model_name = name # set model alais and dir self . model_alias = classname_to_alias ( self . model_type . __name__ , 'json' ) if parser . to_full_model_name ( self . model_alias ) is None : raise TrestleError ( f 'Given model { self . model_alias } is not a top level model.' ) plural_path = fs . model_type_to_model_dir ( self . model_alias ) self . model_dir = self . root_dir / plural_path / self . model_name if not self . model_dir . exists () or not self . model_dir . is_dir (): raise TrestleError ( f 'Model dir { self . model_name } does not exist.' ) file_content_type = FileContentType . path_to_content_type ( self . model_dir / self . model_alias ) if file_content_type == FileContentType . UNKNOWN : raise TrestleError ( f 'Model file for model { self . model_name } does not exist.' ) self . file_content_type = file_content_type filepath = pathlib . Path ( self . model_dir , self . model_alias + FileContentType . path_to_file_extension ( self . model_dir / self . model_alias ) ) self . filepath = filepath","title":"__init__()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.ManagedOSCAL.merge","text":"Merge OSCAL elements in repository. The parent_model_dir specifies the parent model direcotry in which to merge relative to main model dir. For example, if we have to merge 'metadata.*' into 'metadata' then parent_model_dir should be the 'catalog' dir that contains the 'metadata.json' file or the 'metadata' directory Source code in trestle/core/repository.py def merge ( self , elements : List [ str ], parent_model_dir : pathlib . Path = None ) -> bool : \"\"\"Merge OSCAL elements in repository. The parent_model_dir specifies the parent model direcotry in which to merge relative to main model dir. For example, if we have to merge 'metadata.*' into 'metadata' then parent_model_dir should be the 'catalog' dir that contains the 'metadata.json' file or the 'metadata' directory \"\"\" logger . debug ( f 'Merging model { self . model_name } , parent dir { parent_model_dir } .' ) if parent_model_dir is None : effective_cwd = self . model_dir else : effective_cwd = self . model_dir / parent_model_dir success = True try : for elem in elements : plan = mergecmd . MergeCmd . merge ( effective_cwd , ElementPath ( elem ), self . root_dir ) plan . simulate () plan . execute () except Exception as e : raise TrestleError ( f 'Error in merging model: { e } ' ) logger . debug ( f 'Model { self . model_name } merged successfully.' ) return success","title":"merge()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.ManagedOSCAL.read","text":"Read OSCAL model from repository. Source code in trestle/core/repository.py def read ( self ) -> OscalBaseModel : \"\"\"Read OSCAL model from repository.\"\"\" logger . debug ( f 'Reading model { self . model_name } .' ) _ , _ , model = load_distributed ( self . filepath , self . root_dir ) return model","title":"read()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.ManagedOSCAL.split","text":"Split the given OSCAL model file in repository. Model file path should be relative to the main model directory, e.g., model dir is /catalogs/NIST then model file path can be 'catalog/metadata.json' if metadata is to be split. Elements should be specified relative to model file, e.g., 'metadata.props.*' Source code in trestle/core/repository.py def split ( self , model_file : pathlib . Path , elements : List [ str ]) -> bool : \"\"\"Split the given OSCAL model file in repository. Model file path should be relative to the main model directory, e.g., model dir is <trestle-root>/catalogs/NIST then model file path can be 'catalog/metadata.json' if metadata is to be split. Elements should be specified relative to model file, e.g., 'metadata.props.*' \"\"\" logger . debug ( f 'Splitting model { self . model_name } , file { model_file } .' ) # input model_file should be relative to the model dir model_file_path = self . model_dir / model_file model_file_path = model_file_path . resolve () file_parent = model_file_path . parent filename = model_file_path . name elems = '' first = True for elem in elements : if first : elems = elem first = False else : elems = elems + ',' + elem success = False try : ret = splitcmd . SplitCmd () . perform_split ( file_parent , filename , elems , self . root_dir ) if ret == 0 : success = True except Exception as e : raise TrestleError ( f 'Error in splitting model: { e } ' ) logger . debug ( f 'Model { self . model_name } , file { model_file } splitted successfully.' ) return success","title":"split()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.ManagedOSCAL.validate","text":"Validate OSCAL model in repository. Source code in trestle/core/repository.py def validate ( self ) -> bool : \"\"\"Validate OSCAL model in repository.\"\"\" logger . debug ( f 'Validating model { self . model_name } .' ) repo = Repository ( self . root_dir ) success = repo . validate_model ( self . model_type , self . model_name ) return success","title":"validate()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.ManagedOSCAL.write","text":"Write OSCAL model to repository. Source code in trestle/core/repository.py def write ( self , model : OscalBaseModel ) -> bool : \"\"\"Write OSCAL model to repository.\"\"\" logger . debug ( f 'Writing model { self . model_name } .' ) model_alias = classname_to_alias ( model . __class__ . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) # split directory if the model was split split_dir = pathlib . Path ( self . model_dir , self . model_alias ) # Prepare actions; delete split model dir if any, recreate model file, and write to filepath top_element = Element ( model ) remove_action = RemovePathAction ( split_dir ) create_action = CreatePathAction ( self . filepath , True ) write_action = WriteFileAction ( self . filepath , top_element , self . file_content_type ) # create a plan to create the directory and imported file. import_plan = Plan () import_plan . add_action ( remove_action ) import_plan . add_action ( create_action ) import_plan . add_action ( write_action ) import_plan . simulate () import_plan . execute () logger . debug ( f 'Model { self . model_name } written to repository' ) return True","title":"write()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository","text":"Repository class for performing operations on Trestle repository. This class provides a set of APIs to perform operations on trestle repository programmatically rather than using the command line. It takes the trestle root directory as input while creating an instance of this object. Operations such as import and get model return a ManagedOSCAL object representing the specific model that can be used to perform operations on the specific models.","title":"Repository"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository.__init__","text":"Initialize trestle repository object. Source code in trestle/core/repository.py def __init__ ( self , root_dir : pathlib . Path ) -> None : \"\"\"Initialize trestle repository object.\"\"\" if not fs . is_valid_project_root ( root_dir ): raise TrestleError ( f 'Provided root directory { str ( root_dir ) } is not a valid Trestle root directory.' ) self . root_dir = root_dir","title":"__init__()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository.assemble_model","text":"Assemble an OSCAL model in repository and publish it to 'dist' directory. Source code in trestle/core/repository.py def assemble_model ( self , model_type : Type [ OscalBaseModel ], name : str , extension = 'json' ) -> bool : \"\"\"Assemble an OSCAL model in repository and publish it to 'dist' directory.\"\"\" logger . debug ( f 'Assembling model { name } of type { model_type . __name__ } .' ) success = False model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) if logger . getEffectiveLevel () <= logging . DEBUG : verbose = True else : verbose = False args = argparse . Namespace ( type = model_alias , name = name , extension = extension , trestle_root = self . root_dir , verbose = verbose ) try : ret = assemblecmd . AssembleCmd () . assemble_model ( model_alias , model_type , args ) if ret == 0 : success = True except Exception as e : raise TrestleError ( f 'Error in assembling model: { e } ' ) logger . debug ( f 'Model { name } assembled successfully.' ) return success","title":"assemble_model()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository.delete_model","text":"Delete an OSCAL model from repository. Source code in trestle/core/repository.py def delete_model ( self , model_type : Type [ OscalBaseModel ], name : str ) -> bool : \"\"\"Delete an OSCAL model from repository.\"\"\" logger . debug ( f 'Deleting model { name } of type { model_type . __name__ } .' ) model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) plural_path = fs . model_type_to_model_dir ( model_alias ) desired_model_dir = self . root_dir / plural_path / name if not desired_model_dir . exists () or not desired_model_dir . is_dir (): logger . error ( f 'Model { name } does not exist.' ) raise TrestleError ( f 'Model { name } does not exist.' ) shutil . rmtree ( desired_model_dir ) # remove model from dist directory if it exists dist_model_dir = self . root_dir / const . TRESTLE_DIST_DIR / plural_path file_content_type = FileContentType . path_to_content_type ( dist_model_dir / name ) if file_content_type != FileContentType . UNKNOWN : file_path = pathlib . Path ( dist_model_dir , name + FileContentType . path_to_file_extension ( dist_model_dir / name ) ) logger . debug ( f 'Deleting model { name } from dist directory.' ) os . remove ( file_path ) logger . debug ( f 'Model { name } deleted successfully.' ) return True","title":"delete_model()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository.get_model","text":"Get a specific OSCAL model from repository. Source code in trestle/core/repository.py def get_model ( self , model_type : Type [ OscalBaseModel ], name : str ) -> ManagedOSCAL : \"\"\"Get a specific OSCAL model from repository.\"\"\" logger . debug ( f 'Getting model { name } of type { model_type . __name__ } .' ) model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) plural_path = fs . model_type_to_model_dir ( model_alias ) desired_model_dir = self . root_dir / plural_path / name if not desired_model_dir . exists () or not desired_model_dir . is_dir (): logger . error ( f 'Model { name } does not exist.' ) raise TrestleError ( f 'Model { name } does not exist.' ) return ManagedOSCAL ( self . root_dir , model_type , name )","title":"get_model()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository.import_model","text":"Import OSCAL object into trestle repository. Source code in trestle/core/repository.py def import_model ( self , model : OscalBaseModel , name : str , content_type = 'json' ) -> ManagedOSCAL : \"\"\"Import OSCAL object into trestle repository.\"\"\" logger . debug ( f 'Importing model { name } of type { model . __class__ . __name__ } .' ) model_alias = classname_to_alias ( model . __class__ . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) # Work out output directory and file plural_path = fs . model_type_to_model_dir ( model_alias ) desired_model_dir = self . root_dir / plural_path desired_model_path = desired_model_dir / name / ( model_alias + '.' + content_type ) desired_model_path = desired_model_path . resolve () if desired_model_path . exists (): logger . error ( f 'OSCAL file to be created here: { desired_model_path } exists.' ) raise TrestleError ( f 'OSCAL file to be created here: { desired_model_path } exists.' ) content_type = FileContentType . to_content_type ( pathlib . Path ( desired_model_path ) . suffix ) # Prepare actions top_element = Element ( model ) create_action = CreatePathAction ( desired_model_path , True ) write_action = WriteFileAction ( desired_model_path , top_element , content_type ) # create a plan to create the directory and imported file. import_plan = Plan () import_plan . add_action ( create_action ) import_plan . add_action ( write_action ) import_plan . simulate () import_plan . execute () # Validate the imported file, rollback if unsuccessful success = False errmsg = '' try : success = self . validate_model ( model . __class__ , name ) if not success : errmsg = f 'Validation of model { name } did not pass' logger . error ( errmsg ) except Exception as err : logger . error ( errmsg ) errmsg = f 'Import of model { name } failed. Validation failed with error: { err } ' if not success : # rollback in case of validation error or failure logger . debug ( f 'Rolling back import of model { name } to { desired_model_path } ' ) try : import_plan . rollback () except TrestleError as err : logger . error ( f 'Failed to rollback: { err } . Remove { desired_model_path } to resolve state.' ) else : logger . debug ( f 'Successful rollback of import to { desired_model_path } ' ) # raise trestle error raise TrestleError ( errmsg ) # all well; model was imported and validated successfully logger . debug ( f 'Model { name } of type { model . __class__ . __name__ } imported successfully.' ) return ManagedOSCAL ( self . root_dir , model . __class__ , name )","title":"import_model()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository.list_models","text":"List models of a given type in trestle repository. Source code in trestle/core/repository.py def list_models ( self , model_type : Type [ OscalBaseModel ]) -> List [ str ]: \"\"\"List models of a given type in trestle repository.\"\"\" logger . debug ( f 'Listing models of type { model_type . __name__ } .' ) model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) models = fs . get_models_of_type ( model_alias , self . root_dir ) return models","title":"list_models()"},{"location":"api_reference/trestle.core.repository/#trestle.core.repository.Repository.validate_model","text":"Validate an OSCAL model in repository. Source code in trestle/core/repository.py def validate_model ( self , model_type : Type [ OscalBaseModel ], name : str ) -> bool : \"\"\"Validate an OSCAL model in repository.\"\"\" logger . debug ( f 'Validating model { name } of type { model_type . __name__ } .' ) success = False model_alias = classname_to_alias ( model_type . __name__ , 'json' ) if parser . to_full_model_name ( model_alias ) is None : raise TrestleError ( f 'Given model { model_alias } is not a top level model.' ) if logger . getEffectiveLevel () <= logging . DEBUG : verbose = True else : verbose = False args = argparse . Namespace ( type = model_alias , name = name , trestle_root = self . root_dir , verbose = verbose ) try : ret = validatecmd . ValidateCmd () . _run ( args ) if ret == 0 : success = True except Exception as e : raise TrestleError ( f 'Error in validating model: { e } ' ) logger . debug ( f 'Model { name } validated successfully.' ) return success handler: python","title":"validate_model()"},{"location":"api_reference/trestle.core.utils/","text":"trestle.core.utils \u00a4 Utilities for dealing with models. TG \u00a4 logger \u00a4 Functions \u00a4 alias_to_classname ( alias , mode ) \u00a4 Return class name based dashed or snake alias. This is applicable creating dynamic wrapper model for a list or dict field. Source code in trestle/core/utils.py def alias_to_classname ( alias : str , mode : str ) -> str : \"\"\" Return class name based dashed or snake alias. This is applicable creating dynamic wrapper model for a list or dict field. \"\"\" if mode == 'json' : return snake_to_upper_camel ( alias . replace ( '-' , '_' )) elif mode == 'field' : return snake_to_upper_camel ( alias ) else : raise err . TrestleError ( 'Bad option' ) camel_to_dash ( name ) \u00a4 Convert camelcase to dashcase. Source code in trestle/core/utils.py def camel_to_dash ( name : str ) -> str : \"\"\"Convert camelcase to dashcase.\"\"\" return camel_to_snake ( name ) . replace ( '_' , '-' ) camel_to_snake ( camel ) \u00a4 Convert camel case to snake. Source code in trestle/core/utils.py def camel_to_snake ( camel : str ) -> str : \"\"\"Convert camel case to snake.\"\"\" if not camel : return camel snake = camel [ 0 ] . lower () for c in camel [ 1 :]: if c . isupper (): snake = snake + '_' snake = snake + c . lower () return snake classname_to_alias ( classname , mode ) \u00a4 Return oscal key name or field element name based on class name. This is applicable when asking for a singular element. Source code in trestle/core/utils.py def classname_to_alias ( classname : str , mode : str ) -> str : \"\"\" Return oscal key name or field element name based on class name. This is applicable when asking for a singular element. \"\"\" suffix = classname . split ( '.' )[ - 1 ] if mode == 'json' : # things like class_ should just be class if suffix [ - 1 ] == '_' : suffix = suffix [: - 1 ] return camel_to_dash ( suffix ) . rstrip ( '1234567890' ) elif mode == 'field' : return camel_to_snake ( suffix ) . rstrip ( '1234567890' ) else : raise err . TrestleError ( 'Bad option' ) dash_to_underscore ( name ) \u00a4 Convert dash to underscore. Source code in trestle/core/utils.py def dash_to_underscore ( name : str ) -> str : \"\"\"Convert dash to underscore.\"\"\" return name . replace ( '-' , '_' ) get_elements_of_model_type ( object_of_interest , type_of_interest ) \u00a4 Return a flat list of a given type of pydantic object based on a presumed encompasing root object. One warning. This object preserves the underlying object tree. So when you use this function do NOT recurse on the results or you will end up with duplication errors. Source code in trestle/core/utils.py def get_elements_of_model_type ( object_of_interest , type_of_interest ): \"\"\" Return a flat list of a given type of pydantic object based on a presumed encompasing root object. One warning. This object preserves the underlying object tree. So when you use this function do NOT recurse on the results or you will end up with duplication errors. \"\"\" loi = [] if type ( object_of_interest ) == type_of_interest : loi . append ( object_of_interest ) # keep going if type ( object_of_interest ) is list : for item in object_of_interest : loi . extend ( get_elements_of_model_type ( item , type_of_interest )) if isinstance ( object_of_interest , BaseModel ): for field in object_of_interest . __fields_set__ : if field == '__root__' : continue loi . extend ( get_elements_of_model_type ( getattr ( object_of_interest , field ), type_of_interest )) return loi get_inner_type ( collection_field_type ) \u00a4 Get the inner model in a generic collection model such as a List or a Dict. For a dict the return type is of the value and not the key. Parameters: Name Type Description Default collection_field_type Union[Type[List[~TG]], Type[Dict[str, ~TG]]] Provided type annotation from a pydantic object required Returns: Type Description Type[~TG] The desired type. Source code in trestle/core/utils.py def get_inner_type ( collection_field_type : Union [ Type [ List [ TG ]], Type [ Dict [ str , TG ]]]) -> Type [ TG ]: \"\"\"Get the inner model in a generic collection model such as a List or a Dict. For a dict the return type is of the value and not the key. Args: collection_field_type: Provided type annotation from a pydantic object Returns: The desired type. \"\"\" try : # Pydantic special cases must be dealt with here: _ , _ , singular_type = _get_model_field_info ( collection_field_type ) if singular_type is not None : return singular_type return typing_extensions . get_args ( collection_field_type )[ - 1 ] except Exception as e : logger . debug ( e ) raise err . TrestleError ( 'Model type is not a Dict or List' ) from e get_origin ( field_type ) \u00a4 Generalized and robust get_origin function. This function is derived from work by pydantic, however, avoids complications from various python versions. Source code in trestle/core/utils.py def get_origin ( field_type : Type [ Any ]) -> Optional [ Type [ Any ]]: \"\"\"Generalized and robust get_origin function. This function is derived from work by pydantic, however, avoids complications from various python versions. \"\"\" # This executes a fallback that allows a list to be generated from a constrained list. return typing_extensions . get_origin ( field_type ) or getattr ( field_type , '__origin__' , None ) get_root_model ( module_name ) \u00a4 Get the root model class and alias based on the module. Source code in trestle/core/utils.py @no_type_check def get_root_model ( module_name : str ) -> Tuple [ Type [ Any ], str ]: \"\"\"Get the root model class and alias based on the module.\"\"\" try : module = importlib . import_module ( module_name ) except ModuleNotFoundError as e : raise err . TrestleError ( str ( e )) if hasattr ( module , 'Model' ): model_metadata = next ( iter ( module . Model . __fields__ . values ())) return ( model_metadata . type_ , model_metadata . alias ) else : raise err . TrestleError ( 'Invalid module' ) is_collection_field_type ( field_type ) \u00a4 Check whether a type hint is a collection type as used by OSCAL. Specifically this is whether the type is a list or string. Parameters: Name Type Description Default field_type Type[Any] A type or a type alias of a field typically as served via pydantic introspection required Returns: Type Description bool Status if if it is a list or dict return type as used by oscal. Source code in trestle/core/utils.py def is_collection_field_type ( field_type : Type [ Any ]) -> bool : \"\"\"Check whether a type hint is a collection type as used by OSCAL. Specifically this is whether the type is a list or string. Args: field_type: A type or a type alias of a field typically as served via pydantic introspection Returns: Status if if it is a list or dict return type as used by oscal. \"\"\" # first check if it is a pydantic __root__ object _ , root_type , _ = _get_model_field_info ( field_type ) if root_type is not None : return root_type in [ 'List' , 'Dict' ] # Retrieves type from a type annotation origin_type = get_origin ( field_type ) # dict in fact may not be possible return origin_type in [ list , dict ] snake_to_upper_camel ( snake ) \u00a4 Convert snake to upper camel, ignoring start/end underscores. Source code in trestle/core/utils.py def snake_to_upper_camel ( snake : str ) -> str : \"\"\"Convert snake to upper camel, ignoring start/end underscores.\"\"\" if not snake : return snake snake = snake . lower () camel = '' lift = True for s in snake : if s == '_' : lift = True continue if lift : camel = camel + s . upper () lift = False else : camel = camel + s return camel underscore_to_dash ( name ) \u00a4 Convert underscore to dash and drop final dash if present. Source code in trestle/core/utils.py def underscore_to_dash ( name : str ) -> str : \"\"\"Convert underscore to dash and drop final dash if present.\"\"\" converted = name . replace ( '_' , '-' ) return converted if converted [ - 1 ] != '-' else converted [: - 1 ] handler: python","title":"utils"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils","text":"Utilities for dealing with models.","title":"utils"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.TG","text":"","title":"TG"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.alias_to_classname","text":"Return class name based dashed or snake alias. This is applicable creating dynamic wrapper model for a list or dict field. Source code in trestle/core/utils.py def alias_to_classname ( alias : str , mode : str ) -> str : \"\"\" Return class name based dashed or snake alias. This is applicable creating dynamic wrapper model for a list or dict field. \"\"\" if mode == 'json' : return snake_to_upper_camel ( alias . replace ( '-' , '_' )) elif mode == 'field' : return snake_to_upper_camel ( alias ) else : raise err . TrestleError ( 'Bad option' )","title":"alias_to_classname()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.camel_to_dash","text":"Convert camelcase to dashcase. Source code in trestle/core/utils.py def camel_to_dash ( name : str ) -> str : \"\"\"Convert camelcase to dashcase.\"\"\" return camel_to_snake ( name ) . replace ( '_' , '-' )","title":"camel_to_dash()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.camel_to_snake","text":"Convert camel case to snake. Source code in trestle/core/utils.py def camel_to_snake ( camel : str ) -> str : \"\"\"Convert camel case to snake.\"\"\" if not camel : return camel snake = camel [ 0 ] . lower () for c in camel [ 1 :]: if c . isupper (): snake = snake + '_' snake = snake + c . lower () return snake","title":"camel_to_snake()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.classname_to_alias","text":"Return oscal key name or field element name based on class name. This is applicable when asking for a singular element. Source code in trestle/core/utils.py def classname_to_alias ( classname : str , mode : str ) -> str : \"\"\" Return oscal key name or field element name based on class name. This is applicable when asking for a singular element. \"\"\" suffix = classname . split ( '.' )[ - 1 ] if mode == 'json' : # things like class_ should just be class if suffix [ - 1 ] == '_' : suffix = suffix [: - 1 ] return camel_to_dash ( suffix ) . rstrip ( '1234567890' ) elif mode == 'field' : return camel_to_snake ( suffix ) . rstrip ( '1234567890' ) else : raise err . TrestleError ( 'Bad option' )","title":"classname_to_alias()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.dash_to_underscore","text":"Convert dash to underscore. Source code in trestle/core/utils.py def dash_to_underscore ( name : str ) -> str : \"\"\"Convert dash to underscore.\"\"\" return name . replace ( '-' , '_' )","title":"dash_to_underscore()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.get_elements_of_model_type","text":"Return a flat list of a given type of pydantic object based on a presumed encompasing root object. One warning. This object preserves the underlying object tree. So when you use this function do NOT recurse on the results or you will end up with duplication errors. Source code in trestle/core/utils.py def get_elements_of_model_type ( object_of_interest , type_of_interest ): \"\"\" Return a flat list of a given type of pydantic object based on a presumed encompasing root object. One warning. This object preserves the underlying object tree. So when you use this function do NOT recurse on the results or you will end up with duplication errors. \"\"\" loi = [] if type ( object_of_interest ) == type_of_interest : loi . append ( object_of_interest ) # keep going if type ( object_of_interest ) is list : for item in object_of_interest : loi . extend ( get_elements_of_model_type ( item , type_of_interest )) if isinstance ( object_of_interest , BaseModel ): for field in object_of_interest . __fields_set__ : if field == '__root__' : continue loi . extend ( get_elements_of_model_type ( getattr ( object_of_interest , field ), type_of_interest )) return loi","title":"get_elements_of_model_type()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.get_inner_type","text":"Get the inner model in a generic collection model such as a List or a Dict. For a dict the return type is of the value and not the key. Parameters: Name Type Description Default collection_field_type Union[Type[List[~TG]], Type[Dict[str, ~TG]]] Provided type annotation from a pydantic object required Returns: Type Description Type[~TG] The desired type. Source code in trestle/core/utils.py def get_inner_type ( collection_field_type : Union [ Type [ List [ TG ]], Type [ Dict [ str , TG ]]]) -> Type [ TG ]: \"\"\"Get the inner model in a generic collection model such as a List or a Dict. For a dict the return type is of the value and not the key. Args: collection_field_type: Provided type annotation from a pydantic object Returns: The desired type. \"\"\" try : # Pydantic special cases must be dealt with here: _ , _ , singular_type = _get_model_field_info ( collection_field_type ) if singular_type is not None : return singular_type return typing_extensions . get_args ( collection_field_type )[ - 1 ] except Exception as e : logger . debug ( e ) raise err . TrestleError ( 'Model type is not a Dict or List' ) from e","title":"get_inner_type()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.get_origin","text":"Generalized and robust get_origin function. This function is derived from work by pydantic, however, avoids complications from various python versions. Source code in trestle/core/utils.py def get_origin ( field_type : Type [ Any ]) -> Optional [ Type [ Any ]]: \"\"\"Generalized and robust get_origin function. This function is derived from work by pydantic, however, avoids complications from various python versions. \"\"\" # This executes a fallback that allows a list to be generated from a constrained list. return typing_extensions . get_origin ( field_type ) or getattr ( field_type , '__origin__' , None )","title":"get_origin()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.get_root_model","text":"Get the root model class and alias based on the module. Source code in trestle/core/utils.py @no_type_check def get_root_model ( module_name : str ) -> Tuple [ Type [ Any ], str ]: \"\"\"Get the root model class and alias based on the module.\"\"\" try : module = importlib . import_module ( module_name ) except ModuleNotFoundError as e : raise err . TrestleError ( str ( e )) if hasattr ( module , 'Model' ): model_metadata = next ( iter ( module . Model . __fields__ . values ())) return ( model_metadata . type_ , model_metadata . alias ) else : raise err . TrestleError ( 'Invalid module' )","title":"get_root_model()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.is_collection_field_type","text":"Check whether a type hint is a collection type as used by OSCAL. Specifically this is whether the type is a list or string. Parameters: Name Type Description Default field_type Type[Any] A type or a type alias of a field typically as served via pydantic introspection required Returns: Type Description bool Status if if it is a list or dict return type as used by oscal. Source code in trestle/core/utils.py def is_collection_field_type ( field_type : Type [ Any ]) -> bool : \"\"\"Check whether a type hint is a collection type as used by OSCAL. Specifically this is whether the type is a list or string. Args: field_type: A type or a type alias of a field typically as served via pydantic introspection Returns: Status if if it is a list or dict return type as used by oscal. \"\"\" # first check if it is a pydantic __root__ object _ , root_type , _ = _get_model_field_info ( field_type ) if root_type is not None : return root_type in [ 'List' , 'Dict' ] # Retrieves type from a type annotation origin_type = get_origin ( field_type ) # dict in fact may not be possible return origin_type in [ list , dict ]","title":"is_collection_field_type()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.snake_to_upper_camel","text":"Convert snake to upper camel, ignoring start/end underscores. Source code in trestle/core/utils.py def snake_to_upper_camel ( snake : str ) -> str : \"\"\"Convert snake to upper camel, ignoring start/end underscores.\"\"\" if not snake : return snake snake = snake . lower () camel = '' lift = True for s in snake : if s == '_' : lift = True continue if lift : camel = camel + s . upper () lift = False else : camel = camel + s return camel","title":"snake_to_upper_camel()"},{"location":"api_reference/trestle.core.utils/#trestle.core.utils.underscore_to_dash","text":"Convert underscore to dash and drop final dash if present. Source code in trestle/core/utils.py def underscore_to_dash ( name : str ) -> str : \"\"\"Convert underscore to dash and drop final dash if present.\"\"\" converted = name . replace ( '_' , '-' ) return converted if converted [ - 1 ] != '-' else converted [: - 1 ] handler: python","title":"underscore_to_dash()"},{"location":"api_reference/trestle.core.validator/","text":"trestle.core.validator \u00a4 Base class for all validators. TG \u00a4 logger \u00a4 Classes \u00a4 Validator ( ABC ) \u00a4 Validator base class. Methods \u00a4 error_msg ( self ) \u00a4 Error message used to describe this validator. Source code in trestle/core/validator.py def error_msg ( self ) -> str : \"\"\"Error message used to describe this validator.\"\"\" # subclasses can override as needed return self . __doc__ model_is_valid ( self , model ) \u00a4 Validate the model. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool Whether or not the model passed this validation test. Source code in trestle/core/validator.py @abstractmethod def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Validate the model. args: model: An Oscal model that can be passed to the validator. returns: Whether or not the model passed this validation test. \"\"\" validate ( self , args ) \u00a4 Perform the validation according to user options. Source code in trestle/core/validator.py def validate ( self , args : argparse . Namespace ) -> int : \"\"\"Perform the validation according to user options.\"\"\" trestle_root = args . trestle_root # trestle root is set via command line in args. Default is cwd. # validate by type - all of type or just specified by name if 'type' in args and args . type is not None : models = [] if 'name' in args and args . name is not None : models = [ args . name ] else : models = fs . get_models_of_type ( args . type , trestle_root ) models_path = trestle_root / fs . model_type_to_model_dir ( args . type ) for m in models : model_path = models_path / m try : _ , _ , model = load_distributed ( model_path , trestle_root ) except TrestleError as e : logger . warning ( f 'File load error { e } ' ) return 1 if not self . model_is_valid ( model ): logger . info ( f 'INVALID: Model { model_path } did not pass the { self . error_msg () } ' ) return 1 logger . info ( f 'VALID: Model { model_path } passed the { self . error_msg () } ' ) return 0 # validate all if 'all' in args and args . all : model_tups = fs . get_all_models ( trestle_root ) for mt in model_tups : model_dir = trestle_root / fs . model_type_to_model_dir ( mt [ 0 ]) / mt [ 1 ] extension_type = fs . get_contextual_file_type ( model_dir ) model_path = model_dir / f ' { mt [ 0 ] }{ FileContentType . to_file_extension ( extension_type ) } ' _ , _ , model = load_distributed ( model_path , trestle_root ) if not self . model_is_valid ( model ): logger . info ( f 'INVALID: Model { model_path } did not pass the { self . error_msg () } ' ) return 1 logger . info ( f 'VALID: Model { model_path } passed the { self . error_msg () } ' ) return 0 # validate file if 'file' in args and args . file : file_path = trestle_root / args . file _ , _ , model = load_distributed ( file_path , trestle_root ) if not self . model_is_valid ( model ): logger . info ( f 'INVALID: Model { file_path } did not pass the { self . error_msg () } ' ) return 1 logger . info ( f 'VALID: Model { file_path } passed the { self . error_msg () } ' ) return 0 handler: python","title":"validator"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator","text":"Base class for all validators.","title":"validator"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator.TG","text":"","title":"TG"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator.Validator","text":"Validator base class.","title":"Validator"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator.Validator-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator.Validator.error_msg","text":"Error message used to describe this validator. Source code in trestle/core/validator.py def error_msg ( self ) -> str : \"\"\"Error message used to describe this validator.\"\"\" # subclasses can override as needed return self . __doc__","title":"error_msg()"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator.Validator.model_is_valid","text":"Validate the model. Parameters: Name Type Description Default model OscalBaseModel An Oscal model that can be passed to the validator. required Returns: Type Description bool Whether or not the model passed this validation test. Source code in trestle/core/validator.py @abstractmethod def model_is_valid ( self , model : OscalBaseModel ) -> bool : \"\"\" Validate the model. args: model: An Oscal model that can be passed to the validator. returns: Whether or not the model passed this validation test. \"\"\"","title":"model_is_valid()"},{"location":"api_reference/trestle.core.validator/#trestle.core.validator.Validator.validate","text":"Perform the validation according to user options. Source code in trestle/core/validator.py def validate ( self , args : argparse . Namespace ) -> int : \"\"\"Perform the validation according to user options.\"\"\" trestle_root = args . trestle_root # trestle root is set via command line in args. Default is cwd. # validate by type - all of type or just specified by name if 'type' in args and args . type is not None : models = [] if 'name' in args and args . name is not None : models = [ args . name ] else : models = fs . get_models_of_type ( args . type , trestle_root ) models_path = trestle_root / fs . model_type_to_model_dir ( args . type ) for m in models : model_path = models_path / m try : _ , _ , model = load_distributed ( model_path , trestle_root ) except TrestleError as e : logger . warning ( f 'File load error { e } ' ) return 1 if not self . model_is_valid ( model ): logger . info ( f 'INVALID: Model { model_path } did not pass the { self . error_msg () } ' ) return 1 logger . info ( f 'VALID: Model { model_path } passed the { self . error_msg () } ' ) return 0 # validate all if 'all' in args and args . all : model_tups = fs . get_all_models ( trestle_root ) for mt in model_tups : model_dir = trestle_root / fs . model_type_to_model_dir ( mt [ 0 ]) / mt [ 1 ] extension_type = fs . get_contextual_file_type ( model_dir ) model_path = model_dir / f ' { mt [ 0 ] }{ FileContentType . to_file_extension ( extension_type ) } ' _ , _ , model = load_distributed ( model_path , trestle_root ) if not self . model_is_valid ( model ): logger . info ( f 'INVALID: Model { model_path } did not pass the { self . error_msg () } ' ) return 1 logger . info ( f 'VALID: Model { model_path } passed the { self . error_msg () } ' ) return 0 # validate file if 'file' in args and args . file : file_path = trestle_root / args . file _ , _ , model = load_distributed ( file_path , trestle_root ) if not self . model_is_valid ( model ): logger . info ( f 'INVALID: Model { file_path } did not pass the { self . error_msg () } ' ) return 1 logger . info ( f 'VALID: Model { file_path } passed the { self . error_msg () } ' ) return 0 handler: python","title":"validate()"},{"location":"api_reference/trestle.core.validator_factory/","text":"trestle.core.validator_factory \u00a4 Register all validators here in the validator_factory. validator_factory : ObjectFactory \u00a4 Functions \u00a4 init_arguments ( cmd ) \u00a4 Feed the arguments to the argument parser. Source code in trestle/core/validator_factory.py def init_arguments ( cmd : Command ) -> None : \"\"\"Feed the arguments to the argument parser.\"\"\" group = cmd . parser . add_mutually_exclusive_group ( required = True ) group . add_argument ( '-f' , '--file' , help = 'Path of file in trestle directory to validate.' ) group . add_argument ( '-t' , '--type' , choices = const . MODEL_TYPE_LIST , help = 'Validate one or all models of this type.' ) group . add_argument ( '-a' , '--all' , action = 'store_true' , help = 'Validate all models in trestle directory.' ) cmd . add_argument ( '-n' , '--name' , help = 'Name of single model to validate (with --type specified).' , required = False ) handler: python","title":"validator_factory"},{"location":"api_reference/trestle.core.validator_factory/#trestle.core.validator_factory","text":"Register all validators here in the validator_factory.","title":"validator_factory"},{"location":"api_reference/trestle.core.validator_factory/#trestle.core.validator_factory.validator_factory","text":"","title":"validator_factory"},{"location":"api_reference/trestle.core.validator_factory/#trestle.core.validator_factory-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.core.validator_factory/#trestle.core.validator_factory.init_arguments","text":"Feed the arguments to the argument parser. Source code in trestle/core/validator_factory.py def init_arguments ( cmd : Command ) -> None : \"\"\"Feed the arguments to the argument parser.\"\"\" group = cmd . parser . add_mutually_exclusive_group ( required = True ) group . add_argument ( '-f' , '--file' , help = 'Path of file in trestle directory to validate.' ) group . add_argument ( '-t' , '--type' , choices = const . MODEL_TYPE_LIST , help = 'Validate one or all models of this type.' ) group . add_argument ( '-a' , '--all' , action = 'store_true' , help = 'Validate all models in trestle directory.' ) cmd . add_argument ( '-n' , '--name' , help = 'Name of single model to validate (with --type specified).' , required = False ) handler: python","title":"init_arguments()"},{"location":"api_reference/trestle.core.validator_helper/","text":"trestle.core.validator_helper \u00a4 Utilities for dealing with models. TG \u00a4 logger \u00a4 Functions \u00a4 find_all_attribs_by_regex ( object_of_interest , regex_of_interest ) \u00a4 Find all attributes in object matching regex expression. Source code in trestle/core/validator_helper.py def find_all_attribs_by_regex ( object_of_interest : Any , regex_of_interest : str ) -> List [ Tuple [ str , Any ]]: \"\"\"Find all attributes in object matching regex expression.\"\"\" all_attrs = [] p = re . compile ( regex_of_interest ) if isinstance ( object_of_interest , pydantic . BaseModel ): # fields_set has names of fields set when model was initialized fields = getattr ( object_of_interest , '__fields_set__' , None ) for field in fields : if p . findall ( field ): all_attrs . append (( field , object_of_interest . __dict__ [ field ])) new_attrs = find_all_attribs_by_regex ( object_of_interest . __dict__ [ field ], regex_of_interest ) all_attrs . extend ( new_attrs ) return all_attrs elif type ( object_of_interest ) is list : for item in object_of_interest : new_attrs = find_all_attribs_by_regex ( item , regex_of_interest ) all_attrs . extend ( new_attrs ) return all_attrs elif type ( object_of_interest ) is dict : for key , value in object_of_interest . items (): if p . findall ( key ): all_attrs . append (( key , value )) new_attrs = find_all_attribs_by_regex ( value , regex_of_interest ) all_attrs . extend ( new_attrs ) return all_attrs return all_attrs find_values_by_name ( object_of_interest , name_of_interest ) \u00a4 Traverse object and return list of values of specified name. Source code in trestle/core/validator_helper.py def find_values_by_name ( object_of_interest : Any , name_of_interest : str ) -> List [ Any ]: \"\"\"Traverse object and return list of values of specified name.\"\"\" loe = [] if isinstance ( object_of_interest , pydantic . BaseModel ): value = getattr ( object_of_interest , name_of_interest , None ) if value is not None : loe . append ( value ) fields = getattr ( object_of_interest , '__fields_set__' , None ) if fields is not None : for field in fields : loe . extend ( find_values_by_name ( getattr ( object_of_interest , field , None ), name_of_interest )) elif type ( object_of_interest ) is list : for item in object_of_interest : loe . extend ( find_values_by_name ( item , name_of_interest )) elif type ( object_of_interest ) is dict : if name_of_interest in object_of_interest : loe . append ( object_of_interest [ name_of_interest ]) for item in object_of_interest . values (): loe . extend ( find_values_by_name ( item , name_of_interest )) return loe find_values_by_name_generic ( object_of_interest , var_name ) \u00a4 Traverse object and return list of the values in dicts, tuples associated with variable name. Source code in trestle/core/validator_helper.py def find_values_by_name_generic ( object_of_interest : Any , var_name : str ) -> List [ str ]: \"\"\"Traverse object and return list of the values in dicts, tuples associated with variable name.\"\"\" loe = [] # looking for a dict or 2-element tuple containing specified variable name if type ( object_of_interest ) == dict : if var_name in object_of_interest : loe . append ( object_of_interest [ var_name ]) for value in object_of_interest . values (): new_list = find_values_by_name_generic ( value , var_name ) if new_list : loe . extend ( new_list ) elif type ( object_of_interest ) == tuple and len ( object_of_interest ) == 2 and object_of_interest [ 0 ] == var_name : if object_of_interest [ 1 ]: loe . append ( object_of_interest [ 1 ]) elif type ( object_of_interest ) != str : try : # iterate over any iterable and recurse on its items o_iter = iter ( object_of_interest ) except Exception : # it is not a dict and not iterable logger . warning ( 'We really should not be here.' ) pass else : next_item = next ( o_iter , None ) while next_item is not None : new_list = find_values_by_name_generic ( next_item , var_name ) if new_list : loe . extend ( new_list ) next_item = next ( o_iter , None ) return loe return loe find_values_by_type ( object_of_interest , type_of_interest ) \u00a4 Traverse object and return list of values of specified type. Source code in trestle/core/validator_helper.py def find_values_by_type ( object_of_interest : Any , type_of_interest : Type [ TG ]) -> List [ TG ]: \"\"\"Traverse object and return list of values of specified type.\"\"\" loe = [] # looking for a dict or 2-element tuple containing specified variable name if type ( object_of_interest ) == type_of_interest : loe . append ( object_of_interest ) return loe if type ( object_of_interest ) == dict : for value in object_of_interest . values (): new_list = find_values_by_type ( value , type_of_interest ) if new_list : loe . extend ( new_list ) elif type ( object_of_interest ) != str : try : # iterate over any iterable and recurse on its items o_iter = iter ( object_of_interest ) except Exception : # it is not a dict and not iterable logger . debug ( 'we should not be here' ) pass else : next_item = next ( o_iter , None ) while next_item is not None : new_list = find_values_by_type ( next_item , type_of_interest ) if new_list : loe . extend ( new_list ) next_item = next ( o_iter , None ) return loe return loe has_no_duplicate_values_by_name ( object_of_interest , name_of_interest ) \u00a4 Determine if duplicate values of type exist in object. Source code in trestle/core/validator_helper.py def has_no_duplicate_values_by_name ( object_of_interest : Any , name_of_interest : str ) -> bool : \"\"\"Determine if duplicate values of type exist in object.\"\"\" loe = find_values_by_name ( object_of_interest , name_of_interest ) set_loe = set ( loe ) if len ( loe ) == len ( set_loe ): return True else : items = {} for item in loe : items [ item ] = items . get ( item , 0 ) + 1 # now print items for item , instances in items . items (): if instances > 1 : logger . info ( f 'Duplicate detected of item { item } with { instances } instances.' ) return False has_no_duplicate_values_by_type ( object_of_interest , type_of_interest ) \u00a4 Determine if duplicate values of type exist in object. Source code in trestle/core/validator_helper.py def has_no_duplicate_values_by_type ( object_of_interest : Any , type_of_interest : Type [ TG ]) -> bool : \"\"\"Determine if duplicate values of type exist in object.\"\"\" loe = find_values_by_type ( object_of_interest , type_of_interest ) n = len ( loe ) if n > 1 : for i in range ( n - 1 ): for j in range ( i + 1 , n ): if loe [ i ] == loe [ j ]: return False return True has_no_duplicate_values_generic ( object_of_interest , var_name ) \u00a4 Determine if duplicate values of variable exist in object. Source code in trestle/core/validator_helper.py def has_no_duplicate_values_generic ( object_of_interest : Any , var_name : str ) -> bool : \"\"\"Determine if duplicate values of variable exist in object.\"\"\" loe = find_values_by_name_generic ( object_of_interest , var_name ) return len ( loe ) == len ( set ( loe )) regenerate_uuids ( object_of_interest ) \u00a4 Regenerate all uuids in object and update corresponding references. Find all dicts with key == 'uuid' and replace the value with a new uuid4. Build a corresponding lookup table as you go, of old:new uuid values. Then make a second pass through the object and replace all string values present in the lookup table with the new value. Parameters: Name Type Description Default object_of_interest Any pydantic.BaseModel, list, dict or str will be updated required Returns: Type Description The updated object with new uuid's and refs The final lookup table of old new uuid's A count of the number of refs that were updated Source code in trestle/core/validator_helper.py def regenerate_uuids ( object_of_interest : Any ) -> Tuple [ Any , Dict [ str , str ], int ]: \"\"\"Regenerate all uuids in object and update corresponding references. Find all dicts with key == 'uuid' and replace the value with a new uuid4. Build a corresponding lookup table as you go, of old:new uuid values. Then make a second pass through the object and replace all string values present in the lookup table with the new value. Args: object_of_interest: pydantic.BaseModel, list, dict or str will be updated Returns: The updated object with new uuid's and refs The final lookup table of old:new uuid's A count of the number of refs that were updated \"\"\" new_object , uuid_lut = regenerate_uuids_in_place ( object_of_interest , {}) new_object , n_refs_updated = update_new_uuid_refs ( new_object , uuid_lut ) return new_object , uuid_lut , n_refs_updated regenerate_uuids_in_place ( object_of_interest , uuid_lut ) \u00a4 Update all uuids in model that require updating. Go through the model and replace all dicts with key == 'uuid' and replace the value with a new uuid4. Build a lookup table of the updates that were made. This function does not update the corresponding refs to those uuid's. That is done by update_uuid_refs Note that this function needs to be started off with uuid_lut == {}, i.e. an empty dict. After that it recurses and grows the lut. Parameters: Name Type Description Default object_of_interest Any pydantic.BaseModel, list, dict or str will be updated required uuid_lut Dict[str, str] dict of the growing lut of old:new uuid's. First call must be made with value {} required Returns: Type Description The updated object_of_interest with new uuid's (but refs to them are not updated) The final lookup table of old new uuid's Source code in trestle/core/validator_helper.py def regenerate_uuids_in_place ( object_of_interest : Any , uuid_lut : Dict [ str , str ]) -> Tuple [ Any , Dict [ str , str ]]: \"\"\"Update all uuids in model that require updating. Go through the model and replace all dicts with key == 'uuid' and replace the value with a new uuid4. Build a lookup table of the updates that were made. This function does not update the corresponding refs to those uuid's. That is done by update_uuid_refs Note that this function needs to be started off with uuid_lut == {}, i.e. an empty dict. After that it recurses and grows the lut. Args: object_of_interest: pydantic.BaseModel, list, dict or str will be updated uuid_lut: dict of the growing lut of old:new uuid's. First call must be made with value {} Returns: The updated object_of_interest with new uuid's (but refs to them are not updated) The final lookup table of old:new uuid's \"\"\" uuid_str = 'uuid' # Certain types are known not to need updating and should not change # Resources are identified by uuid, and the corresponding href will have # in front of the uuid string # Neither of these should change # If other similar types are found they should be added to the FixedUuidModel typevar to prevent updating if isinstance ( object_of_interest , FixedUuidModel ): return object_of_interest , uuid_lut if isinstance ( object_of_interest , pydantic . BaseModel ): # fields_set has names of fields set when model was initialized fields = getattr ( object_of_interest , '__fields_set__' , None ) for field in fields : new_object = None if field == uuid_str : new_object = str ( uuid . uuid4 ()) uuid_lut [ object_of_interest . __dict__ [ field ]] = new_object else : new_object , uuid_lut = regenerate_uuids_in_place ( object_of_interest . __dict__ [ field ], uuid_lut ) object_of_interest . __dict__ [ field ] = new_object return object_of_interest , uuid_lut elif type ( object_of_interest ) is list : new_list = [] for item in object_of_interest : new_item , uuid_lut = regenerate_uuids_in_place ( item , uuid_lut ) new_list . append ( new_item ) return new_list , uuid_lut elif type ( object_of_interest ) is dict : new_dict = {} for key , value in object_of_interest . items (): if key == uuid_str : new_val = str ( uuid . uuid4 ()) new_dict [ uuid_str ] = new_val uuid_lut [ value ] = new_val else : new_value , uuid_lut = regenerate_uuids_in_place ( value , uuid_lut ) new_dict [ key ] = new_value return new_dict , uuid_lut return object_of_interest , uuid_lut update_new_uuid_refs ( object_of_interest , uuid_lut ) \u00a4 Update all refs to uuids that were changed. Source code in trestle/core/validator_helper.py def update_new_uuid_refs ( object_of_interest : Any , uuid_lut : Dict [ str , str ]) -> Tuple [ Any , int ]: \"\"\"Update all refs to uuids that were changed.\"\"\" n_refs_updated = 0 if isinstance ( object_of_interest , pydantic . BaseModel ): # fields_set has names of fields set when model was initialized fields = getattr ( object_of_interest , '__fields_set__' , None ) for field in fields : new_object , n_new_updates = update_new_uuid_refs ( object_of_interest . __dict__ [ field ], uuid_lut ) n_refs_updated += n_new_updates object_of_interest . __dict__ [ field ] = new_object return object_of_interest , n_refs_updated elif type ( object_of_interest ) is list : new_list = [] for item in object_of_interest : new_item , n_new_updates = update_new_uuid_refs ( item , uuid_lut ) n_refs_updated += n_new_updates new_list . append ( new_item ) return new_list , n_refs_updated elif type ( object_of_interest ) is dict : new_dict = {} for key , value in object_of_interest . items (): if isinstance ( value , str ): if value in uuid_lut : new_dict [ key ] = uuid_lut [ value ] n_refs_updated += 1 else : new_dict [ key ] = value else : new_value , n_new_updates = update_new_uuid_refs ( value , uuid_lut ) n_refs_updated += n_new_updates new_dict [ key ] = new_value return new_dict , n_refs_updated elif isinstance ( object_of_interest , str ): if object_of_interest in uuid_lut : n_refs_updated += 1 return uuid_lut [ object_of_interest ], n_refs_updated return object_of_interest , n_refs_updated handler: python","title":"validator_helper"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper","text":"Utilities for dealing with models.","title":"validator_helper"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.TG","text":"","title":"TG"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.logger","text":"","title":"logger"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.find_all_attribs_by_regex","text":"Find all attributes in object matching regex expression. Source code in trestle/core/validator_helper.py def find_all_attribs_by_regex ( object_of_interest : Any , regex_of_interest : str ) -> List [ Tuple [ str , Any ]]: \"\"\"Find all attributes in object matching regex expression.\"\"\" all_attrs = [] p = re . compile ( regex_of_interest ) if isinstance ( object_of_interest , pydantic . BaseModel ): # fields_set has names of fields set when model was initialized fields = getattr ( object_of_interest , '__fields_set__' , None ) for field in fields : if p . findall ( field ): all_attrs . append (( field , object_of_interest . __dict__ [ field ])) new_attrs = find_all_attribs_by_regex ( object_of_interest . __dict__ [ field ], regex_of_interest ) all_attrs . extend ( new_attrs ) return all_attrs elif type ( object_of_interest ) is list : for item in object_of_interest : new_attrs = find_all_attribs_by_regex ( item , regex_of_interest ) all_attrs . extend ( new_attrs ) return all_attrs elif type ( object_of_interest ) is dict : for key , value in object_of_interest . items (): if p . findall ( key ): all_attrs . append (( key , value )) new_attrs = find_all_attribs_by_regex ( value , regex_of_interest ) all_attrs . extend ( new_attrs ) return all_attrs return all_attrs","title":"find_all_attribs_by_regex()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.find_values_by_name","text":"Traverse object and return list of values of specified name. Source code in trestle/core/validator_helper.py def find_values_by_name ( object_of_interest : Any , name_of_interest : str ) -> List [ Any ]: \"\"\"Traverse object and return list of values of specified name.\"\"\" loe = [] if isinstance ( object_of_interest , pydantic . BaseModel ): value = getattr ( object_of_interest , name_of_interest , None ) if value is not None : loe . append ( value ) fields = getattr ( object_of_interest , '__fields_set__' , None ) if fields is not None : for field in fields : loe . extend ( find_values_by_name ( getattr ( object_of_interest , field , None ), name_of_interest )) elif type ( object_of_interest ) is list : for item in object_of_interest : loe . extend ( find_values_by_name ( item , name_of_interest )) elif type ( object_of_interest ) is dict : if name_of_interest in object_of_interest : loe . append ( object_of_interest [ name_of_interest ]) for item in object_of_interest . values (): loe . extend ( find_values_by_name ( item , name_of_interest )) return loe","title":"find_values_by_name()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.find_values_by_name_generic","text":"Traverse object and return list of the values in dicts, tuples associated with variable name. Source code in trestle/core/validator_helper.py def find_values_by_name_generic ( object_of_interest : Any , var_name : str ) -> List [ str ]: \"\"\"Traverse object and return list of the values in dicts, tuples associated with variable name.\"\"\" loe = [] # looking for a dict or 2-element tuple containing specified variable name if type ( object_of_interest ) == dict : if var_name in object_of_interest : loe . append ( object_of_interest [ var_name ]) for value in object_of_interest . values (): new_list = find_values_by_name_generic ( value , var_name ) if new_list : loe . extend ( new_list ) elif type ( object_of_interest ) == tuple and len ( object_of_interest ) == 2 and object_of_interest [ 0 ] == var_name : if object_of_interest [ 1 ]: loe . append ( object_of_interest [ 1 ]) elif type ( object_of_interest ) != str : try : # iterate over any iterable and recurse on its items o_iter = iter ( object_of_interest ) except Exception : # it is not a dict and not iterable logger . warning ( 'We really should not be here.' ) pass else : next_item = next ( o_iter , None ) while next_item is not None : new_list = find_values_by_name_generic ( next_item , var_name ) if new_list : loe . extend ( new_list ) next_item = next ( o_iter , None ) return loe return loe","title":"find_values_by_name_generic()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.find_values_by_type","text":"Traverse object and return list of values of specified type. Source code in trestle/core/validator_helper.py def find_values_by_type ( object_of_interest : Any , type_of_interest : Type [ TG ]) -> List [ TG ]: \"\"\"Traverse object and return list of values of specified type.\"\"\" loe = [] # looking for a dict or 2-element tuple containing specified variable name if type ( object_of_interest ) == type_of_interest : loe . append ( object_of_interest ) return loe if type ( object_of_interest ) == dict : for value in object_of_interest . values (): new_list = find_values_by_type ( value , type_of_interest ) if new_list : loe . extend ( new_list ) elif type ( object_of_interest ) != str : try : # iterate over any iterable and recurse on its items o_iter = iter ( object_of_interest ) except Exception : # it is not a dict and not iterable logger . debug ( 'we should not be here' ) pass else : next_item = next ( o_iter , None ) while next_item is not None : new_list = find_values_by_type ( next_item , type_of_interest ) if new_list : loe . extend ( new_list ) next_item = next ( o_iter , None ) return loe return loe","title":"find_values_by_type()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.has_no_duplicate_values_by_name","text":"Determine if duplicate values of type exist in object. Source code in trestle/core/validator_helper.py def has_no_duplicate_values_by_name ( object_of_interest : Any , name_of_interest : str ) -> bool : \"\"\"Determine if duplicate values of type exist in object.\"\"\" loe = find_values_by_name ( object_of_interest , name_of_interest ) set_loe = set ( loe ) if len ( loe ) == len ( set_loe ): return True else : items = {} for item in loe : items [ item ] = items . get ( item , 0 ) + 1 # now print items for item , instances in items . items (): if instances > 1 : logger . info ( f 'Duplicate detected of item { item } with { instances } instances.' ) return False","title":"has_no_duplicate_values_by_name()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.has_no_duplicate_values_by_type","text":"Determine if duplicate values of type exist in object. Source code in trestle/core/validator_helper.py def has_no_duplicate_values_by_type ( object_of_interest : Any , type_of_interest : Type [ TG ]) -> bool : \"\"\"Determine if duplicate values of type exist in object.\"\"\" loe = find_values_by_type ( object_of_interest , type_of_interest ) n = len ( loe ) if n > 1 : for i in range ( n - 1 ): for j in range ( i + 1 , n ): if loe [ i ] == loe [ j ]: return False return True","title":"has_no_duplicate_values_by_type()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.has_no_duplicate_values_generic","text":"Determine if duplicate values of variable exist in object. Source code in trestle/core/validator_helper.py def has_no_duplicate_values_generic ( object_of_interest : Any , var_name : str ) -> bool : \"\"\"Determine if duplicate values of variable exist in object.\"\"\" loe = find_values_by_name_generic ( object_of_interest , var_name ) return len ( loe ) == len ( set ( loe ))","title":"has_no_duplicate_values_generic()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.regenerate_uuids","text":"Regenerate all uuids in object and update corresponding references. Find all dicts with key == 'uuid' and replace the value with a new uuid4. Build a corresponding lookup table as you go, of old:new uuid values. Then make a second pass through the object and replace all string values present in the lookup table with the new value. Parameters: Name Type Description Default object_of_interest Any pydantic.BaseModel, list, dict or str will be updated required Returns: Type Description The updated object with new uuid's and refs The final lookup table of old new uuid's A count of the number of refs that were updated Source code in trestle/core/validator_helper.py def regenerate_uuids ( object_of_interest : Any ) -> Tuple [ Any , Dict [ str , str ], int ]: \"\"\"Regenerate all uuids in object and update corresponding references. Find all dicts with key == 'uuid' and replace the value with a new uuid4. Build a corresponding lookup table as you go, of old:new uuid values. Then make a second pass through the object and replace all string values present in the lookup table with the new value. Args: object_of_interest: pydantic.BaseModel, list, dict or str will be updated Returns: The updated object with new uuid's and refs The final lookup table of old:new uuid's A count of the number of refs that were updated \"\"\" new_object , uuid_lut = regenerate_uuids_in_place ( object_of_interest , {}) new_object , n_refs_updated = update_new_uuid_refs ( new_object , uuid_lut ) return new_object , uuid_lut , n_refs_updated","title":"regenerate_uuids()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.regenerate_uuids_in_place","text":"Update all uuids in model that require updating. Go through the model and replace all dicts with key == 'uuid' and replace the value with a new uuid4. Build a lookup table of the updates that were made. This function does not update the corresponding refs to those uuid's. That is done by update_uuid_refs Note that this function needs to be started off with uuid_lut == {}, i.e. an empty dict. After that it recurses and grows the lut. Parameters: Name Type Description Default object_of_interest Any pydantic.BaseModel, list, dict or str will be updated required uuid_lut Dict[str, str] dict of the growing lut of old:new uuid's. First call must be made with value {} required Returns: Type Description The updated object_of_interest with new uuid's (but refs to them are not updated) The final lookup table of old new uuid's Source code in trestle/core/validator_helper.py def regenerate_uuids_in_place ( object_of_interest : Any , uuid_lut : Dict [ str , str ]) -> Tuple [ Any , Dict [ str , str ]]: \"\"\"Update all uuids in model that require updating. Go through the model and replace all dicts with key == 'uuid' and replace the value with a new uuid4. Build a lookup table of the updates that were made. This function does not update the corresponding refs to those uuid's. That is done by update_uuid_refs Note that this function needs to be started off with uuid_lut == {}, i.e. an empty dict. After that it recurses and grows the lut. Args: object_of_interest: pydantic.BaseModel, list, dict or str will be updated uuid_lut: dict of the growing lut of old:new uuid's. First call must be made with value {} Returns: The updated object_of_interest with new uuid's (but refs to them are not updated) The final lookup table of old:new uuid's \"\"\" uuid_str = 'uuid' # Certain types are known not to need updating and should not change # Resources are identified by uuid, and the corresponding href will have # in front of the uuid string # Neither of these should change # If other similar types are found they should be added to the FixedUuidModel typevar to prevent updating if isinstance ( object_of_interest , FixedUuidModel ): return object_of_interest , uuid_lut if isinstance ( object_of_interest , pydantic . BaseModel ): # fields_set has names of fields set when model was initialized fields = getattr ( object_of_interest , '__fields_set__' , None ) for field in fields : new_object = None if field == uuid_str : new_object = str ( uuid . uuid4 ()) uuid_lut [ object_of_interest . __dict__ [ field ]] = new_object else : new_object , uuid_lut = regenerate_uuids_in_place ( object_of_interest . __dict__ [ field ], uuid_lut ) object_of_interest . __dict__ [ field ] = new_object return object_of_interest , uuid_lut elif type ( object_of_interest ) is list : new_list = [] for item in object_of_interest : new_item , uuid_lut = regenerate_uuids_in_place ( item , uuid_lut ) new_list . append ( new_item ) return new_list , uuid_lut elif type ( object_of_interest ) is dict : new_dict = {} for key , value in object_of_interest . items (): if key == uuid_str : new_val = str ( uuid . uuid4 ()) new_dict [ uuid_str ] = new_val uuid_lut [ value ] = new_val else : new_value , uuid_lut = regenerate_uuids_in_place ( value , uuid_lut ) new_dict [ key ] = new_value return new_dict , uuid_lut return object_of_interest , uuid_lut","title":"regenerate_uuids_in_place()"},{"location":"api_reference/trestle.core.validator_helper/#trestle.core.validator_helper.update_new_uuid_refs","text":"Update all refs to uuids that were changed. Source code in trestle/core/validator_helper.py def update_new_uuid_refs ( object_of_interest : Any , uuid_lut : Dict [ str , str ]) -> Tuple [ Any , int ]: \"\"\"Update all refs to uuids that were changed.\"\"\" n_refs_updated = 0 if isinstance ( object_of_interest , pydantic . BaseModel ): # fields_set has names of fields set when model was initialized fields = getattr ( object_of_interest , '__fields_set__' , None ) for field in fields : new_object , n_new_updates = update_new_uuid_refs ( object_of_interest . __dict__ [ field ], uuid_lut ) n_refs_updated += n_new_updates object_of_interest . __dict__ [ field ] = new_object return object_of_interest , n_refs_updated elif type ( object_of_interest ) is list : new_list = [] for item in object_of_interest : new_item , n_new_updates = update_new_uuid_refs ( item , uuid_lut ) n_refs_updated += n_new_updates new_list . append ( new_item ) return new_list , n_refs_updated elif type ( object_of_interest ) is dict : new_dict = {} for key , value in object_of_interest . items (): if isinstance ( value , str ): if value in uuid_lut : new_dict [ key ] = uuid_lut [ value ] n_refs_updated += 1 else : new_dict [ key ] = value else : new_value , n_new_updates = update_new_uuid_refs ( value , uuid_lut ) n_refs_updated += n_new_updates new_dict [ key ] = new_value return new_dict , n_refs_updated elif isinstance ( object_of_interest , str ): if object_of_interest in uuid_lut : n_refs_updated += 1 return uuid_lut [ object_of_interest ], n_refs_updated return object_of_interest , n_refs_updated handler: python","title":"update_new_uuid_refs()"},{"location":"api_reference/trestle.oscal.assessment_plan/","text":"trestle.oscal.assessment_plan \u00a4 Classes \u00a4 Activity ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this included activity. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_controls : ReviewedControls pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 steps : List [ trestle . oscal . assessment_plan . Step ] pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this included activity. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given included activity across revisions of the document. Config \u00a4 AssessmentAssets ( OscalBaseModel ) pydantic-model \u00a4 assessment_platforms : List [ trestle . oscal . common . AssessmentPlatform ] pydantic-field required \u00a4 components : List [ trestle . oscal . assessment_plan . SystemComponent ] pydantic-field \u00a4 Config \u00a4 AssessmentPlan ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 assessment_assets : AssessmentAssets pydantic-field \u00a4 assessment_subjects : List [ trestle . oscal . common . AssessmentSubject ] pydantic-field \u00a4 back_matter : BackMatter pydantic-field \u00a4 import_ssp : ImportSsp pydantic-field required \u00a4 local_definitions : LocalDefinitions pydantic-field \u00a4 Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP. metadata : Metadata pydantic-field required \u00a4 reviewed_controls : ReviewedControls pydantic-field required \u00a4 tasks : List [ trestle . oscal . common . Task ] pydantic-field \u00a4 terms_and_conditions : TermsAndConditions pydantic-field \u00a4 Used to define various terms and conditions under which an assessment, described by the plan, can be performed. Each child part defines a different type of term or condition. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this assessment plan. This UUID must be changed each time the content of the plan changes. Config \u00a4 Characterization ( OscalBaseModel ) pydantic-model \u00a4 facets : List [ trestle . oscal . common . Facet ] pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 origin : Origin pydantic-field required \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 Config \u00a4 ControlSelection ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of in-scope controls specified for assessment. exclude_controls : List [ trestle . oscal . assessment_plan . SelectControlById ] pydantic-field \u00a4 include_all : Dict [ str , Any ] pydantic-field \u00a4 A key word to indicate all. include_controls : List [ trestle . oscal . assessment_plan . SelectControlById ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Entry ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of what was done regarding the risk. end : datetime pydantic-field \u00a4 Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 logged_by : List [ trestle . oscal . common . LoggedBy ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_responses : List [ trestle . oscal . common . RelatedResponse ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 start : datetime pydantic-field required \u00a4 Identifies the start date and time of the event. status_change : RiskStatus pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this risk log entry. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies a risk log entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document. Config \u00a4 FindingTarget ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied. implementation_status : ImplementationStatus pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 status : Status pydantic-field required \u00a4 A determination of if the objective is satisfied or not within a given system. target_id : ConstrainedStrValue pydantic-field required \u00a4 Identifies the specific target qualified by the type. title : str pydantic-field \u00a4 The title for this objective status. type : Type1 pydantic-field required \u00a4 Identifies the type of the target. Config \u00a4 LocalDefinitions ( OscalBaseModel ) pydantic-model \u00a4 activities : List [ trestle . oscal . assessment_plan . Activity ] pydantic-field \u00a4 components : List [ trestle . oscal . assessment_plan . SystemComponent ] pydantic-field \u00a4 inventory_items : List [ trestle . oscal . common . InventoryItem ] pydantic-field \u00a4 objectives_and_methods : List [ trestle . oscal . common . LocalObjective ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 users : List [ trestle . oscal . common . SystemUser ] pydantic-field \u00a4 Config \u00a4 Method ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 Identifies how the observation was made. Model ( OscalBaseModel ) pydantic-model \u00a4 assessment_plan : AssessmentPlan pydantic-field required \u00a4 Observation ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 collected : datetime pydantic-field required \u00a4 Date/time stamp identifying when the finding information was collected. description : str pydantic-field required \u00a4 A human-readable description of this assessment observation. expires : datetime pydantic-field \u00a4 Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 methods : List [ trestle . oscal . assessment_plan . Method ] pydantic-field required \u00a4 origins : List [ trestle . oscal . assessment_plan . Origin ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 relevant_evidence : List [ trestle . oscal . common . RelevantEvidence ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 subjects : List [ trestle . oscal . common . SubjectReference ] pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this observation. types : List [ trestle . oscal . common . Type2 ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given observation across revisions. Config \u00a4 Origin ( OscalBaseModel ) pydantic-model \u00a4 actors : List [ trestle . oscal . common . OriginActor ] pydantic-field required \u00a4 related_tasks : List [ trestle . oscal . common . RelatedTask ] pydantic-field \u00a4 Config \u00a4 Response ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this response plan. lifecycle : ConstrainedStrValue pydantic-field required \u00a4 Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 origins : List [ trestle . oscal . assessment_plan . Origin ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 required_assets : List [ trestle . oscal . common . RequiredAsset ] pydantic-field \u00a4 tasks : List [ trestle . oscal . common . Task ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 The title for this response activity. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given remediation across revisions. Config \u00a4 ReviewedControls ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_objective_selections : List [ trestle . oscal . common . ControlObjectiveSelection ] pydantic-field \u00a4 control_selections : List [ trestle . oscal . assessment_plan . ControlSelection ] pydantic-field required \u00a4 description : str pydantic-field \u00a4 A human-readable description of control objectives. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Risk ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 characterizations : List [ trestle . oscal . assessment_plan . Characterization ] pydantic-field \u00a4 deadline : datetime pydantic-field \u00a4 The date/time by which the risk must be resolved. description : str pydantic-field required \u00a4 A human-readable summary of the identified risk, to include a statement of how the risk impacts the system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 mitigating_factors : List [ trestle . oscal . common . MitigatingFactor ] pydantic-field \u00a4 origins : List [ trestle . oscal . assessment_plan . Origin ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_observations : List [ trestle . oscal . common . RelatedObservation ] pydantic-field \u00a4 remediations : List [ trestle . oscal . assessment_plan . Response ] pydantic-field \u00a4 risk_log : RiskLog pydantic-field \u00a4 A log of all risk-related tasks taken. statement : str pydantic-field required \u00a4 An summary of impact for how the risk affects the system. status : ConstrainedStrValue pydantic-field required \u00a4 Describes the status of the associated risk. threat_ids : List [ trestle . oscal . common . ThreatId ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 The title for this risk. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given risk across revisions. Config \u00a4 RiskLog ( OscalBaseModel ) pydantic-model \u00a4 entries : List [ trestle . oscal . assessment_plan . Entry ] pydantic-field required \u00a4 Config \u00a4 SelectControlById ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a control with a corresponding id value. statement_ids : List [ trestle . oscal . common . StatementId ] pydantic-field \u00a4 Config \u00a4 SetParameter ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 param_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a parameter within a control, who's catalog has been imported into the current implementation context. remarks : Remarks pydantic-field \u00a4 values : List [ trestle . oscal . common . Value ] pydantic-field required \u00a4 Config \u00a4 State ( Enum ) \u00a4 An enumeration. not_satisfied \u00a4 satisfied \u00a4 State1 ( Enum ) \u00a4 An enumeration. disposition \u00a4 operational \u00a4 other \u00a4 under_development \u00a4 Status ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 reason : ConstrainedStrValue pydantic-field \u00a4 The reason the objective was given it's status. remarks : Remarks pydantic-field \u00a4 state : State pydantic-field required \u00a4 An indication as to whether the objective is satisfied or not. Config \u00a4 Status1 ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 remarks : Remarks pydantic-field \u00a4 state : State1 pydantic-field required \u00a4 The operational status. Config \u00a4 Step ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this step. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 reviewed_controls : ReviewedControls pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this step. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies a step. This UUID may be referenced elsewhere in an OSCAL document when referring to this step. A UUID should be consistently used for a given test step across revisions of the document. Config \u00a4 SystemComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A description of the component, including information about its function. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 protocols : List [ trestle . oscal . common . Protocol ] pydantic-field \u00a4 purpose : str pydantic-field \u00a4 A summary of the technological or business purpose of the component. remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 status : Status1 pydantic-field required \u00a4 Describes the operational status of the system component. title : str pydantic-field required \u00a4 A human readable name for the system component. type : ConstrainedStrValue pydantic-field required \u00a4 A category describing the purpose of the component. uuid : ConstrainedStrValue pydantic-field required \u00a4 The unique identifier for the component. Config \u00a4 TermsAndConditions ( OscalBaseModel ) pydantic-model \u00a4 parts : List [ trestle . oscal . common . AssessmentPart ] pydantic-field \u00a4 Config \u00a4 handler: python","title":"assessment_plan"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan","text":"","title":"assessment_plan"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity","text":"","title":"Activity"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.description","text":"A human-readable description of this included activity.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.related_controls","text":"","title":"related_controls"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.steps","text":"","title":"steps"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.title","text":"The title for this included activity.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.uuid","text":"Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given included activity across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Activity.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentAssets","text":"","title":"AssessmentAssets"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentAssets.assessment_platforms","text":"","title":"assessment_platforms"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentAssets.components","text":"","title":"components"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentAssets.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan","text":"","title":"AssessmentPlan"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.assessment_assets","text":"","title":"assessment_assets"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.assessment_subjects","text":"","title":"assessment_subjects"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.back_matter","text":"","title":"back_matter"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.import_ssp","text":"","title":"import_ssp"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.local_definitions","text":"Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.","title":"local_definitions"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.metadata","text":"","title":"metadata"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.reviewed_controls","text":"","title":"reviewed_controls"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.tasks","text":"","title":"tasks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.terms_and_conditions","text":"Used to define various terms and conditions under which an assessment, described by the plan, can be performed. Each child part defines a different type of term or condition.","title":"terms_and_conditions"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.uuid","text":"Uniquely identifies this assessment plan. This UUID must be changed each time the content of the plan changes.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.AssessmentPlan.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Characterization","text":"","title":"Characterization"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Characterization.facets","text":"","title":"facets"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Characterization.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Characterization.origin","text":"","title":"origin"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Characterization.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Characterization.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection","text":"","title":"ControlSelection"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection.description","text":"A human-readable description of in-scope controls specified for assessment.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection.exclude_controls","text":"","title":"exclude_controls"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection.include_all","text":"A key word to indicate all.","title":"include_all"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection.include_controls","text":"","title":"include_controls"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ControlSelection.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry","text":"","title":"Entry"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.description","text":"A human-readable description of what was done regarding the risk.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.end","text":"Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time.","title":"end"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.logged_by","text":"","title":"logged_by"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.related_responses","text":"","title":"related_responses"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.start","text":"Identifies the start date and time of the event.","title":"start"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.status_change","text":"","title":"status_change"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.title","text":"The title for this risk log entry.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.uuid","text":"Uniquely identifies a risk log entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Entry.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget","text":"","title":"FindingTarget"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.description","text":"A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.implementation_status","text":"","title":"implementation_status"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.status","text":"A determination of if the objective is satisfied or not within a given system.","title":"status"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.target_id","text":"Identifies the specific target qualified by the type.","title":"target_id"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.title","text":"The title for this objective status.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.type","text":"Identifies the type of the target.","title":"type"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.FindingTarget.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.LocalDefinitions","text":"","title":"LocalDefinitions"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.LocalDefinitions.activities","text":"","title":"activities"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.LocalDefinitions.components","text":"","title":"components"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.LocalDefinitions.inventory_items","text":"","title":"inventory_items"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.LocalDefinitions.objectives_and_methods","text":"","title":"objectives_and_methods"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.LocalDefinitions.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.LocalDefinitions.users","text":"","title":"users"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.LocalDefinitions.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Method","text":"","title":"Method"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Method-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Method.__root__","text":"Identifies how the observation was made.","title":"__root__"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Model","text":"","title":"Model"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Model.assessment_plan","text":"","title":"assessment_plan"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation","text":"","title":"Observation"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.collected","text":"Date/time stamp identifying when the finding information was collected.","title":"collected"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.description","text":"A human-readable description of this assessment observation.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.expires","text":"Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios.","title":"expires"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.methods","text":"","title":"methods"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.relevant_evidence","text":"","title":"relevant_evidence"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.title","text":"The title for this observation.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.types","text":"","title":"types"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.uuid","text":"Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given observation across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Observation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Origin","text":"","title":"Origin"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Origin.actors","text":"","title":"actors"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Origin.related_tasks","text":"","title":"related_tasks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Origin.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response","text":"","title":"Response"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.description","text":"A human-readable description of this response plan.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.lifecycle","text":"Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.","title":"lifecycle"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.required_assets","text":"","title":"required_assets"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.tasks","text":"","title":"tasks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.title","text":"The title for this response activity.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.uuid","text":"Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given remediation across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Response.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls","text":"","title":"ReviewedControls"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls.control_objective_selections","text":"","title":"control_objective_selections"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls.control_selections","text":"","title":"control_selections"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls.description","text":"A human-readable description of control objectives.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.ReviewedControls.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk","text":"","title":"Risk"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.characterizations","text":"","title":"characterizations"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.deadline","text":"The date/time by which the risk must be resolved.","title":"deadline"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.description","text":"A human-readable summary of the identified risk, to include a statement of how the risk impacts the system.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.mitigating_factors","text":"","title":"mitigating_factors"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.related_observations","text":"","title":"related_observations"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.remediations","text":"","title":"remediations"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.risk_log","text":"A log of all risk-related tasks taken.","title":"risk_log"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.statement","text":"An summary of impact for how the risk affects the system.","title":"statement"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.status","text":"Describes the status of the associated risk.","title":"status"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.threat_ids","text":"","title":"threat_ids"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.title","text":"The title for this risk.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.uuid","text":"Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given risk across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Risk.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.RiskLog","text":"","title":"RiskLog"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.RiskLog.entries","text":"","title":"entries"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.RiskLog.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SelectControlById","text":"","title":"SelectControlById"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SelectControlById-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SelectControlById.control_id","text":"A reference to a control with a corresponding id value.","title":"control_id"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SelectControlById.statement_ids","text":"","title":"statement_ids"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SelectControlById.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SetParameter","text":"","title":"SetParameter"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SetParameter-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SetParameter.param_id","text":"A reference to a parameter within a control, who's catalog has been imported into the current implementation context.","title":"param_id"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SetParameter.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SetParameter.values","text":"","title":"values"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SetParameter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.State","text":"An enumeration.","title":"State"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.State.not_satisfied","text":"","title":"not_satisfied"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.State.satisfied","text":"","title":"satisfied"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.State1","text":"An enumeration.","title":"State1"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.State1.disposition","text":"","title":"disposition"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.State1.operational","text":"","title":"operational"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.State1.other","text":"","title":"other"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.State1.under_development","text":"","title":"under_development"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status","text":"","title":"Status"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status.reason","text":"The reason the objective was given it's status.","title":"reason"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status.state","text":"An indication as to whether the objective is satisfied or not.","title":"state"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status1","text":"","title":"Status1"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status1-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status1.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status1.state","text":"The operational status.","title":"state"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Status1.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step","text":"","title":"Step"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.description","text":"A human-readable description of this step.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.reviewed_controls","text":"","title":"reviewed_controls"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.title","text":"The title for this step.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.uuid","text":"Uniquely identifies a step. This UUID may be referenced elsewhere in an OSCAL document when referring to this step. A UUID should be consistently used for a given test step across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.Step.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent","text":"","title":"SystemComponent"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.description","text":"A description of the component, including information about its function.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.protocols","text":"","title":"protocols"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.purpose","text":"A summary of the technological or business purpose of the component.","title":"purpose"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.status","text":"Describes the operational status of the system component.","title":"status"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.title","text":"A human readable name for the system component.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.type","text":"A category describing the purpose of the component.","title":"type"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.uuid","text":"The unique identifier for the component.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.SystemComponent.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.TermsAndConditions","text":"","title":"TermsAndConditions"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.TermsAndConditions.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.assessment_plan/#trestle.oscal.assessment_plan.TermsAndConditions.Config","text":"handler: python","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/","text":"trestle.oscal.assessment_results \u00a4 Classes \u00a4 Activity ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this included activity. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_controls : ReviewedControls pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 steps : List [ trestle . oscal . assessment_results . Step ] pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this included activity. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given included activity across revisions of the document. Config \u00a4 AssessmentAssets ( OscalBaseModel ) pydantic-model \u00a4 assessment_platforms : List [ trestle . oscal . common . AssessmentPlatform ] pydantic-field required \u00a4 components : List [ trestle . oscal . assessment_results . SystemComponent ] pydantic-field \u00a4 Config \u00a4 AssessmentLog ( OscalBaseModel ) pydantic-model \u00a4 entries : List [ trestle . oscal . assessment_results . Entry ] pydantic-field required \u00a4 Config \u00a4 AssessmentResults ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 back_matter : BackMatter pydantic-field \u00a4 import_ap : ImportAp pydantic-field required \u00a4 local_definitions : LocalDefinitions pydantic-field \u00a4 Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP. metadata : Metadata pydantic-field required \u00a4 results : List [ trestle . oscal . assessment_results . Result ] pydantic-field required \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this assessment results file. This UUID must be changed each time the content of the results changes. Config \u00a4 Attestation ( OscalBaseModel ) pydantic-model \u00a4 parts : List [ trestle . oscal . common . AssessmentPart ] pydantic-field required \u00a4 responsible_parties : List [ trestle . oscal . common . ResponsibleParty ] pydantic-field \u00a4 Config \u00a4 Characterization ( OscalBaseModel ) pydantic-model \u00a4 facets : List [ trestle . oscal . common . Facet ] pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 origin : Origin pydantic-field required \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 Config \u00a4 ControlSelection ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of in-scope controls specified for assessment. exclude_controls : List [ trestle . oscal . assessment_results . SelectControlById ] pydantic-field \u00a4 include_all : Dict [ str , Any ] pydantic-field \u00a4 A key word to indicate all. include_controls : List [ trestle . oscal . assessment_results . SelectControlById ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Entry ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of this event. end : datetime pydantic-field \u00a4 Identifies the end date and time of an event. If the event is a point in time, the start and end will be the same date and time. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 logged_by : List [ trestle . oscal . common . LoggedBy ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_tasks : List [ trestle . oscal . common . RelatedTask ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 start : datetime pydantic-field required \u00a4 Identifies the start date and time of an event. title : str pydantic-field \u00a4 The title for this event. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies an assessment event. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document. Config \u00a4 Entry1 ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of what was done regarding the risk. end : datetime pydantic-field \u00a4 Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 logged_by : List [ trestle . oscal . common . LoggedBy ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_responses : List [ trestle . oscal . common . RelatedResponse ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 start : datetime pydantic-field required \u00a4 Identifies the start date and time of the event. status_change : RiskStatus pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this risk log entry. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies a risk log entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document. Config \u00a4 Finding ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this finding. implementation_statement_uuid : ConstrainedStrValue pydantic-field \u00a4 Identifies the implementation statement in the SSP to which this finding is related. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 origins : List [ trestle . oscal . assessment_results . Origin ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_observations : List [ trestle . oscal . common . RelatedObservation ] pydantic-field \u00a4 related_risks : List [ trestle . oscal . common . RelatedRisk ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 target : FindingTarget pydantic-field required \u00a4 title : str pydantic-field required \u00a4 The title for this finding. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this finding. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given finding across revisions. Config \u00a4 FindingTarget ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied. implementation_status : ImplementationStatus pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 status : Status pydantic-field required \u00a4 A determination of if the objective is satisfied or not within a given system. target_id : ConstrainedStrValue pydantic-field required \u00a4 Identifies the specific target qualified by the type. title : str pydantic-field \u00a4 The title for this objective status. type : Type1 pydantic-field required \u00a4 Identifies the type of the target. Config \u00a4 ImportAp ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 href : str pydantic-field required \u00a4 A resolvable URL reference to the assessment plan governing the assessment activities. remarks : Remarks pydantic-field \u00a4 Config \u00a4 LocalDefinitions ( OscalBaseModel ) pydantic-model \u00a4 activities : List [ trestle . oscal . assessment_results . Activity ] pydantic-field \u00a4 objectives_and_methods : List [ trestle . oscal . common . LocalObjective ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 LocalDefinitions1 ( OscalBaseModel ) pydantic-model \u00a4 assessment_assets : AssessmentAssets pydantic-field \u00a4 components : List [ trestle . oscal . assessment_results . SystemComponent ] pydantic-field \u00a4 inventory_items : List [ trestle . oscal . common . InventoryItem ] pydantic-field \u00a4 tasks : List [ trestle . oscal . common . Task ] pydantic-field \u00a4 users : List [ trestle . oscal . common . SystemUser ] pydantic-field \u00a4 Config \u00a4 Method ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 Identifies how the observation was made. Model ( OscalBaseModel ) pydantic-model \u00a4 assessment_results : AssessmentResults pydantic-field required \u00a4 Observation ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 collected : datetime pydantic-field required \u00a4 Date/time stamp identifying when the finding information was collected. description : str pydantic-field required \u00a4 A human-readable description of this assessment observation. expires : datetime pydantic-field \u00a4 Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 methods : List [ trestle . oscal . assessment_results . Method ] pydantic-field required \u00a4 origins : List [ trestle . oscal . assessment_results . Origin ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 relevant_evidence : List [ trestle . oscal . common . RelevantEvidence ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 subjects : List [ trestle . oscal . common . SubjectReference ] pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this observation. types : List [ trestle . oscal . common . Type2 ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given observation across revisions. Config \u00a4 Origin ( OscalBaseModel ) pydantic-model \u00a4 actors : List [ trestle . oscal . common . OriginActor ] pydantic-field required \u00a4 related_tasks : List [ trestle . oscal . common . RelatedTask ] pydantic-field \u00a4 Config \u00a4 Response ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this response plan. lifecycle : ConstrainedStrValue pydantic-field required \u00a4 Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 origins : List [ trestle . oscal . assessment_results . Origin ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 required_assets : List [ trestle . oscal . common . RequiredAsset ] pydantic-field \u00a4 tasks : List [ trestle . oscal . common . Task ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 The title for this response activity. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given remediation across revisions. Config \u00a4 Result ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 assessment_log : AssessmentLog pydantic-field \u00a4 A log of all assessment-related actions taken. attestations : List [ trestle . oscal . assessment_results . Attestation ] pydantic-field \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this set of test results. end : datetime pydantic-field \u00a4 Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate. findings : List [ trestle . oscal . assessment_results . Finding ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 local_definitions : LocalDefinitions1 pydantic-field \u00a4 Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP. observations : List [ trestle . oscal . assessment_results . Observation ] pydantic-field \u00a4 prop : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 reviewed_controls : ReviewedControls pydantic-field required \u00a4 risks : List [ trestle . oscal . assessment_results . Risk ] pydantic-field \u00a4 start : datetime pydantic-field required \u00a4 Date/time stamp identifying the start of the evidence collection reflected in these results. title : str pydantic-field required \u00a4 The title for this set of results. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this set of results. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given set of results across revisions. Config \u00a4 ReviewedControls ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_objective_selections : List [ trestle . oscal . common . ControlObjectiveSelection ] pydantic-field \u00a4 control_selections : List [ trestle . oscal . assessment_results . ControlSelection ] pydantic-field required \u00a4 description : str pydantic-field \u00a4 A human-readable description of control objectives. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Risk ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 characterizations : List [ trestle . oscal . assessment_results . Characterization ] pydantic-field \u00a4 deadline : datetime pydantic-field \u00a4 The date/time by which the risk must be resolved. description : str pydantic-field required \u00a4 A human-readable summary of the identified risk, to include a statement of how the risk impacts the system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 mitigating_factors : List [ trestle . oscal . common . MitigatingFactor ] pydantic-field \u00a4 origins : List [ trestle . oscal . assessment_results . Origin ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_observations : List [ trestle . oscal . common . RelatedObservation1 ] pydantic-field \u00a4 remediations : List [ trestle . oscal . assessment_results . Response ] pydantic-field \u00a4 risk_log : RiskLog pydantic-field \u00a4 A log of all risk-related tasks taken. statement : str pydantic-field required \u00a4 An summary of impact for how the risk affects the system. status : ConstrainedStrValue pydantic-field required \u00a4 Describes the status of the associated risk. threat_ids : List [ trestle . oscal . common . ThreatId ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 The title for this risk. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given risk across revisions. Config \u00a4 RiskLog ( OscalBaseModel ) pydantic-model \u00a4 entries : List [ trestle . oscal . assessment_results . Entry1 ] pydantic-field required \u00a4 Config \u00a4 SelectControlById ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a control with a corresponding id value. statement_ids : List [ trestle . oscal . common . StatementId ] pydantic-field \u00a4 Config \u00a4 SetParameter ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 param_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a parameter within a control, who's catalog has been imported into the current implementation context. remarks : Remarks pydantic-field \u00a4 values : List [ trestle . oscal . common . Value ] pydantic-field required \u00a4 Config \u00a4 State ( Enum ) \u00a4 An enumeration. not_satisfied \u00a4 satisfied \u00a4 State1 ( Enum ) \u00a4 An enumeration. disposition \u00a4 operational \u00a4 other \u00a4 under_development \u00a4 Status ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 reason : ConstrainedStrValue pydantic-field \u00a4 The reason the objective was given it's status. remarks : Remarks pydantic-field \u00a4 state : State pydantic-field required \u00a4 An indication as to whether the objective is satisfied or not. Config \u00a4 Status1 ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 remarks : Remarks pydantic-field \u00a4 state : State1 pydantic-field required \u00a4 The operational status. Config \u00a4 Step ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this step. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 reviewed_controls : ReviewedControls pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this step. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies a step. This UUID may be referenced elsewhere in an OSCAL document when referring to this step. A UUID should be consistently used for a given test step across revisions of the document. Config \u00a4 SystemComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A description of the component, including information about its function. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 protocols : List [ trestle . oscal . common . Protocol ] pydantic-field \u00a4 purpose : str pydantic-field \u00a4 A summary of the technological or business purpose of the component. remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 status : Status1 pydantic-field required \u00a4 Describes the operational status of the system component. title : str pydantic-field required \u00a4 A human readable name for the system component. type : ConstrainedStrValue pydantic-field required \u00a4 A category describing the purpose of the component. uuid : ConstrainedStrValue pydantic-field required \u00a4 The unique identifier for the component. Config \u00a4 handler: python","title":"assessment_results"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results","text":"","title":"assessment_results"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity","text":"","title":"Activity"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.description","text":"A human-readable description of this included activity.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.related_controls","text":"","title":"related_controls"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.steps","text":"","title":"steps"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.title","text":"The title for this included activity.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.uuid","text":"Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given included activity across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Activity.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentAssets","text":"","title":"AssessmentAssets"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentAssets.assessment_platforms","text":"","title":"assessment_platforms"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentAssets.components","text":"","title":"components"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentAssets.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentLog","text":"","title":"AssessmentLog"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentLog.entries","text":"","title":"entries"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentLog.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults","text":"","title":"AssessmentResults"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults.back_matter","text":"","title":"back_matter"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults.import_ap","text":"","title":"import_ap"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults.local_definitions","text":"Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.","title":"local_definitions"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults.metadata","text":"","title":"metadata"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults.results","text":"","title":"results"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults.uuid","text":"Uniquely identifies this assessment results file. This UUID must be changed each time the content of the results changes.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.AssessmentResults.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Attestation","text":"","title":"Attestation"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Attestation.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Attestation.responsible_parties","text":"","title":"responsible_parties"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Attestation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Characterization","text":"","title":"Characterization"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Characterization.facets","text":"","title":"facets"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Characterization.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Characterization.origin","text":"","title":"origin"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Characterization.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Characterization.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection","text":"","title":"ControlSelection"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection.description","text":"A human-readable description of in-scope controls specified for assessment.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection.exclude_controls","text":"","title":"exclude_controls"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection.include_all","text":"A key word to indicate all.","title":"include_all"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection.include_controls","text":"","title":"include_controls"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ControlSelection.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry","text":"","title":"Entry"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.description","text":"A human-readable description of this event.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.end","text":"Identifies the end date and time of an event. If the event is a point in time, the start and end will be the same date and time.","title":"end"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.logged_by","text":"","title":"logged_by"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.related_tasks","text":"","title":"related_tasks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.start","text":"Identifies the start date and time of an event.","title":"start"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.title","text":"The title for this event.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.uuid","text":"Uniquely identifies an assessment event. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1","text":"","title":"Entry1"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.description","text":"A human-readable description of what was done regarding the risk.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.end","text":"Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time.","title":"end"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.logged_by","text":"","title":"logged_by"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.related_responses","text":"","title":"related_responses"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.start","text":"Identifies the start date and time of the event.","title":"start"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.status_change","text":"","title":"status_change"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.title","text":"The title for this risk log entry.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.uuid","text":"Uniquely identifies a risk log entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Entry1.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding","text":"","title":"Finding"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.description","text":"A human-readable description of this finding.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.implementation_statement_uuid","text":"Identifies the implementation statement in the SSP to which this finding is related.","title":"implementation_statement_uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.related_observations","text":"","title":"related_observations"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.related_risks","text":"","title":"related_risks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.target","text":"","title":"target"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.title","text":"The title for this finding.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.uuid","text":"Uniquely identifies this finding. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given finding across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Finding.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget","text":"","title":"FindingTarget"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.description","text":"A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.implementation_status","text":"","title":"implementation_status"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.status","text":"A determination of if the objective is satisfied or not within a given system.","title":"status"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.target_id","text":"Identifies the specific target qualified by the type.","title":"target_id"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.title","text":"The title for this objective status.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.type","text":"Identifies the type of the target.","title":"type"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.FindingTarget.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ImportAp","text":"","title":"ImportAp"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ImportAp-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ImportAp.href","text":"A resolvable URL reference to the assessment plan governing the assessment activities.","title":"href"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ImportAp.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ImportAp.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions","text":"","title":"LocalDefinitions"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions.activities","text":"","title":"activities"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions.objectives_and_methods","text":"","title":"objectives_and_methods"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions1","text":"","title":"LocalDefinitions1"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions1.assessment_assets","text":"","title":"assessment_assets"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions1.components","text":"","title":"components"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions1.inventory_items","text":"","title":"inventory_items"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions1.tasks","text":"","title":"tasks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions1.users","text":"","title":"users"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.LocalDefinitions1.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Method","text":"","title":"Method"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Method-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Method.__root__","text":"Identifies how the observation was made.","title":"__root__"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Model","text":"","title":"Model"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Model.assessment_results","text":"","title":"assessment_results"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation","text":"","title":"Observation"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.collected","text":"Date/time stamp identifying when the finding information was collected.","title":"collected"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.description","text":"A human-readable description of this assessment observation.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.expires","text":"Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios.","title":"expires"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.methods","text":"","title":"methods"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.relevant_evidence","text":"","title":"relevant_evidence"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.title","text":"The title for this observation.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.types","text":"","title":"types"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.uuid","text":"Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given observation across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Observation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Origin","text":"","title":"Origin"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Origin.actors","text":"","title":"actors"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Origin.related_tasks","text":"","title":"related_tasks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Origin.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response","text":"","title":"Response"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.description","text":"A human-readable description of this response plan.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.lifecycle","text":"Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.","title":"lifecycle"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.required_assets","text":"","title":"required_assets"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.tasks","text":"","title":"tasks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.title","text":"The title for this response activity.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.uuid","text":"Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given remediation across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Response.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result","text":"","title":"Result"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.assessment_log","text":"A log of all assessment-related actions taken.","title":"assessment_log"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.attestations","text":"","title":"attestations"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.description","text":"A human-readable description of this set of test results.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.end","text":"Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.","title":"end"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.findings","text":"","title":"findings"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.local_definitions","text":"Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.","title":"local_definitions"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.observations","text":"","title":"observations"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.prop","text":"","title":"prop"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.reviewed_controls","text":"","title":"reviewed_controls"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.risks","text":"","title":"risks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.start","text":"Date/time stamp identifying the start of the evidence collection reflected in these results.","title":"start"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.title","text":"The title for this set of results.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.uuid","text":"Uniquely identifies this set of results. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given set of results across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Result.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls","text":"","title":"ReviewedControls"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls.control_objective_selections","text":"","title":"control_objective_selections"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls.control_selections","text":"","title":"control_selections"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls.description","text":"A human-readable description of control objectives.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.ReviewedControls.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk","text":"","title":"Risk"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.characterizations","text":"","title":"characterizations"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.deadline","text":"The date/time by which the risk must be resolved.","title":"deadline"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.description","text":"A human-readable summary of the identified risk, to include a statement of how the risk impacts the system.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.mitigating_factors","text":"","title":"mitigating_factors"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.related_observations","text":"","title":"related_observations"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.remediations","text":"","title":"remediations"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.risk_log","text":"A log of all risk-related tasks taken.","title":"risk_log"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.statement","text":"An summary of impact for how the risk affects the system.","title":"statement"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.status","text":"Describes the status of the associated risk.","title":"status"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.threat_ids","text":"","title":"threat_ids"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.title","text":"The title for this risk.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.uuid","text":"Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given risk across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Risk.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.RiskLog","text":"","title":"RiskLog"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.RiskLog.entries","text":"","title":"entries"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.RiskLog.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SelectControlById","text":"","title":"SelectControlById"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SelectControlById-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SelectControlById.control_id","text":"A reference to a control with a corresponding id value.","title":"control_id"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SelectControlById.statement_ids","text":"","title":"statement_ids"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SelectControlById.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SetParameter","text":"","title":"SetParameter"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SetParameter-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SetParameter.param_id","text":"A reference to a parameter within a control, who's catalog has been imported into the current implementation context.","title":"param_id"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SetParameter.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SetParameter.values","text":"","title":"values"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SetParameter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.State","text":"An enumeration.","title":"State"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.State.not_satisfied","text":"","title":"not_satisfied"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.State.satisfied","text":"","title":"satisfied"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.State1","text":"An enumeration.","title":"State1"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.State1.disposition","text":"","title":"disposition"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.State1.operational","text":"","title":"operational"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.State1.other","text":"","title":"other"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.State1.under_development","text":"","title":"under_development"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status","text":"","title":"Status"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status.reason","text":"The reason the objective was given it's status.","title":"reason"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status.state","text":"An indication as to whether the objective is satisfied or not.","title":"state"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status1","text":"","title":"Status1"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status1-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status1.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status1.state","text":"The operational status.","title":"state"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Status1.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step","text":"","title":"Step"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.description","text":"A human-readable description of this step.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.reviewed_controls","text":"","title":"reviewed_controls"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.title","text":"The title for this step.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.uuid","text":"Uniquely identifies a step. This UUID may be referenced elsewhere in an OSCAL document when referring to this step. A UUID should be consistently used for a given test step across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.Step.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent","text":"","title":"SystemComponent"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.description","text":"A description of the component, including information about its function.","title":"description"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.protocols","text":"","title":"protocols"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.purpose","text":"A summary of the technological or business purpose of the component.","title":"purpose"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.status","text":"Describes the operational status of the system component.","title":"status"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.title","text":"A human readable name for the system component.","title":"title"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.type","text":"A category describing the purpose of the component.","title":"type"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.uuid","text":"The unique identifier for the component.","title":"uuid"},{"location":"api_reference/trestle.oscal.assessment_results/#trestle.oscal.assessment_results.SystemComponent.Config","text":"handler: python","title":"Config"},{"location":"api_reference/trestle.oscal.catalog/","text":"trestle.oscal.catalog \u00a4 Classes \u00a4 Catalog ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 back_matter : BackMatter pydantic-field \u00a4 controls : List [ trestle . oscal . catalog . Control ] pydantic-field \u00a4 groups : List [ trestle . oscal . catalog . Group ] pydantic-field \u00a4 metadata : Metadata pydantic-field required \u00a4 params : List [ trestle . oscal . common . Parameter ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised. Config \u00a4 Control ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 class_ : ConstrainedStrValue pydantic-field \u00a4 A textual label that provides a sub-type or characterization of the control. controls : List [ trestle . oscal . catalog . Control ] pydantic-field \u00a4 id : ConstrainedStrValue pydantic-field required \u00a4 A unique identifier for a specific control instance that can be used to reference the control in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same control across minor revisions of the document. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 params : List [ trestle . oscal . common . Parameter ] pydantic-field \u00a4 parts : List [ trestle . oscal . common . Part ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 A name given to the control, which may be used by a tool for display and navigation. Config \u00a4 Group ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 class_ : ConstrainedStrValue pydantic-field \u00a4 A textual label that provides a sub-type or characterization of the group. controls : List [ trestle . oscal . catalog . Control ] pydantic-field \u00a4 groups : List [ trestle . oscal . catalog . Group ] pydantic-field \u00a4 id : ConstrainedStrValue pydantic-field \u00a4 A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 params : List [ trestle . oscal . common . Parameter ] pydantic-field \u00a4 parts : List [ trestle . oscal . common . Part ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 A name given to the group, which may be used by a tool for display and navigation. Config \u00a4 Model ( OscalBaseModel ) pydantic-model \u00a4 catalog : Catalog pydantic-field required \u00a4 handler: python","title":"catalog"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog","text":"","title":"catalog"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog","text":"","title":"Catalog"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog.back_matter","text":"","title":"back_matter"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog.controls","text":"","title":"controls"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog.groups","text":"","title":"groups"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog.metadata","text":"","title":"metadata"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog.params","text":"","title":"params"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog.uuid","text":"A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised.","title":"uuid"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Catalog.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control","text":"","title":"Control"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.class_","text":"A textual label that provides a sub-type or characterization of the control.","title":"class_"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.controls","text":"","title":"controls"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.id","text":"A unique identifier for a specific control instance that can be used to reference the control in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same control across minor revisions of the document.","title":"id"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.params","text":"","title":"params"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.title","text":"A name given to the control, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Control.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group","text":"","title":"Group"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.class_","text":"A textual label that provides a sub-type or characterization of the group.","title":"class_"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.controls","text":"","title":"controls"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.groups","text":"","title":"groups"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.id","text":"A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document.","title":"id"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.params","text":"","title":"params"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.title","text":"A name given to the group, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Group.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Model","text":"","title":"Model"},{"location":"api_reference/trestle.oscal.catalog/#trestle.oscal.catalog.Model.catalog","text":"handler: python","title":"catalog"},{"location":"api_reference/trestle.oscal.common/","text":"trestle.oscal.common \u00a4 Classes \u00a4 AddrLine ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 A single line of an address. Address ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 addr_lines : List [ trestle . oscal . common . AddrLine ] pydantic-field \u00a4 city : ConstrainedStrValue pydantic-field \u00a4 City, town or geographical region for the mailing address. country : ConstrainedStrValue pydantic-field \u00a4 The ISO 3166-1 alpha-2 country code for the mailing address. postal_code : ConstrainedStrValue pydantic-field \u00a4 Postal or ZIP code for mailing address state : ConstrainedStrValue pydantic-field \u00a4 State, province or analogous geographical region for mailing address type : ConstrainedStrValue pydantic-field \u00a4 Indicates the type of address. Config \u00a4 AssessmentMethod ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of this assessment method. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 part : AssessmentPart pydantic-field required \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this defined assessment method. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given assessment method across revisions of the document. Config \u00a4 AssessmentPart ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 class_ : ConstrainedStrValue pydantic-field \u00a4 A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 name : ConstrainedStrValue pydantic-field required \u00a4 A textual label that uniquely identifies the part's semantic type. ns : AnyUrl pydantic-field \u00a4 A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name. parts : List [ trestle . oscal . common . AssessmentPart ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 prose : str pydantic-field \u00a4 Permits multiple paragraphs, lists, tables etc. title : str pydantic-field \u00a4 A name given to the part, which may be used by a tool for display and navigation. uuid : ConstrainedStrValue pydantic-field \u00a4 A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document. Config \u00a4 AssessmentPlatform ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 title : str pydantic-field \u00a4 The title or name for the assessment platform. uses_components : List [ trestle . oscal . common . UsesComponent ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this assessment Platform. Config \u00a4 AssessmentSubject ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of the collection of subjects being included in this assessment. exclude_subjects : List [ trestle . oscal . common . SelectSubjectById ] pydantic-field \u00a4 include_all : Dict [ str , Any ] pydantic-field \u00a4 A key word to indicate all. include_subjects : List [ trestle . oscal . common . SelectSubjectById ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 type : ConstrainedStrValue pydantic-field required \u00a4 Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement. Config \u00a4 AssessmentSubjectPlaceholder ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of intent of this assessment subject placeholder. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 sources : List [ trestle . oscal . common . Source ] pydantic-field required \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies a set of assessment subjects that will be identified by a task or an activity that is part of a task. Config \u00a4 AssociatedActivity ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 activity_uuid : ConstrainedStrValue pydantic-field required \u00a4 References an activity defined in the list of activities. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 subjects : List [ trestle . oscal . common . AssessmentSubject ] pydantic-field required \u00a4 Config \u00a4 AtFrequency ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 period : ConstrainedIntValue pydantic-field required \u00a4 The task must occur after the specified period has elapsed. unit : Unit pydantic-field required \u00a4 The unit of time for the period. Config \u00a4 AuthorizedPrivilege ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A summary of the privilege's purpose within the system. functions_performed : List [ trestle . oscal . common . FunctionPerformed ] pydantic-field required \u00a4 title : str pydantic-field required \u00a4 A human readable name for the privilege. Config \u00a4 BackMatter ( OscalBaseModel ) pydantic-model \u00a4 resources : List [ trestle . oscal . common . Resource ] pydantic-field \u00a4 Config \u00a4 Base64 ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 filename : str pydantic-field \u00a4 Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded. media_type : ConstrainedStrValue pydantic-field \u00a4 Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry. value : str pydantic-field required \u00a4 Config \u00a4 Citation ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 text : str pydantic-field required \u00a4 A line of citation text. Config \u00a4 ControlObjectiveSelection ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of this collection of control objectives. exclude_objectives : List [ trestle . oscal . common . SelectObjectiveById ] pydantic-field \u00a4 include_all : Dict [ str , Any ] pydantic-field \u00a4 A key word to indicate all. include_objectives : List [ trestle . oscal . common . SelectObjectiveById ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Dependency ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 remarks : Remarks pydantic-field \u00a4 task_uuid : ConstrainedStrValue pydantic-field required \u00a4 References a unique task by UUID. Config \u00a4 DocumentId ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 identifier : str pydantic-field required \u00a4 scheme : AnyUrl pydantic-field \u00a4 Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters. Config \u00a4 EmailAddress ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : EmailStr pydantic-field required special \u00a4 An email address as defined by RFC 5322 Section 3.4.1. ExternalId ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 id : str pydantic-field required \u00a4 scheme : AnyUrl pydantic-field required \u00a4 Indicates the type of external identifier. Config \u00a4 Facet ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 name : ConstrainedStrValue pydantic-field required \u00a4 The name of the risk metric within the specified system. props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 system : AnyUrl pydantic-field required \u00a4 Specifies the naming system under which this risk metric is organized, which allows for the same names to be used in different systems controlled by different parties. This avoids the potential of a name clash. value : ConstrainedStrValue pydantic-field required \u00a4 Indicates the value of the facet. Config \u00a4 FunctionPerformed ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 Describes a function performed for a given authorized privilege by this user class. Hash ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 algorithm : ConstrainedStrValue pydantic-field required \u00a4 Method by which a hash is derived value : str pydantic-field required \u00a4 Config \u00a4 HowMany ( Enum ) \u00a4 An enumeration. one \u00a4 one_or_more \u00a4 IdentifiedSubject ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 subject_placeholder_uuid : ConstrainedStrValue pydantic-field required \u00a4 References a unique assessment subject placeholder defined by this task. subjects : List [ trestle . oscal . common . AssessmentSubject ] pydantic-field required \u00a4 Config \u00a4 ImplementationStatus ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 remarks : Remarks pydantic-field \u00a4 state : ConstrainedStrValue pydantic-field required \u00a4 Identifies the implementation status of the control or control objective. Config \u00a4 ImplementedComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 component_uuid : ConstrainedStrValue pydantic-field required \u00a4 A reference to a component that is implemented as part of an inventory item. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_parties : List [ trestle . oscal . common . ResponsibleParty ] pydantic-field \u00a4 Config \u00a4 ImportSsp ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 href : str pydantic-field required \u00a4 A resolvable URL reference to the system security plan for the system being assessed. remarks : Remarks pydantic-field \u00a4 Config \u00a4 InventoryItem ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A summary of the inventory item stating its purpose within the system. implemented_components : List [ trestle . oscal . common . ImplementedComponent ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_parties : List [ trestle . oscal . common . ResponsibleParty ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this inventory item entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 LastModified ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : datetime pydantic-field required special \u00a4 The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included. Link ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 href : str pydantic-field required \u00a4 A resolvable URL reference to a resource. media_type : ConstrainedStrValue pydantic-field \u00a4 Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry. rel : ConstrainedStrValue pydantic-field \u00a4 Describes the type of relationship provided by the link. This can be an indicator of the link's purpose. text : str pydantic-field \u00a4 A textual label to associate with the link, which may be used for presentation in a tool. Config \u00a4 LocalObjective ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a control with a corresponding id value. description : str pydantic-field \u00a4 A human-readable description of this control objective. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 parts : List [ trestle . oscal . common . Part ] pydantic-field required \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Location ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 address : Address pydantic-field required \u00a4 email_addresses : List [ trestle . oscal . common . EmailAddress ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 telephone_numbers : List [ trestle . oscal . common . TelephoneNumber ] pydantic-field \u00a4 title : str pydantic-field \u00a4 A name given to the location, which may be used by a tool for display and navigation. urls : List [ pydantic . networks . AnyUrl ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document. Config \u00a4 LocationUuid ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 References a location defined in metadata. LoggedBy ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 party_uuid : ConstrainedStrValue pydantic-field required \u00a4 A pointer to the party who is making the log entry. role_id : ConstrainedStrValue pydantic-field \u00a4 A point to the role-id of the role in which the party is making the log entry. Config \u00a4 MemberOfOrganization ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 Identifies that the party object is a member of the organization associated with the provided UUID. Metadata ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 document_ids : List [ trestle . oscal . common . DocumentId ] pydantic-field \u00a4 last_modified : LastModified pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 locations : List [ trestle . oscal . common . Location ] pydantic-field \u00a4 oscal_version : OscalVersion pydantic-field required \u00a4 parties : List [ trestle . oscal . common . Party ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 published : Published pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_parties : List [ trestle . oscal . common . ResponsibleParty ] pydantic-field \u00a4 revisions : List [ trestle . oscal . common . Revision ] pydantic-field \u00a4 roles : List [ trestle . oscal . common . Role ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 A name given to the document, which may be used by a tool for display and navigation. version : Version pydantic-field required \u00a4 Config \u00a4 MitigatingFactor ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this mitigating factor. implementation_uuid : ConstrainedStrValue pydantic-field \u00a4 Points to an implementation statement in the SSP. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 subjects : List [ trestle . oscal . common . SubjectReference ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this mitigating factor. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given mitigating factor across revisions. Config \u00a4 OnDate ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 date : datetime pydantic-field required \u00a4 The task must occur on the specified date. Config \u00a4 OriginActor ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 actor_uuid : ConstrainedStrValue pydantic-field required \u00a4 A pointer to the tool or person based on the associated type. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 role_id : ConstrainedStrValue pydantic-field \u00a4 For a party, this can optionally be used to specify the role the actor was performing. type : Type3 pydantic-field required \u00a4 The kind of actor. Config \u00a4 OscalVersion ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 The OSCAL model version the document was authored against. Parameter ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 class_ : ConstrainedStrValue pydantic-field \u00a4 A textual label that provides a characterization of the parameter. constraints : List [ trestle . oscal . common . ParameterConstraint ] pydantic-field \u00a4 depends_on : ConstrainedStrValue pydantic-field \u00a4 Another parameter invoking this one guidelines : List [ trestle . oscal . common . ParameterGuideline ] pydantic-field \u00a4 id : ConstrainedStrValue pydantic-field required \u00a4 A unique identifier for a specific parameter instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same parameter across minor revisions of the document. label : str pydantic-field \u00a4 A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 select : ParameterSelection pydantic-field \u00a4 usage : str pydantic-field \u00a4 Describes the purpose and use of a parameter values : List [ trestle . oscal . common . ParameterValue ] pydantic-field \u00a4 Config \u00a4 ParameterConstraint ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A textual summary of the constraint to be applied. tests : List [ trestle . oscal . common . Test ] pydantic-field \u00a4 Config \u00a4 ParameterGuideline ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 prose : str pydantic-field required \u00a4 Prose permits multiple paragraphs, lists, tables etc. Config \u00a4 ParameterSelection ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 choice : List [ str ] pydantic-field \u00a4 how_many : HowMany pydantic-field \u00a4 Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted. Config \u00a4 ParameterValue ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 A parameter value or set of values. Part ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 class_ : ConstrainedStrValue pydantic-field \u00a4 A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns. id : ConstrainedStrValue pydantic-field \u00a4 A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 name : ConstrainedStrValue pydantic-field required \u00a4 A textual label that uniquely identifies the part's semantic type. ns : AnyUrl pydantic-field \u00a4 A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name. parts : List [ trestle . oscal . common . Part ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 prose : str pydantic-field \u00a4 Permits multiple paragraphs, lists, tables etc. title : str pydantic-field \u00a4 A name given to the part, which may be used by a tool for display and navigation. Config \u00a4 Party ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 addresses : List [ trestle . oscal . common . Address ] pydantic-field \u00a4 email_addresses : List [ trestle . oscal . common . EmailAddress ] pydantic-field \u00a4 external_ids : List [ trestle . oscal . common . ExternalId ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 location_uuids : List [ trestle . oscal . common . LocationUuid ] pydantic-field \u00a4 member_of_organizations : List [ trestle . oscal . common . MemberOfOrganization ] pydantic-field \u00a4 name : ConstrainedStrValue pydantic-field \u00a4 The full name of the party. This is typically the legal name associated with the party. props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 short_name : ConstrainedStrValue pydantic-field \u00a4 A short common name, abbreviation, or acronym for the party. telephone_numbers : List [ trestle . oscal . common . TelephoneNumber ] pydantic-field \u00a4 type : Type pydantic-field required \u00a4 A category describing the kind of party the object describes. uuid : ConstrainedStrValue pydantic-field required \u00a4 A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given party across revisions of the document. Config \u00a4 PartyUuid ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 References a party defined in metadata. PortRange ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 end : ConstrainedIntValue pydantic-field \u00a4 Indicates the ending port number in a port range start : ConstrainedIntValue pydantic-field \u00a4 Indicates the starting port number in a port range transport : Transport pydantic-field \u00a4 Indicates the transport type. Config \u00a4 Property ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 class_ : ConstrainedStrValue pydantic-field \u00a4 A textual label that provides a sub-type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns. name : ConstrainedStrValue pydantic-field required \u00a4 A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object. ns : AnyUrl pydantic-field \u00a4 A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name. remarks : Remarks pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field \u00a4 A unique identifier that can be used to reference this property elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document. value : ConstrainedStrValue pydantic-field required \u00a4 Indicates the value of the attribute, characteristic, or quality. Config \u00a4 Protocol ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 name : ConstrainedStrValue pydantic-field required \u00a4 The common name of the protocol, which should be the appropriate \"service name\" from the IANA Service Name and Transport Protocol Port Number Registry. port_ranges : List [ trestle . oscal . common . PortRange ] pydantic-field \u00a4 title : str pydantic-field \u00a4 A human readable name for the protocol (e.g., Transport Layer Security). uuid : ConstrainedStrValue pydantic-field \u00a4 A globally unique identifier that can be used to reference this service protocol entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 Published ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : datetime pydantic-field required special \u00a4 The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included. RelatedObservation ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 observation_uuid : ConstrainedStrValue pydantic-field required \u00a4 References an observation defined in the list of observations. Config \u00a4 RelatedObservation1 ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 observation_uuid : ConstrainedStrValue pydantic-field required \u00a4 References an observation defined in the list of observations. Config \u00a4 RelatedResponse ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_tasks : List [ trestle . oscal . common . RelatedTask ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 response_uuid : ConstrainedStrValue pydantic-field required \u00a4 References a unique risk response by UUID. Config \u00a4 RelatedRisk ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 risk_uuid : ConstrainedStrValue pydantic-field required \u00a4 References an risk defined in the list of risks. Config \u00a4 RelatedTask ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 identified_subject : IdentifiedSubject pydantic-field \u00a4 Used to detail assessment subjects that were identfied by this task. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_parties : List [ trestle . oscal . common . ResponsibleParty ] pydantic-field \u00a4 subjects : List [ trestle . oscal . common . AssessmentSubject ] pydantic-field \u00a4 task_uuid : ConstrainedStrValue pydantic-field required \u00a4 References a unique task by UUID. Config \u00a4 RelevantEvidence ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this evidence. href : str pydantic-field \u00a4 A resolvable URL reference to relevant evidence. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Remarks ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : str pydantic-field required special \u00a4 Additional commentary on the containing object. RequiredAsset ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this required asset. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 subjects : List [ trestle . oscal . common . SubjectReference ] pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this required asset. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this required asset. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given required asset across revisions. Config \u00a4 Resource ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 base64 : Base64 pydantic-field \u00a4 The Base64 alphabet in RFC 2045 - aligned with XSD. citation : Citation pydantic-field \u00a4 A citation consisting of end note text and optional structured bibliographic data. description : str pydantic-field \u00a4 A short summary of the resource used to indicate the purpose of the resource. document_ids : List [ trestle . oscal . common . DocumentId ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 rlinks : List [ trestle . oscal . common . Rlink ] pydantic-field \u00a4 title : str pydantic-field \u00a4 A name given to the resource, which may be used by a tool for display and navigation. uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this defined resource elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 ResponsibleParty ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 party_uuids : List [ trestle . oscal . common . PartyUuid ] pydantic-field required \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 role_id : ConstrainedStrValue pydantic-field required \u00a4 The role that the party is responsible for. Config \u00a4 ResponsibleRole ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 party_uuids : List [ trestle . oscal . common . PartyUuid ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 role_id : ConstrainedStrValue pydantic-field required \u00a4 The role that is responsible for the business function. Config \u00a4 Revision ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 last_modified : LastModified pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 oscal_version : OscalVersion pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 published : Published pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 title : str pydantic-field \u00a4 A name given to the document revision, which may be used by a tool for display and navigation. version : Version pydantic-field \u00a4 Config \u00a4 RiskStatus ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 Describes the status of the associated risk. Rlink ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 hashes : List [ trestle . oscal . common . Hash ] pydantic-field \u00a4 href : str pydantic-field required \u00a4 A resolvable URI reference to a resource. media_type : ConstrainedStrValue pydantic-field \u00a4 Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry. Config \u00a4 Role ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A summary of the role's purpose and associated responsibilities. id : ConstrainedStrValue pydantic-field required \u00a4 A unique identifier for a specific role instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 short_name : ConstrainedStrValue pydantic-field \u00a4 A short common name, abbreviation, or acronym for the role. title : str pydantic-field required \u00a4 A name given to the role, which may be used by a tool for display and navigation. Config \u00a4 RoleId ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 A reference to the roles served by the user. SelectObjectiveById ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 objective_id : ConstrainedStrValue pydantic-field required \u00a4 Points to an assessment objective. Config \u00a4 SelectSubjectById ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 subject_uuid : ConstrainedStrValue pydantic-field required \u00a4 A pointer to a component, inventory-item, location, party, user, or resource using it's UUID. type : ConstrainedStrValue pydantic-field required \u00a4 Used to indicate the type of object pointed to by the uuid-ref within a subject. Config \u00a4 Source ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 task_uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies an assessment activity to be performed as part of the event. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document. Config \u00a4 StatementId ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 Used to constrain the selection to only specificity identified statements. SubjectReference ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 subject_uuid : ConstrainedStrValue pydantic-field required \u00a4 A pointer to a component, inventory-item, location, party, user, or resource using it's UUID. title : str pydantic-field \u00a4 The title or name for the referenced subject. type : ConstrainedStrValue pydantic-field required \u00a4 Used to indicate the type of object pointed to by the uuid-ref within a subject. Config \u00a4 SystemId ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 id : str pydantic-field required \u00a4 identifier_type : AnyUrl pydantic-field \u00a4 Identifies the identification system from which the provided identifier was assigned. Config \u00a4 SystemUser ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 authorized_privileges : List [ trestle . oscal . common . AuthorizedPrivilege ] pydantic-field \u00a4 description : str pydantic-field \u00a4 A summary of the user's purpose within the system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 role_ids : List [ trestle . oscal . common . RoleId ] pydantic-field \u00a4 short_name : ConstrainedStrValue pydantic-field \u00a4 A short common name, abbreviation, or acronym for the user. title : str pydantic-field \u00a4 A name given to the user, which may be used by a tool for display and navigation. uuid : ConstrainedStrValue pydantic-field required \u00a4 The unique identifier for the user class. Config \u00a4 Task ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 associated_activities : List [ trestle . oscal . common . AssociatedActivity ] pydantic-field \u00a4 dependencies : List [ trestle . oscal . common . Dependency ] pydantic-field \u00a4 description : str pydantic-field \u00a4 A human-readable description of this task. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 subjects : List [ trestle . oscal . common . AssessmentSubject ] pydantic-field \u00a4 tasks : List [ trestle . oscal . common . Task ] pydantic-field \u00a4 timing : Timing pydantic-field \u00a4 The timing under which the task is intended to occur. title : str pydantic-field required \u00a4 The title for this task. type : ConstrainedStrValue pydantic-field required \u00a4 The type of task. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this assessment task. Config \u00a4 TelephoneNumber ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 number : str pydantic-field required \u00a4 type : ConstrainedStrValue pydantic-field \u00a4 Indicates the type of phone number. Config \u00a4 Test ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 expression : ConstrainedStrValue pydantic-field required \u00a4 A formal (executable) expression of a constraint remarks : Remarks pydantic-field \u00a4 Config \u00a4 ThreatId ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 href : str pydantic-field \u00a4 An optional location for the threat data, from which this ID originates. id : str pydantic-field required \u00a4 system : AnyUrl pydantic-field required \u00a4 Specifies the source of the threat information. Config \u00a4 Timing ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 at_frequency : AtFrequency pydantic-field \u00a4 The task is intended to occur at the specified frequency. on_date : OnDate pydantic-field \u00a4 The task is intended to occur on the specified date. within_date_range : WithinDateRange pydantic-field \u00a4 The task is intended to occur within the specified date range. Config \u00a4 Transport ( Enum ) \u00a4 An enumeration. TCP \u00a4 UDP \u00a4 Type ( Enum ) \u00a4 An enumeration. organization \u00a4 person \u00a4 Type1 ( Enum ) \u00a4 An enumeration. objective_id \u00a4 statement_id \u00a4 Type2 ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 Identifies the nature of the observation. More than one may be used to further qualify and enable filtering. Type3 ( Enum ) \u00a4 An enumeration. assessment_platform \u00a4 party \u00a4 tool \u00a4 Unit ( Enum ) \u00a4 An enumeration. days \u00a4 hours \u00a4 minutes \u00a4 months \u00a4 seconds \u00a4 years \u00a4 UsesComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 component_uuid : ConstrainedStrValue pydantic-field required \u00a4 A reference to a component that is implemented as part of an inventory item. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_parties : List [ trestle . oscal . common . ResponsibleParty ] pydantic-field \u00a4 Config \u00a4 Value ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 A parameter value or set of values. Version ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 A string used to distinguish the current version of the document from other previous (and future) versions. WithinDateRange ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 end : datetime pydantic-field required \u00a4 The task must occur on or before the specified date. start : datetime pydantic-field required \u00a4 The task must occur on or after the specified date. Config \u00a4 handler: python","title":"common"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common","text":"","title":"common"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AddrLine","text":"","title":"AddrLine"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AddrLine-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AddrLine.__root__","text":"A single line of an address.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address","text":"","title":"Address"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address.addr_lines","text":"","title":"addr_lines"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address.city","text":"City, town or geographical region for the mailing address.","title":"city"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address.country","text":"The ISO 3166-1 alpha-2 country code for the mailing address.","title":"country"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address.postal_code","text":"Postal or ZIP code for mailing address","title":"postal_code"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address.state","text":"State, province or analogous geographical region for mailing address","title":"state"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address.type","text":"Indicates the type of address.","title":"type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Address.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod","text":"","title":"AssessmentMethod"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod.description","text":"A human-readable description of this assessment method.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod.part","text":"","title":"part"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod.uuid","text":"Uniquely identifies this defined assessment method. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given assessment method across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentMethod.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart","text":"","title":"AssessmentPart"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.class_","text":"A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.","title":"class_"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.name","text":"A textual label that uniquely identifies the part's semantic type.","title":"name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.ns","text":"A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.","title":"ns"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.prose","text":"Permits multiple paragraphs, lists, tables etc.","title":"prose"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.title","text":"A name given to the part, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.uuid","text":"A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPart.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform","text":"","title":"AssessmentPlatform"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform.title","text":"The title or name for the assessment platform.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform.uses_components","text":"","title":"uses_components"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform.uuid","text":"Uniquely identifies this assessment Platform.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentPlatform.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject","text":"","title":"AssessmentSubject"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.description","text":"A human-readable description of the collection of subjects being included in this assessment.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.exclude_subjects","text":"","title":"exclude_subjects"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.include_all","text":"A key word to indicate all.","title":"include_all"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.include_subjects","text":"","title":"include_subjects"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.type","text":"Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement.","title":"type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubject.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder","text":"","title":"AssessmentSubjectPlaceholder"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder.description","text":"A human-readable description of intent of this assessment subject placeholder.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder.sources","text":"","title":"sources"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder.uuid","text":"Uniquely identifies a set of assessment subjects that will be identified by a task or an activity that is part of a task.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssessmentSubjectPlaceholder.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity","text":"","title":"AssociatedActivity"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity.activity_uuid","text":"References an activity defined in the list of activities.","title":"activity_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AssociatedActivity.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AtFrequency","text":"","title":"AtFrequency"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AtFrequency-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AtFrequency.period","text":"The task must occur after the specified period has elapsed.","title":"period"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AtFrequency.unit","text":"The unit of time for the period.","title":"unit"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AtFrequency.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AuthorizedPrivilege","text":"","title":"AuthorizedPrivilege"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AuthorizedPrivilege-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AuthorizedPrivilege.description","text":"A summary of the privilege's purpose within the system.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AuthorizedPrivilege.functions_performed","text":"","title":"functions_performed"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AuthorizedPrivilege.title","text":"A human readable name for the privilege.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.AuthorizedPrivilege.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.BackMatter","text":"","title":"BackMatter"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.BackMatter.resources","text":"","title":"resources"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.BackMatter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Base64","text":"","title":"Base64"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Base64-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Base64.filename","text":"Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.","title":"filename"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Base64.media_type","text":"Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.","title":"media_type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Base64.value","text":"","title":"value"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Base64.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Citation","text":"","title":"Citation"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Citation-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Citation.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Citation.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Citation.text","text":"A line of citation text.","title":"text"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Citation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection","text":"","title":"ControlObjectiveSelection"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection.description","text":"A human-readable description of this collection of control objectives.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection.exclude_objectives","text":"","title":"exclude_objectives"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection.include_all","text":"A key word to indicate all.","title":"include_all"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection.include_objectives","text":"","title":"include_objectives"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ControlObjectiveSelection.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Dependency","text":"","title":"Dependency"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Dependency-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Dependency.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Dependency.task_uuid","text":"References a unique task by UUID.","title":"task_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Dependency.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.DocumentId","text":"","title":"DocumentId"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.DocumentId-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.DocumentId.identifier","text":"","title":"identifier"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.DocumentId.scheme","text":"Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.","title":"scheme"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.DocumentId.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.EmailAddress","text":"","title":"EmailAddress"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.EmailAddress-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.EmailAddress.__root__","text":"An email address as defined by RFC 5322 Section 3.4.1.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ExternalId","text":"","title":"ExternalId"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ExternalId-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ExternalId.id","text":"","title":"id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ExternalId.scheme","text":"Indicates the type of external identifier.","title":"scheme"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ExternalId.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet","text":"","title":"Facet"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet.name","text":"The name of the risk metric within the specified system.","title":"name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet.system","text":"Specifies the naming system under which this risk metric is organized, which allows for the same names to be used in different systems controlled by different parties. This avoids the potential of a name clash.","title":"system"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet.value","text":"Indicates the value of the facet.","title":"value"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Facet.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.FunctionPerformed","text":"","title":"FunctionPerformed"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.FunctionPerformed-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.FunctionPerformed.__root__","text":"Describes a function performed for a given authorized privilege by this user class.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Hash","text":"","title":"Hash"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Hash-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Hash.algorithm","text":"Method by which a hash is derived","title":"algorithm"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Hash.value","text":"","title":"value"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Hash.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.HowMany","text":"An enumeration.","title":"HowMany"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.HowMany.one","text":"","title":"one"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.HowMany.one_or_more","text":"","title":"one_or_more"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.IdentifiedSubject","text":"","title":"IdentifiedSubject"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.IdentifiedSubject-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.IdentifiedSubject.subject_placeholder_uuid","text":"References a unique assessment subject placeholder defined by this task.","title":"subject_placeholder_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.IdentifiedSubject.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.IdentifiedSubject.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementationStatus","text":"","title":"ImplementationStatus"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementationStatus-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementationStatus.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementationStatus.state","text":"Identifies the implementation status of the control or control objective.","title":"state"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementationStatus.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementedComponent","text":"","title":"ImplementedComponent"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementedComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementedComponent.component_uuid","text":"A reference to a component that is implemented as part of an inventory item.","title":"component_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementedComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementedComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementedComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementedComponent.responsible_parties","text":"","title":"responsible_parties"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImplementedComponent.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImportSsp","text":"","title":"ImportSsp"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImportSsp-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImportSsp.href","text":"A resolvable URL reference to the system security plan for the system being assessed.","title":"href"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImportSsp.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ImportSsp.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem","text":"","title":"InventoryItem"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem.description","text":"A summary of the inventory item stating its purpose within the system.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem.implemented_components","text":"","title":"implemented_components"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem.responsible_parties","text":"","title":"responsible_parties"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem.uuid","text":"A globally unique identifier that can be used to reference this inventory item entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.InventoryItem.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LastModified","text":"","title":"LastModified"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LastModified-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LastModified.__root__","text":"The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Link","text":"","title":"Link"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Link-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Link.href","text":"A resolvable URL reference to a resource.","title":"href"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Link.media_type","text":"Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.","title":"media_type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Link.rel","text":"Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.","title":"rel"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Link.text","text":"A textual label to associate with the link, which may be used for presentation in a tool.","title":"text"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Link.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective","text":"","title":"LocalObjective"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective.control_id","text":"A reference to a control with a corresponding id value.","title":"control_id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective.description","text":"A human-readable description of this control objective.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocalObjective.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location","text":"","title":"Location"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.address","text":"","title":"address"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.email_addresses","text":"","title":"email_addresses"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.telephone_numbers","text":"","title":"telephone_numbers"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.title","text":"A name given to the location, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.urls","text":"","title":"urls"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.uuid","text":"A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Location.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocationUuid","text":"","title":"LocationUuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocationUuid-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LocationUuid.__root__","text":"References a location defined in metadata.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LoggedBy","text":"","title":"LoggedBy"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LoggedBy-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LoggedBy.party_uuid","text":"A pointer to the party who is making the log entry.","title":"party_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LoggedBy.role_id","text":"A point to the role-id of the role in which the party is making the log entry.","title":"role_id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.LoggedBy.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MemberOfOrganization","text":"","title":"MemberOfOrganization"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MemberOfOrganization-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MemberOfOrganization.__root__","text":"Identifies that the party object is a member of the organization associated with the provided UUID.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata","text":"","title":"Metadata"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.document_ids","text":"","title":"document_ids"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.last_modified","text":"","title":"last_modified"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.locations","text":"","title":"locations"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.oscal_version","text":"","title":"oscal_version"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.parties","text":"","title":"parties"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.published","text":"","title":"published"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.responsible_parties","text":"","title":"responsible_parties"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.revisions","text":"","title":"revisions"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.roles","text":"","title":"roles"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.title","text":"A name given to the document, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.version","text":"","title":"version"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Metadata.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor","text":"","title":"MitigatingFactor"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor.description","text":"A human-readable description of this mitigating factor.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor.implementation_uuid","text":"Points to an implementation statement in the SSP.","title":"implementation_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor.uuid","text":"Uniquely identifies this mitigating factor. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given mitigating factor across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.MitigatingFactor.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OnDate","text":"","title":"OnDate"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OnDate-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OnDate.date","text":"The task must occur on the specified date.","title":"date"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OnDate.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OriginActor","text":"","title":"OriginActor"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OriginActor-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OriginActor.actor_uuid","text":"A pointer to the tool or person based on the associated type.","title":"actor_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OriginActor.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OriginActor.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OriginActor.role_id","text":"For a party, this can optionally be used to specify the role the actor was performing.","title":"role_id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OriginActor.type","text":"The kind of actor.","title":"type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OriginActor.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OscalVersion","text":"","title":"OscalVersion"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OscalVersion-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.OscalVersion.__root__","text":"The OSCAL model version the document was authored against.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter","text":"","title":"Parameter"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.class_","text":"A textual label that provides a characterization of the parameter.","title":"class_"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.constraints","text":"","title":"constraints"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.depends_on","text":"Another parameter invoking this one","title":"depends_on"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.guidelines","text":"","title":"guidelines"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.id","text":"A unique identifier for a specific parameter instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same parameter across minor revisions of the document.","title":"id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.label","text":"A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.","title":"label"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.select","text":"","title":"select"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.usage","text":"Describes the purpose and use of a parameter","title":"usage"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.values","text":"","title":"values"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Parameter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterConstraint","text":"","title":"ParameterConstraint"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterConstraint-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterConstraint.description","text":"A textual summary of the constraint to be applied.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterConstraint.tests","text":"","title":"tests"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterConstraint.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterGuideline","text":"","title":"ParameterGuideline"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterGuideline-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterGuideline.prose","text":"Prose permits multiple paragraphs, lists, tables etc.","title":"prose"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterGuideline.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterSelection","text":"","title":"ParameterSelection"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterSelection-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterSelection.choice","text":"","title":"choice"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterSelection.how_many","text":"Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.","title":"how_many"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterSelection.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterValue","text":"","title":"ParameterValue"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterValue-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ParameterValue.__root__","text":"A parameter value or set of values.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part","text":"","title":"Part"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.class_","text":"A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.","title":"class_"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.id","text":"A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.","title":"id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.name","text":"A textual label that uniquely identifies the part's semantic type.","title":"name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.ns","text":"A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.","title":"ns"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.prose","text":"Permits multiple paragraphs, lists, tables etc.","title":"prose"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.title","text":"A name given to the part, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Part.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party","text":"","title":"Party"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.addresses","text":"","title":"addresses"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.email_addresses","text":"","title":"email_addresses"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.external_ids","text":"","title":"external_ids"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.location_uuids","text":"","title":"location_uuids"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.member_of_organizations","text":"","title":"member_of_organizations"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.name","text":"The full name of the party. This is typically the legal name associated with the party.","title":"name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.short_name","text":"A short common name, abbreviation, or acronym for the party.","title":"short_name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.telephone_numbers","text":"","title":"telephone_numbers"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.type","text":"A category describing the kind of party the object describes.","title":"type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.uuid","text":"A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given party across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Party.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PartyUuid","text":"","title":"PartyUuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PartyUuid-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PartyUuid.__root__","text":"References a party defined in metadata.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PortRange","text":"","title":"PortRange"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PortRange-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PortRange.end","text":"Indicates the ending port number in a port range","title":"end"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PortRange.start","text":"Indicates the starting port number in a port range","title":"start"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PortRange.transport","text":"Indicates the transport type.","title":"transport"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.PortRange.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property","text":"","title":"Property"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property.class_","text":"A textual label that provides a sub-type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.","title":"class_"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property.name","text":"A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.","title":"name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property.ns","text":"A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.","title":"ns"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property.uuid","text":"A unique identifier that can be used to reference this property elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property.value","text":"Indicates the value of the attribute, characteristic, or quality.","title":"value"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Property.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Protocol","text":"","title":"Protocol"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Protocol-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Protocol.name","text":"The common name of the protocol, which should be the appropriate \"service name\" from the IANA Service Name and Transport Protocol Port Number Registry.","title":"name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Protocol.port_ranges","text":"","title":"port_ranges"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Protocol.title","text":"A human readable name for the protocol (e.g., Transport Layer Security).","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Protocol.uuid","text":"A globally unique identifier that can be used to reference this service protocol entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Protocol.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Published","text":"","title":"Published"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Published-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Published.__root__","text":"The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedObservation","text":"","title":"RelatedObservation"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedObservation-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedObservation.observation_uuid","text":"References an observation defined in the list of observations.","title":"observation_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedObservation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedObservation1","text":"","title":"RelatedObservation1"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedObservation1-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedObservation1.observation_uuid","text":"References an observation defined in the list of observations.","title":"observation_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedObservation1.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedResponse","text":"","title":"RelatedResponse"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedResponse-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedResponse.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedResponse.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedResponse.related_tasks","text":"","title":"related_tasks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedResponse.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedResponse.response_uuid","text":"References a unique risk response by UUID.","title":"response_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedResponse.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedRisk","text":"","title":"RelatedRisk"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedRisk-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedRisk.risk_uuid","text":"References an risk defined in the list of risks.","title":"risk_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedRisk.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask","text":"","title":"RelatedTask"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask.identified_subject","text":"Used to detail assessment subjects that were identfied by this task.","title":"identified_subject"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask.responsible_parties","text":"","title":"responsible_parties"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask.task_uuid","text":"References a unique task by UUID.","title":"task_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelatedTask.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelevantEvidence","text":"","title":"RelevantEvidence"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelevantEvidence-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelevantEvidence.description","text":"A human-readable description of this evidence.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelevantEvidence.href","text":"A resolvable URL reference to relevant evidence.","title":"href"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelevantEvidence.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelevantEvidence.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelevantEvidence.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RelevantEvidence.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Remarks","text":"","title":"Remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Remarks-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Remarks.__root__","text":"Additional commentary on the containing object.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset","text":"","title":"RequiredAsset"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset.description","text":"A human-readable description of this required asset.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset.title","text":"The title for this required asset.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset.uuid","text":"Uniquely identifies this required asset. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given required asset across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RequiredAsset.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource","text":"","title":"Resource"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.base64","text":"The Base64 alphabet in RFC 2045 - aligned with XSD.","title":"base64"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.citation","text":"A citation consisting of end note text and optional structured bibliographic data.","title":"citation"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.description","text":"A short summary of the resource used to indicate the purpose of the resource.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.document_ids","text":"","title":"document_ids"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.rlinks","text":"","title":"rlinks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.title","text":"A name given to the resource, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.uuid","text":"A globally unique identifier that can be used to reference this defined resource elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Resource.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleParty","text":"","title":"ResponsibleParty"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleParty-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleParty.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleParty.party_uuids","text":"","title":"party_uuids"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleParty.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleParty.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleParty.role_id","text":"The role that the party is responsible for.","title":"role_id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleParty.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleRole","text":"","title":"ResponsibleRole"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleRole-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleRole.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleRole.party_uuids","text":"","title":"party_uuids"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleRole.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleRole.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleRole.role_id","text":"The role that is responsible for the business function.","title":"role_id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ResponsibleRole.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision","text":"","title":"Revision"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.last_modified","text":"","title":"last_modified"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.oscal_version","text":"","title":"oscal_version"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.published","text":"","title":"published"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.title","text":"A name given to the document revision, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.version","text":"","title":"version"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Revision.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RiskStatus","text":"","title":"RiskStatus"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RiskStatus-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RiskStatus.__root__","text":"Describes the status of the associated risk.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Rlink","text":"","title":"Rlink"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Rlink-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Rlink.hashes","text":"","title":"hashes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Rlink.href","text":"A resolvable URI reference to a resource.","title":"href"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Rlink.media_type","text":"Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.","title":"media_type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Rlink.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role","text":"","title":"Role"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role.description","text":"A summary of the role's purpose and associated responsibilities.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role.id","text":"A unique identifier for a specific role instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document.","title":"id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role.short_name","text":"A short common name, abbreviation, or acronym for the role.","title":"short_name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role.title","text":"A name given to the role, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Role.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RoleId","text":"","title":"RoleId"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RoleId-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.RoleId.__root__","text":"A reference to the roles served by the user.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectObjectiveById","text":"","title":"SelectObjectiveById"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectObjectiveById-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectObjectiveById.objective_id","text":"Points to an assessment objective.","title":"objective_id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectObjectiveById.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectSubjectById","text":"","title":"SelectSubjectById"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectSubjectById-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectSubjectById.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectSubjectById.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectSubjectById.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectSubjectById.subject_uuid","text":"A pointer to a component, inventory-item, location, party, user, or resource using it's UUID.","title":"subject_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectSubjectById.type","text":"Used to indicate the type of object pointed to by the uuid-ref within a subject.","title":"type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SelectSubjectById.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Source","text":"","title":"Source"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Source-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Source.task_uuid","text":"Uniquely identifies an assessment activity to be performed as part of the event. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.","title":"task_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Source.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.StatementId","text":"","title":"StatementId"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.StatementId-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.StatementId.__root__","text":"Used to constrain the selection to only specificity identified statements.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference","text":"","title":"SubjectReference"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference.subject_uuid","text":"A pointer to a component, inventory-item, location, party, user, or resource using it's UUID.","title":"subject_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference.title","text":"The title or name for the referenced subject.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference.type","text":"Used to indicate the type of object pointed to by the uuid-ref within a subject.","title":"type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SubjectReference.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemId","text":"","title":"SystemId"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemId-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemId.id","text":"","title":"id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemId.identifier_type","text":"Identifies the identification system from which the provided identifier was assigned.","title":"identifier_type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemId.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser","text":"","title":"SystemUser"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.authorized_privileges","text":"","title":"authorized_privileges"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.description","text":"A summary of the user's purpose within the system.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.role_ids","text":"","title":"role_ids"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.short_name","text":"A short common name, abbreviation, or acronym for the user.","title":"short_name"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.title","text":"A name given to the user, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.uuid","text":"The unique identifier for the user class.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.SystemUser.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task","text":"","title":"Task"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.associated_activities","text":"","title":"associated_activities"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.dependencies","text":"","title":"dependencies"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.description","text":"A human-readable description of this task.","title":"description"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.tasks","text":"","title":"tasks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.timing","text":"The timing under which the task is intended to occur.","title":"timing"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.title","text":"The title for this task.","title":"title"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.type","text":"The type of task.","title":"type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.uuid","text":"Uniquely identifies this assessment task.","title":"uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Task.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.TelephoneNumber","text":"","title":"TelephoneNumber"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.TelephoneNumber-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.TelephoneNumber.number","text":"","title":"number"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.TelephoneNumber.type","text":"Indicates the type of phone number.","title":"type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.TelephoneNumber.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Test","text":"","title":"Test"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Test-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Test.expression","text":"A formal (executable) expression of a constraint","title":"expression"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Test.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Test.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ThreatId","text":"","title":"ThreatId"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ThreatId-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ThreatId.href","text":"An optional location for the threat data, from which this ID originates.","title":"href"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ThreatId.id","text":"","title":"id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ThreatId.system","text":"Specifies the source of the threat information.","title":"system"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.ThreatId.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Timing","text":"","title":"Timing"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Timing-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Timing.at_frequency","text":"The task is intended to occur at the specified frequency.","title":"at_frequency"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Timing.on_date","text":"The task is intended to occur on the specified date.","title":"on_date"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Timing.within_date_range","text":"The task is intended to occur within the specified date range.","title":"within_date_range"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Timing.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Transport","text":"An enumeration.","title":"Transport"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Transport.TCP","text":"","title":"TCP"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Transport.UDP","text":"","title":"UDP"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type","text":"An enumeration.","title":"Type"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type.organization","text":"","title":"organization"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type.person","text":"","title":"person"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type1","text":"An enumeration.","title":"Type1"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type1.objective_id","text":"","title":"objective_id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type1.statement_id","text":"","title":"statement_id"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type2","text":"","title":"Type2"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type2-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type2.__root__","text":"Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type3","text":"An enumeration.","title":"Type3"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type3.assessment_platform","text":"","title":"assessment_platform"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type3.party","text":"","title":"party"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Type3.tool","text":"","title":"tool"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Unit","text":"An enumeration.","title":"Unit"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Unit.days","text":"","title":"days"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Unit.hours","text":"","title":"hours"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Unit.minutes","text":"","title":"minutes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Unit.months","text":"","title":"months"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Unit.seconds","text":"","title":"seconds"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Unit.years","text":"","title":"years"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.UsesComponent","text":"","title":"UsesComponent"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.UsesComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.UsesComponent.component_uuid","text":"A reference to a component that is implemented as part of an inventory item.","title":"component_uuid"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.UsesComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.UsesComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.UsesComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.UsesComponent.responsible_parties","text":"","title":"responsible_parties"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.UsesComponent.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Value","text":"","title":"Value"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Value-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Value.__root__","text":"A parameter value or set of values.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Version","text":"","title":"Version"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Version-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.Version.__root__","text":"A string used to distinguish the current version of the document from other previous (and future) versions.","title":"__root__"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.WithinDateRange","text":"","title":"WithinDateRange"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.WithinDateRange-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.WithinDateRange.end","text":"The task must occur on or before the specified date.","title":"end"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.WithinDateRange.start","text":"The task must occur on or after the specified date.","title":"start"},{"location":"api_reference/trestle.oscal.common/#trestle.oscal.common.WithinDateRange.Config","text":"handler: python","title":"Config"},{"location":"api_reference/trestle.oscal.component/","text":"trestle.oscal.component \u00a4 Classes \u00a4 Capability ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_implementations : List [ trestle . oscal . component . ControlImplementation ] pydantic-field \u00a4 description : str pydantic-field required \u00a4 A summary of the capability. incorporates_components : List [ trestle . oscal . component . IncorporatesComponent ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 name : ConstrainedStrValue pydantic-field required \u00a4 The capability's human-readable name. props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A unique identifier for a capability. Config \u00a4 ComponentDefinition ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 back_matter : BackMatter pydantic-field \u00a4 capabilities : List [ trestle . oscal . component . Capability ] pydantic-field \u00a4 components : List [ trestle . oscal . component . DefinedComponent ] pydantic-field \u00a4 import_component_definitions : List [ trestle . oscal . component . ImportComponentDefinition ] pydantic-field \u00a4 metadata : Metadata pydantic-field required \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier for this component definition instance. This UUID should be changed when this document is revised. Config \u00a4 ControlImplementation ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A description of how the specified set of controls are implemented for the containing component or capability. implemented_requirements : List [ trestle . oscal . component . ImplementedRequirement ] pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 set_parameters : List [ trestle . oscal . component . SetParameter ] pydantic-field \u00a4 source : str pydantic-field required \u00a4 A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition. uuid : ConstrainedStrValue pydantic-field required \u00a4 A unique identifier for the set of implemented controls. Config \u00a4 DefinedComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_implementations : List [ trestle . oscal . component . ControlImplementation ] pydantic-field \u00a4 description : str pydantic-field required \u00a4 A description of the component, including information about its function. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 protocols : List [ trestle . oscal . common . Protocol ] pydantic-field \u00a4 purpose : str pydantic-field \u00a4 A summary of the technological or business purpose of the component. remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 A human readable name for the component. type : ConstrainedStrValue pydantic-field required \u00a4 A category describing the purpose of the component. uuid : ConstrainedStrValue pydantic-field required \u00a4 The unique identifier for the component. Config \u00a4 ImplementedRequirement ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a control with a corresponding id value. description : str pydantic-field required \u00a4 A description of how the specified control is implemented for the containing component or capability. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 set_parameters : List [ trestle . oscal . component . SetParameter ] pydantic-field \u00a4 statements : List [ trestle . oscal . component . Statement ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A unique identifier for a specific control implementation. Config \u00a4 ImportComponentDefinition ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 href : str pydantic-field required \u00a4 A link to a resource that defines a set of components and/or capabilities to import into this collection. Config \u00a4 IncorporatesComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 component_uuid : ConstrainedStrValue pydantic-field required \u00a4 A reference to a component by its identifier description : str pydantic-field required \u00a4 A description of the component, including information about its function. Config \u00a4 Model ( OscalBaseModel ) pydantic-model \u00a4 component_definition : ComponentDefinition pydantic-field required \u00a4 SetParameter ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 param_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a parameter within a control, who's catalog has been imported into the current implementation context. remarks : Remarks pydantic-field \u00a4 values : List [ trestle . oscal . common . Value ] pydantic-field required \u00a4 Config \u00a4 State ( Enum ) \u00a4 An enumeration. disposition \u00a4 operational \u00a4 other \u00a4 under_development \u00a4 Statement ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A summary of how the containing control statement is implemented by the component or capability. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 statement_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a control statement by its identifier uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this control statement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 Status ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 remarks : Remarks pydantic-field \u00a4 state : State pydantic-field required \u00a4 The operational status. Config \u00a4 SystemComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A description of the component, including information about its function. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 protocols : List [ trestle . oscal . common . Protocol ] pydantic-field \u00a4 purpose : str pydantic-field \u00a4 A summary of the technological or business purpose of the component. remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 status : Status pydantic-field required \u00a4 Describes the operational status of the system component. title : str pydantic-field required \u00a4 A human readable name for the system component. type : ConstrainedStrValue pydantic-field required \u00a4 A category describing the purpose of the component. uuid : ConstrainedStrValue pydantic-field required \u00a4 The unique identifier for the component. Config \u00a4 handler: python","title":"component"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component","text":"","title":"component"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability","text":"","title":"Capability"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.control_implementations","text":"","title":"control_implementations"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.description","text":"A summary of the capability.","title":"description"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.incorporates_components","text":"","title":"incorporates_components"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.name","text":"The capability's human-readable name.","title":"name"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.uuid","text":"A unique identifier for a capability.","title":"uuid"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Capability.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition","text":"","title":"ComponentDefinition"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition.back_matter","text":"","title":"back_matter"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition.capabilities","text":"","title":"capabilities"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition.components","text":"","title":"components"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition.import_component_definitions","text":"","title":"import_component_definitions"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition.metadata","text":"","title":"metadata"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition.uuid","text":"A globally unique identifier for this component definition instance. This UUID should be changed when this document is revised.","title":"uuid"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ComponentDefinition.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation","text":"","title":"ControlImplementation"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation.description","text":"A description of how the specified set of controls are implemented for the containing component or capability.","title":"description"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation.implemented_requirements","text":"","title":"implemented_requirements"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation.set_parameters","text":"","title":"set_parameters"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation.source","text":"A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.","title":"source"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation.uuid","text":"A unique identifier for the set of implemented controls.","title":"uuid"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ControlImplementation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent","text":"","title":"DefinedComponent"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.control_implementations","text":"","title":"control_implementations"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.description","text":"A description of the component, including information about its function.","title":"description"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.protocols","text":"","title":"protocols"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.purpose","text":"A summary of the technological or business purpose of the component.","title":"purpose"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.title","text":"A human readable name for the component.","title":"title"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.type","text":"A category describing the purpose of the component.","title":"type"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.uuid","text":"The unique identifier for the component.","title":"uuid"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.DefinedComponent.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement","text":"","title":"ImplementedRequirement"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.control_id","text":"A reference to a control with a corresponding id value.","title":"control_id"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.description","text":"A description of how the specified control is implemented for the containing component or capability.","title":"description"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.set_parameters","text":"","title":"set_parameters"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.statements","text":"","title":"statements"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.uuid","text":"A unique identifier for a specific control implementation.","title":"uuid"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImplementedRequirement.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImportComponentDefinition","text":"","title":"ImportComponentDefinition"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImportComponentDefinition-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImportComponentDefinition.href","text":"A link to a resource that defines a set of components and/or capabilities to import into this collection.","title":"href"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.ImportComponentDefinition.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.IncorporatesComponent","text":"","title":"IncorporatesComponent"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.IncorporatesComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.IncorporatesComponent.component_uuid","text":"A reference to a component by its identifier","title":"component_uuid"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.IncorporatesComponent.description","text":"A description of the component, including information about its function.","title":"description"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.IncorporatesComponent.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Model","text":"","title":"Model"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Model.component_definition","text":"","title":"component_definition"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SetParameter","text":"","title":"SetParameter"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SetParameter-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SetParameter.param_id","text":"A reference to a parameter within a control, who's catalog has been imported into the current implementation context.","title":"param_id"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SetParameter.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SetParameter.values","text":"","title":"values"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SetParameter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.State","text":"An enumeration.","title":"State"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.State.disposition","text":"","title":"disposition"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.State.operational","text":"","title":"operational"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.State.other","text":"","title":"other"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.State.under_development","text":"","title":"under_development"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement","text":"","title":"Statement"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement.description","text":"A summary of how the containing control statement is implemented by the component or capability.","title":"description"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement.statement_id","text":"A reference to a control statement by its identifier","title":"statement_id"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement.uuid","text":"A globally unique identifier that can be used to reference this control statement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Statement.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Status","text":"","title":"Status"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Status-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Status.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Status.state","text":"The operational status.","title":"state"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.Status.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent","text":"","title":"SystemComponent"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.description","text":"A description of the component, including information about its function.","title":"description"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.protocols","text":"","title":"protocols"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.purpose","text":"A summary of the technological or business purpose of the component.","title":"purpose"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.status","text":"Describes the operational status of the system component.","title":"status"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.title","text":"A human readable name for the system component.","title":"title"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.type","text":"A category describing the purpose of the component.","title":"type"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.uuid","text":"The unique identifier for the component.","title":"uuid"},{"location":"api_reference/trestle.oscal.component/#trestle.oscal.component.SystemComponent.Config","text":"handler: python","title":"Config"},{"location":"api_reference/trestle.oscal.poam/","text":"trestle.oscal.poam \u00a4 Classes \u00a4 Activity ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this included activity. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_controls : ReviewedControls pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 steps : List [ trestle . oscal . poam . Step ] pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this included activity. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given included activity across revisions of the document. Config \u00a4 AssessmentAssets ( OscalBaseModel ) pydantic-model \u00a4 assessment_platforms : List [ trestle . oscal . common . AssessmentPlatform ] pydantic-field required \u00a4 components : List [ trestle . oscal . poam . SystemComponent ] pydantic-field \u00a4 Config \u00a4 Characterization ( OscalBaseModel ) pydantic-model \u00a4 facets : List [ trestle . oscal . common . Facet ] pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 origin : Origin1 pydantic-field required \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 Config \u00a4 ControlSelection ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of in-scope controls specified for assessment. exclude_controls : List [ trestle . oscal . poam . SelectControlById ] pydantic-field \u00a4 include_all : Dict [ str , Any ] pydantic-field \u00a4 A key word to indicate all. include_controls : List [ trestle . oscal . poam . SelectControlById ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Entry ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of what was done regarding the risk. end : datetime pydantic-field \u00a4 Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 logged_by : List [ trestle . oscal . common . LoggedBy ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_responses : List [ trestle . oscal . common . RelatedResponse ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 start : datetime pydantic-field required \u00a4 Identifies the start date and time of the event. status_change : RiskStatus pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this risk log entry. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies a risk log entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document. Config \u00a4 FindingTarget ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied. implementation_status : ImplementationStatus pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 status : Status1 pydantic-field required \u00a4 A determination of if the objective is satisfied or not within a given system. target_id : ConstrainedStrValue pydantic-field required \u00a4 Identifies the specific target qualified by the type. title : str pydantic-field \u00a4 The title for this objective status. type : Type1 pydantic-field required \u00a4 Identifies the type of the target. Config \u00a4 LocalDefinitions ( OscalBaseModel ) pydantic-model \u00a4 components : List [ trestle . oscal . poam . SystemComponent ] pydantic-field \u00a4 inventory_items : List [ trestle . oscal . common . InventoryItem ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Method ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 Identifies how the observation was made. Model ( OscalBaseModel ) pydantic-model \u00a4 plan_of_action_and_milestones : PlanOfActionAndMilestones pydantic-field required \u00a4 Observation ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 collected : datetime pydantic-field required \u00a4 Date/time stamp identifying when the finding information was collected. description : str pydantic-field required \u00a4 A human-readable description of this assessment observation. expires : datetime pydantic-field \u00a4 Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 methods : List [ trestle . oscal . poam . Method ] pydantic-field required \u00a4 origins : List [ trestle . oscal . poam . Origin1 ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 relevant_evidence : List [ trestle . oscal . common . RelevantEvidence ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 subjects : List [ trestle . oscal . common . SubjectReference ] pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this observation. types : List [ trestle . oscal . common . Type2 ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given observation across revisions. Config \u00a4 Origin ( OscalBaseModel ) pydantic-model \u00a4 actors : List [ trestle . oscal . common . OriginActor ] pydantic-field required \u00a4 Config \u00a4 Origin1 ( OscalBaseModel ) pydantic-model \u00a4 actors : List [ trestle . oscal . common . OriginActor ] pydantic-field required \u00a4 related_tasks : List [ trestle . oscal . common . RelatedTask ] pydantic-field \u00a4 Config \u00a4 PlanOfActionAndMilestones ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 back_matter : BackMatter pydantic-field \u00a4 import_ssp : ImportSsp pydantic-field \u00a4 local_definitions : LocalDefinitions pydantic-field \u00a4 metadata : Metadata pydantic-field required \u00a4 observations : List [ trestle . oscal . poam . Observation ] pydantic-field \u00a4 poam_items : List [ trestle . oscal . poam . PoamItem ] pydantic-field required \u00a4 risks : List [ trestle . oscal . poam . Risk ] pydantic-field \u00a4 system_id : SystemId pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this POA&M. This UUID must be changed each time the content of the POA&M changes. Config \u00a4 PoamItem ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of POA&M item. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 origins : List [ trestle . oscal . poam . Origin ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_observations : List [ trestle . oscal . common . RelatedObservation ] pydantic-field \u00a4 related_risks : List [ trestle . oscal . common . RelatedRisk ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 title : str pydantic-field required \u00a4 The title or name for this POA&M item . uuid : ConstrainedStrValue pydantic-field \u00a4 Uniquely identifies the POA&M entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given POA&M item across revisions of the document. Config \u00a4 Response ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this response plan. lifecycle : ConstrainedStrValue pydantic-field required \u00a4 Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 origins : List [ trestle . oscal . poam . Origin1 ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 required_assets : List [ trestle . oscal . common . RequiredAsset ] pydantic-field \u00a4 tasks : List [ trestle . oscal . common . Task ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 The title for this response activity. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given remediation across revisions. Config \u00a4 ReviewedControls ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_objective_selections : List [ trestle . oscal . common . ControlObjectiveSelection ] pydantic-field \u00a4 control_selections : List [ trestle . oscal . poam . ControlSelection ] pydantic-field required \u00a4 description : str pydantic-field \u00a4 A human-readable description of control objectives. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Risk ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 characterizations : List [ trestle . oscal . poam . Characterization ] pydantic-field \u00a4 deadline : datetime pydantic-field \u00a4 The date/time by which the risk must be resolved. description : str pydantic-field required \u00a4 A human-readable summary of the identified risk, to include a statement of how the risk impacts the system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 mitigating_factors : List [ trestle . oscal . common . MitigatingFactor ] pydantic-field \u00a4 origins : List [ trestle . oscal . poam . Origin1 ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 related_observations : List [ trestle . oscal . common . RelatedObservation1 ] pydantic-field \u00a4 remediations : List [ trestle . oscal . poam . Response ] pydantic-field \u00a4 risk_log : RiskLog pydantic-field \u00a4 A log of all risk-related tasks taken. statement : str pydantic-field required \u00a4 An summary of impact for how the risk affects the system. status : ConstrainedStrValue pydantic-field required \u00a4 Describes the status of the associated risk. threat_ids : List [ trestle . oscal . common . ThreatId ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 The title for this risk. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given risk across revisions. Config \u00a4 RiskLog ( OscalBaseModel ) pydantic-model \u00a4 entries : List [ trestle . oscal . poam . Entry ] pydantic-field required \u00a4 Config \u00a4 SelectControlById ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 control_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a control with a corresponding id value. statement_ids : List [ trestle . oscal . common . StatementId ] pydantic-field \u00a4 Config \u00a4 SetParameter ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 param_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a parameter within a control, who's catalog has been imported into the current implementation context. remarks : Remarks pydantic-field \u00a4 values : List [ trestle . oscal . common . Value ] pydantic-field required \u00a4 Config \u00a4 State ( Enum ) \u00a4 An enumeration. disposition \u00a4 operational \u00a4 other \u00a4 under_development \u00a4 State1 ( Enum ) \u00a4 An enumeration. not_satisfied \u00a4 satisfied \u00a4 Status ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 remarks : Remarks pydantic-field \u00a4 state : State pydantic-field required \u00a4 The operational status. Config \u00a4 Status1 ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 reason : ConstrainedStrValue pydantic-field \u00a4 The reason the objective was given it's status. remarks : Remarks pydantic-field \u00a4 state : State1 pydantic-field required \u00a4 An indication as to whether the objective is satisfied or not. Config \u00a4 Step ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A human-readable description of this step. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 reviewed_controls : ReviewedControls pydantic-field \u00a4 title : str pydantic-field \u00a4 The title for this step. uuid : ConstrainedStrValue pydantic-field required \u00a4 Uniquely identifies a step. This UUID may be referenced elsewhere in an OSCAL document when referring to this step. A UUID should be consistently used for a given test step across revisions of the document. Config \u00a4 SystemComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A description of the component, including information about its function. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 protocols : List [ trestle . oscal . common . Protocol ] pydantic-field \u00a4 purpose : str pydantic-field \u00a4 A summary of the technological or business purpose of the component. remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 status : Status pydantic-field required \u00a4 Describes the operational status of the system component. title : str pydantic-field required \u00a4 A human readable name for the system component. type : ConstrainedStrValue pydantic-field required \u00a4 A category describing the purpose of the component. uuid : ConstrainedStrValue pydantic-field required \u00a4 The unique identifier for the component. Config \u00a4 handler: python","title":"poam"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam","text":"","title":"poam"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity","text":"","title":"Activity"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.description","text":"A human-readable description of this included activity.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.related_controls","text":"","title":"related_controls"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.steps","text":"","title":"steps"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.title","text":"The title for this included activity.","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.uuid","text":"Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given included activity across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Activity.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.AssessmentAssets","text":"","title":"AssessmentAssets"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.AssessmentAssets.assessment_platforms","text":"","title":"assessment_platforms"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.AssessmentAssets.components","text":"","title":"components"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.AssessmentAssets.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Characterization","text":"","title":"Characterization"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Characterization.facets","text":"","title":"facets"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Characterization.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Characterization.origin","text":"","title":"origin"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Characterization.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Characterization.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection","text":"","title":"ControlSelection"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection.description","text":"A human-readable description of in-scope controls specified for assessment.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection.exclude_controls","text":"","title":"exclude_controls"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection.include_all","text":"A key word to indicate all.","title":"include_all"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection.include_controls","text":"","title":"include_controls"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ControlSelection.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry","text":"","title":"Entry"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.description","text":"A human-readable description of what was done regarding the risk.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.end","text":"Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time.","title":"end"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.logged_by","text":"","title":"logged_by"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.related_responses","text":"","title":"related_responses"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.start","text":"Identifies the start date and time of the event.","title":"start"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.status_change","text":"","title":"status_change"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.title","text":"The title for this risk log entry.","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.uuid","text":"Uniquely identifies a risk log entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Entry.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget","text":"","title":"FindingTarget"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.description","text":"A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.implementation_status","text":"","title":"implementation_status"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.status","text":"A determination of if the objective is satisfied or not within a given system.","title":"status"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.target_id","text":"Identifies the specific target qualified by the type.","title":"target_id"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.title","text":"The title for this objective status.","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.type","text":"Identifies the type of the target.","title":"type"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.FindingTarget.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.LocalDefinitions","text":"","title":"LocalDefinitions"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.LocalDefinitions.components","text":"","title":"components"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.LocalDefinitions.inventory_items","text":"","title":"inventory_items"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.LocalDefinitions.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.LocalDefinitions.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Method","text":"","title":"Method"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Method-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Method.__root__","text":"Identifies how the observation was made.","title":"__root__"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Model","text":"","title":"Model"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Model.plan_of_action_and_milestones","text":"","title":"plan_of_action_and_milestones"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation","text":"","title":"Observation"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.collected","text":"Date/time stamp identifying when the finding information was collected.","title":"collected"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.description","text":"A human-readable description of this assessment observation.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.expires","text":"Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios.","title":"expires"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.methods","text":"","title":"methods"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.relevant_evidence","text":"","title":"relevant_evidence"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.subjects","text":"","title":"subjects"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.title","text":"The title for this observation.","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.types","text":"","title":"types"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.uuid","text":"Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given observation across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Observation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Origin","text":"","title":"Origin"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Origin.actors","text":"","title":"actors"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Origin.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Origin1","text":"","title":"Origin1"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Origin1.actors","text":"","title":"actors"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Origin1.related_tasks","text":"","title":"related_tasks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Origin1.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones","text":"","title":"PlanOfActionAndMilestones"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.back_matter","text":"","title":"back_matter"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.import_ssp","text":"","title":"import_ssp"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.local_definitions","text":"","title":"local_definitions"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.metadata","text":"","title":"metadata"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.observations","text":"","title":"observations"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.poam_items","text":"","title":"poam_items"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.risks","text":"","title":"risks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.system_id","text":"","title":"system_id"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.uuid","text":"Uniquely identifies this POA&M. This UUID must be changed each time the content of the POA&M changes.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PlanOfActionAndMilestones.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem","text":"","title":"PoamItem"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.description","text":"A human-readable description of POA&M item.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.related_observations","text":"","title":"related_observations"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.related_risks","text":"","title":"related_risks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.title","text":"The title or name for this POA&M item .","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.uuid","text":"Uniquely identifies the POA&M entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given POA&M item across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.PoamItem.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response","text":"","title":"Response"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.description","text":"A human-readable description of this response plan.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.lifecycle","text":"Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.","title":"lifecycle"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.required_assets","text":"","title":"required_assets"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.tasks","text":"","title":"tasks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.title","text":"The title for this response activity.","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.uuid","text":"Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given remediation across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Response.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls","text":"","title":"ReviewedControls"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls.control_objective_selections","text":"","title":"control_objective_selections"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls.control_selections","text":"","title":"control_selections"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls.description","text":"A human-readable description of control objectives.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.ReviewedControls.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk","text":"","title":"Risk"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.characterizations","text":"","title":"characterizations"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.deadline","text":"The date/time by which the risk must be resolved.","title":"deadline"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.description","text":"A human-readable summary of the identified risk, to include a statement of how the risk impacts the system.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.mitigating_factors","text":"","title":"mitigating_factors"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.origins","text":"","title":"origins"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.related_observations","text":"","title":"related_observations"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.remediations","text":"","title":"remediations"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.risk_log","text":"A log of all risk-related tasks taken.","title":"risk_log"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.statement","text":"An summary of impact for how the risk affects the system.","title":"statement"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.status","text":"Describes the status of the associated risk.","title":"status"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.threat_ids","text":"","title":"threat_ids"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.title","text":"The title for this risk.","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.uuid","text":"Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given risk across revisions.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Risk.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.RiskLog","text":"","title":"RiskLog"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.RiskLog.entries","text":"","title":"entries"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.RiskLog.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SelectControlById","text":"","title":"SelectControlById"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SelectControlById-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SelectControlById.control_id","text":"A reference to a control with a corresponding id value.","title":"control_id"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SelectControlById.statement_ids","text":"","title":"statement_ids"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SelectControlById.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SetParameter","text":"","title":"SetParameter"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SetParameter-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SetParameter.param_id","text":"A reference to a parameter within a control, who's catalog has been imported into the current implementation context.","title":"param_id"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SetParameter.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SetParameter.values","text":"","title":"values"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SetParameter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.State","text":"An enumeration.","title":"State"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.State.disposition","text":"","title":"disposition"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.State.operational","text":"","title":"operational"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.State.other","text":"","title":"other"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.State.under_development","text":"","title":"under_development"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.State1","text":"An enumeration.","title":"State1"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.State1.not_satisfied","text":"","title":"not_satisfied"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.State1.satisfied","text":"","title":"satisfied"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status","text":"","title":"Status"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status.state","text":"The operational status.","title":"state"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status1","text":"","title":"Status1"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status1-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status1.reason","text":"The reason the objective was given it's status.","title":"reason"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status1.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status1.state","text":"An indication as to whether the objective is satisfied or not.","title":"state"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Status1.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step","text":"","title":"Step"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.description","text":"A human-readable description of this step.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.reviewed_controls","text":"","title":"reviewed_controls"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.title","text":"The title for this step.","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.uuid","text":"Uniquely identifies a step. This UUID may be referenced elsewhere in an OSCAL document when referring to this step. A UUID should be consistently used for a given test step across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.Step.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent","text":"","title":"SystemComponent"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.description","text":"A description of the component, including information about its function.","title":"description"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.protocols","text":"","title":"protocols"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.purpose","text":"A summary of the technological or business purpose of the component.","title":"purpose"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.status","text":"Describes the operational status of the system component.","title":"status"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.title","text":"A human readable name for the system component.","title":"title"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.type","text":"A category describing the purpose of the component.","title":"type"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.uuid","text":"The unique identifier for the component.","title":"uuid"},{"location":"api_reference/trestle.oscal.poam/#trestle.oscal.poam.SystemComponent.Config","text":"handler: python","title":"Config"},{"location":"api_reference/trestle.oscal.profile/","text":"trestle.oscal.profile \u00a4 Classes \u00a4 Add ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 by_id : ConstrainedStrValue pydantic-field \u00a4 Target location of the addition. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 params : List [ trestle . oscal . common . Parameter ] pydantic-field \u00a4 parts : List [ trestle . oscal . common . Part ] pydantic-field \u00a4 position : Position pydantic-field \u00a4 Where to add the new content with respect to the targeted element (beside it or inside it) props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 title : str pydantic-field \u00a4 A name given to the control, which may be used by a tool for display and navigation. Config \u00a4 Alter ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 adds : List [ trestle . oscal . profile . Add ] pydantic-field \u00a4 control_id : ConstrainedStrValue pydantic-field \u00a4 A reference to a control with a corresponding id value. removes : List [ trestle . oscal . profile . Remove ] pydantic-field \u00a4 Config \u00a4 AsIs ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : bool pydantic-field required special \u00a4 An As-is element indicates that the controls should be structured in resolution as they are structured in their source catalogs. It does not contain any elements or attributes. Combine ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 method : Method pydantic-field \u00a4 How clashing controls should be handled Config \u00a4 Custom ( OscalBaseModel ) pydantic-model \u00a4 groups : List [ trestle . oscal . profile . Group ] pydantic-field \u00a4 insert_controls : List [ trestle . oscal . profile . InsertControls ] pydantic-field \u00a4 Config \u00a4 Group ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 class_ : ConstrainedStrValue pydantic-field \u00a4 A textual label that provides a sub-type or characterization of the group. groups : List [ trestle . oscal . profile . Group ] pydantic-field \u00a4 id : ConstrainedStrValue pydantic-field \u00a4 A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document. insert_controls : List [ trestle . oscal . profile . InsertControls ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 params : List [ trestle . oscal . common . Parameter ] pydantic-field \u00a4 parts : List [ trestle . oscal . common . Part ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 A name given to the group, which may be used by a tool for display and navigation. Config \u00a4 Import ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 exclude_controls : List [ trestle . oscal . profile . SelectControlById ] pydantic-field \u00a4 href : str pydantic-field required \u00a4 A resolvable URL reference to the base catalog or profile that this profile is tailoring. include_all : IncludeAll pydantic-field \u00a4 include_controls : List [ trestle . oscal . profile . SelectControlById ] pydantic-field \u00a4 Config \u00a4 IncludeAll ( OscalBaseModel ) pydantic-model \u00a4 Config \u00a4 InsertControls ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 exclude_controls : List [ trestle . oscal . profile . SelectControlById ] pydantic-field \u00a4 include_all : IncludeAll pydantic-field \u00a4 include_controls : List [ trestle . oscal . profile . SelectControlById ] pydantic-field \u00a4 order : Order pydantic-field \u00a4 A designation of how a selection of controls in a profile is to be ordered. Config \u00a4 Matching ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 pattern : ConstrainedStrValue pydantic-field \u00a4 A glob expression matching the IDs of one or more controls to be selected. Config \u00a4 Merge ( OscalBaseModel ) pydantic-model \u00a4 as_is : AsIs pydantic-field \u00a4 combine : Combine pydantic-field \u00a4 custom : Custom pydantic-field \u00a4 Config \u00a4 Method ( Enum ) \u00a4 An enumeration. keep \u00a4 merge \u00a4 use_first \u00a4 Model ( OscalBaseModel ) pydantic-model \u00a4 profile : Profile pydantic-field required \u00a4 Modify ( OscalBaseModel ) pydantic-model \u00a4 alters : List [ trestle . oscal . profile . Alter ] pydantic-field \u00a4 set_parameters : List [ trestle . oscal . profile . SetParameter ] pydantic-field \u00a4 Config \u00a4 Order ( Enum ) \u00a4 An enumeration. ascending \u00a4 descending \u00a4 keep \u00a4 Position ( Enum ) \u00a4 An enumeration. after \u00a4 before \u00a4 ending \u00a4 starting \u00a4 Profile ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 back_matter : BackMatter pydantic-field \u00a4 imports : List [ trestle . oscal . profile . Import ] pydantic-field required \u00a4 merge : Merge pydantic-field \u00a4 metadata : Metadata pydantic-field required \u00a4 modify : Modify pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier for this profile instance. This UUID should be changed when this document is revised. Config \u00a4 Remove ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 by_class : ConstrainedStrValue pydantic-field \u00a4 Identify items to remove by matching their class. by_id : ConstrainedStrValue pydantic-field \u00a4 Identify items to remove indicated by their id. by_item_name : ConstrainedStrValue pydantic-field \u00a4 Identify items to remove by the name of the item's information element name, e.g. title or prop by_name : ConstrainedStrValue pydantic-field \u00a4 Identify items to remove by matching their assigned name by_ns : ConstrainedStrValue pydantic-field \u00a4 Identify items to remove by the item's ns, which is the namespace associated with a part, or prop. Config \u00a4 SelectControlById ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 matching : List [ trestle . oscal . profile . Matching ] pydantic-field \u00a4 with_child_controls : WithChildControls pydantic-field \u00a4 When a control is included, whether its child (dependent) controls are also included. with_ids : List [ trestle . oscal . profile . WithId ] pydantic-field \u00a4 Config \u00a4 SetParameter ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 class_ : ConstrainedStrValue pydantic-field \u00a4 A textual label that provides a characterization of the parameter. constraints : List [ trestle . oscal . common . ParameterConstraint ] pydantic-field \u00a4 depends_on : ConstrainedStrValue pydantic-field \u00a4 Another parameter invoking this one guidelines : List [ trestle . oscal . common . ParameterGuideline ] pydantic-field \u00a4 label : str pydantic-field \u00a4 A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 param_id : ConstrainedStrValue pydantic-field required \u00a4 Indicates the value of the 'id' flag on a target parameter; i.e. which parameter to set props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 select : ParameterSelection pydantic-field \u00a4 usage : str pydantic-field \u00a4 Describes the purpose and use of a parameter values : List [ trestle . oscal . common . ParameterValue ] pydantic-field \u00a4 Config \u00a4 WithChildControls ( Enum ) \u00a4 An enumeration. no \u00a4 yes \u00a4 WithId ( OscalBaseModel ) pydantic-model \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 handler: python","title":"profile"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile","text":"","title":"profile"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add","text":"","title":"Add"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add.by_id","text":"Target location of the addition.","title":"by_id"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add.params","text":"","title":"params"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add.position","text":"Where to add the new content with respect to the targeted element (beside it or inside it)","title":"position"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add.title","text":"A name given to the control, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Add.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Alter","text":"","title":"Alter"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Alter-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Alter.adds","text":"","title":"adds"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Alter.control_id","text":"A reference to a control with a corresponding id value.","title":"control_id"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Alter.removes","text":"","title":"removes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Alter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.AsIs","text":"","title":"AsIs"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.AsIs-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.AsIs.__root__","text":"An As-is element indicates that the controls should be structured in resolution as they are structured in their source catalogs. It does not contain any elements or attributes.","title":"__root__"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Combine","text":"","title":"Combine"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Combine-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Combine.method","text":"How clashing controls should be handled","title":"method"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Combine.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Custom","text":"","title":"Custom"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Custom.groups","text":"","title":"groups"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Custom.insert_controls","text":"","title":"insert_controls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Custom.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group","text":"","title":"Group"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.class_","text":"A textual label that provides a sub-type or characterization of the group.","title":"class_"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.groups","text":"","title":"groups"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.id","text":"A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document.","title":"id"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.insert_controls","text":"","title":"insert_controls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.params","text":"","title":"params"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.parts","text":"","title":"parts"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.title","text":"A name given to the group, which may be used by a tool for display and navigation.","title":"title"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Group.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Import","text":"","title":"Import"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Import-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Import.exclude_controls","text":"","title":"exclude_controls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Import.href","text":"A resolvable URL reference to the base catalog or profile that this profile is tailoring.","title":"href"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Import.include_all","text":"","title":"include_all"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Import.include_controls","text":"","title":"include_controls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Import.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.IncludeAll","text":"","title":"IncludeAll"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.IncludeAll.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.InsertControls","text":"","title":"InsertControls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.InsertControls-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.InsertControls.exclude_controls","text":"","title":"exclude_controls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.InsertControls.include_all","text":"","title":"include_all"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.InsertControls.include_controls","text":"","title":"include_controls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.InsertControls.order","text":"A designation of how a selection of controls in a profile is to be ordered.","title":"order"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.InsertControls.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Matching","text":"","title":"Matching"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Matching-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Matching.pattern","text":"A glob expression matching the IDs of one or more controls to be selected.","title":"pattern"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Matching.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Merge","text":"","title":"Merge"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Merge.as_is","text":"","title":"as_is"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Merge.combine","text":"","title":"combine"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Merge.custom","text":"","title":"custom"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Merge.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Method","text":"An enumeration.","title":"Method"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Method.keep","text":"","title":"keep"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Method.merge","text":"","title":"merge"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Method.use_first","text":"","title":"use_first"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Model","text":"","title":"Model"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Model.profile","text":"","title":"profile"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Modify","text":"","title":"Modify"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Modify.alters","text":"","title":"alters"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Modify.set_parameters","text":"","title":"set_parameters"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Modify.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Order","text":"An enumeration.","title":"Order"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Order.ascending","text":"","title":"ascending"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Order.descending","text":"","title":"descending"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Order.keep","text":"","title":"keep"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Position","text":"An enumeration.","title":"Position"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Position.after","text":"","title":"after"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Position.before","text":"","title":"before"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Position.ending","text":"","title":"ending"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Position.starting","text":"","title":"starting"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile","text":"","title":"Profile"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile.back_matter","text":"","title":"back_matter"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile.imports","text":"","title":"imports"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile.merge","text":"","title":"merge"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile.metadata","text":"","title":"metadata"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile.modify","text":"","title":"modify"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile.uuid","text":"A globally unique identifier for this profile instance. This UUID should be changed when this document is revised.","title":"uuid"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Profile.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Remove","text":"","title":"Remove"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Remove-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Remove.by_class","text":"Identify items to remove by matching their class.","title":"by_class"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Remove.by_id","text":"Identify items to remove indicated by their id.","title":"by_id"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Remove.by_item_name","text":"Identify items to remove by the name of the item's information element name, e.g. title or prop","title":"by_item_name"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Remove.by_name","text":"Identify items to remove by matching their assigned name","title":"by_name"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Remove.by_ns","text":"Identify items to remove by the item's ns, which is the namespace associated with a part, or prop.","title":"by_ns"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.Remove.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SelectControlById","text":"","title":"SelectControlById"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SelectControlById-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SelectControlById.matching","text":"","title":"matching"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SelectControlById.with_child_controls","text":"When a control is included, whether its child (dependent) controls are also included.","title":"with_child_controls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SelectControlById.with_ids","text":"","title":"with_ids"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SelectControlById.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter","text":"","title":"SetParameter"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.class_","text":"A textual label that provides a characterization of the parameter.","title":"class_"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.constraints","text":"","title":"constraints"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.depends_on","text":"Another parameter invoking this one","title":"depends_on"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.guidelines","text":"","title":"guidelines"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.label","text":"A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.","title":"label"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.param_id","text":"Indicates the value of the 'id' flag on a target parameter; i.e. which parameter to set","title":"param_id"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.select","text":"","title":"select"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.usage","text":"Describes the purpose and use of a parameter","title":"usage"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.values","text":"","title":"values"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.SetParameter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.WithChildControls","text":"An enumeration.","title":"WithChildControls"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.WithChildControls.no","text":"","title":"no"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.WithChildControls.yes","text":"","title":"yes"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.WithId","text":"","title":"WithId"},{"location":"api_reference/trestle.oscal.profile/#trestle.oscal.profile.WithId.__root__","text":"handler: python","title":"__root__"},{"location":"api_reference/trestle.oscal.ssp/","text":"trestle.oscal.ssp \u00a4 Classes \u00a4 AdjustmentJustification ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : str pydantic-field required special \u00a4 If the selected security level is different from the base security level, this contains the justification for the change. AuthorizationBoundary ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A summary of the system's authorization boundary. diagrams : List [ trestle . oscal . ssp . Diagram ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : str pydantic-field \u00a4 Commentary about the system's authorization boundary that enhances the diagram. Config \u00a4 AvailabilityImpact ( OscalBaseModel ) pydantic-model \u00a4 adjustment_justification : AdjustmentJustification pydantic-field \u00a4 base : Base pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 selected : Selected pydantic-field \u00a4 Config \u00a4 Base ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 The prescribed base (Confidentiality, Integrity, or Availability) security impact level. ByComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 component_uuid : ConstrainedStrValue pydantic-field required \u00a4 A reference to the component that is implementing a given control or control statement. description : str pydantic-field required \u00a4 An implementation statement that describes how a control or a control statement is implemented within the referenced system component. export : Export pydantic-field \u00a4 Identifies content intended for external consumption, such as with leveraged organizations. implementation_status : ImplementationStatus pydantic-field \u00a4 inherited : List [ trestle . oscal . ssp . Inherited ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 satisfied : List [ trestle . oscal . ssp . Satisfied ] pydantic-field \u00a4 set_parameters : List [ trestle . oscal . ssp . SetParameter ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this by-component entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 Categorization ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 information_type_ids : List [ trestle . oscal . ssp . InformationTypeId ] pydantic-field \u00a4 system : AnyUrl pydantic-field required \u00a4 Specifies the information type identification system used. Config \u00a4 ConfidentialityImpact ( OscalBaseModel ) pydantic-model \u00a4 adjustment_justification : AdjustmentJustification pydantic-field \u00a4 base : Base pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 selected : Selected pydantic-field \u00a4 Config \u00a4 ControlImplementation ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A statement describing important things to know about how this set of control satisfaction documentation is approached. implemented_requirements : List [ trestle . oscal . ssp . ImplementedRequirement ] pydantic-field required \u00a4 set_parameters : List [ trestle . oscal . ssp . SetParameter ] pydantic-field \u00a4 Config \u00a4 DataFlow ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A summary of the system's data flow. diagrams : List [ trestle . oscal . ssp . Diagram ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 DateAuthorized ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 The date the system received its authorization. Diagram ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 caption : str pydantic-field \u00a4 A brief caption to annotate the diagram. description : str pydantic-field \u00a4 A summary of the diagram. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : str pydantic-field \u00a4 Commentary about the diagram that enhances it. uuid : ConstrainedStrValue pydantic-field required \u00a4 The identifier for this diagram. Config \u00a4 Export ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field \u00a4 An implementation statement that describes the aspects of the control or control statement implementation that can be available to another system leveraging this system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 provided : List [ trestle . oscal . ssp . Provided ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsibilities : List [ trestle . oscal . ssp . Responsibility ] pydantic-field \u00a4 Config \u00a4 ImplementedRequirement ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 by_components : List [ trestle . oscal . ssp . ByComponent ] pydantic-field \u00a4 control_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a control with a corresponding id value. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 set_parameters : List [ trestle . oscal . ssp . SetParameter ] pydantic-field \u00a4 statements : List [ trestle . oscal . ssp . Statement ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this control requirement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 ImportProfile ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 href : str pydantic-field required \u00a4 A resolvable URL reference to the profile to use as the system's control baseline. remarks : Remarks pydantic-field \u00a4 Config \u00a4 InformationType ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 availability_impact : AvailabilityImpact pydantic-field required \u00a4 The expected level of impact resulting from the disruption of access to or use of the described information or the information system. categorizations : List [ trestle . oscal . ssp . Categorization ] pydantic-field \u00a4 confidentiality_impact : ConfidentialityImpact pydantic-field required \u00a4 The expected level of impact resulting from the unauthorized disclosure of the described information. description : str pydantic-field required \u00a4 A summary of how this information type is used within the system. integrity_impact : IntegrityImpact pydantic-field required \u00a4 The expected level of impact resulting from the unauthorized modification of the described information. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 title : str pydantic-field required \u00a4 A human readable name for the information type. This title should be meaningful within the context of the system. uuid : ConstrainedStrValue pydantic-field \u00a4 A globally unique identifier that can be used to reference this information type entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 InformationTypeId ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 An identifier qualified by the given identification system used, such as NIST SP 800-60. Inherited ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is inheriting from a leveraged system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 provided_uuid : ConstrainedStrValue pydantic-field \u00a4 Identifies a 'provided' assembly associated with this assembly. responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this inherited entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 IntegrityImpact ( OscalBaseModel ) pydantic-model \u00a4 adjustment_justification : AdjustmentJustification pydantic-field \u00a4 base : Base pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 selected : Selected pydantic-field \u00a4 Config \u00a4 LeveragedAuthorization ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 date_authorized : DateAuthorized pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 party_uuid : ConstrainedStrValue pydantic-field required \u00a4 A reference to the party that manages the leveraged system. props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 title : str pydantic-field required \u00a4 A human readable name for the leveraged authorization in the context of the system. uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this leveraged authorization entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 Model ( OscalBaseModel ) pydantic-model \u00a4 system_security_plan : SystemSecurityPlan pydantic-field required \u00a4 NetworkArchitecture ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A summary of the system's network architecture. diagrams : List [ trestle . oscal . ssp . Diagram ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 Config \u00a4 Provided ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 An implementation statement that describes the aspects of the control or control statement implementation that can be provided to another system leveraging this system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this provided entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 Responsibility ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 An implementation statement that describes the aspects of the control or control statement implementation that a leveraging system must implement to satisfy the control provided by a leveraged system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 provided_uuid : ConstrainedStrValue pydantic-field \u00a4 Identifies a 'provided' assembly associated with this assembly. remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this responsibility entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 Satisfied ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is implementing based on a requirement from a leveraged system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsibility_uuid : ConstrainedStrValue pydantic-field \u00a4 Identifies a 'provided' assembly associated with this assembly. responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this satisfied entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 SecurityImpactLevel ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 security_objective_availability : ConstrainedStrValue pydantic-field required \u00a4 A target-level of availability for the system, based on the sensitivity of information within the system. security_objective_confidentiality : ConstrainedStrValue pydantic-field required \u00a4 A target-level of confidentiality for the system, based on the sensitivity of information within the system. security_objective_integrity : ConstrainedStrValue pydantic-field required \u00a4 A target-level of integrity for the system, based on the sensitivity of information within the system. Config \u00a4 Selected ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 __root__ : ConstrainedStrValue pydantic-field required special \u00a4 The selected (Confidentiality, Integrity, or Availability) security impact level. SetParameter ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 param_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a parameter within a control, who's catalog has been imported into the current implementation context. remarks : Remarks pydantic-field \u00a4 values : List [ trestle . oscal . common . Value ] pydantic-field required \u00a4 Config \u00a4 State ( Enum ) \u00a4 An enumeration. disposition \u00a4 operational \u00a4 other \u00a4 under_development \u00a4 under_major_modification \u00a4 State1 ( Enum ) \u00a4 An enumeration. disposition \u00a4 operational \u00a4 other \u00a4 under_development \u00a4 Statement ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 by_components : List [ trestle . oscal . ssp . ByComponent ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 statement_id : ConstrainedStrValue pydantic-field required \u00a4 A reference to a control statement by its identifier uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier that can be used to reference this control statement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document. Config \u00a4 Status ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 remarks : Remarks pydantic-field \u00a4 state : State1 pydantic-field required \u00a4 The operational status. Config \u00a4 Status1 ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 remarks : Remarks pydantic-field \u00a4 state : State pydantic-field required \u00a4 The current operating status. Config \u00a4 SystemCharacteristics ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 authorization_boundary : AuthorizationBoundary pydantic-field required \u00a4 data_flow : DataFlow pydantic-field \u00a4 date_authorized : DateAuthorized pydantic-field \u00a4 description : str pydantic-field required \u00a4 A summary of the system. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 network_architecture : NetworkArchitecture pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 responsible_parties : List [ trestle . oscal . common . ResponsibleParty ] pydantic-field \u00a4 security_impact_level : SecurityImpactLevel pydantic-field required \u00a4 security_sensitivity_level : ConstrainedStrValue pydantic-field required \u00a4 The overall information system sensitivity categorization, such as defined by FIPS-199. status : Status1 pydantic-field required \u00a4 system_ids : List [ trestle . oscal . common . SystemId ] pydantic-field required \u00a4 system_information : SystemInformation pydantic-field required \u00a4 system_name : ConstrainedStrValue pydantic-field required \u00a4 The full name of the system. system_name_short : ConstrainedStrValue pydantic-field \u00a4 A short name for the system, such as an acronym, that is suitable for display in a data table or summary list. Config \u00a4 SystemComponent ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 description : str pydantic-field required \u00a4 A description of the component, including information about its function. links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 protocols : List [ trestle . oscal . common . Protocol ] pydantic-field \u00a4 purpose : str pydantic-field \u00a4 A summary of the technological or business purpose of the component. remarks : Remarks pydantic-field \u00a4 responsible_roles : List [ trestle . oscal . common . ResponsibleRole ] pydantic-field \u00a4 status : Status pydantic-field required \u00a4 Describes the operational status of the system component. title : str pydantic-field required \u00a4 A human readable name for the system component. type : ConstrainedStrValue pydantic-field required \u00a4 A category describing the purpose of the component. uuid : ConstrainedStrValue pydantic-field required \u00a4 The unique identifier for the component. Config \u00a4 SystemImplementation ( OscalBaseModel ) pydantic-model \u00a4 components : List [ trestle . oscal . ssp . SystemComponent ] pydantic-field required \u00a4 inventory_items : List [ trestle . oscal . common . InventoryItem ] pydantic-field \u00a4 leveraged_authorizations : List [ trestle . oscal . ssp . LeveragedAuthorization ] pydantic-field \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 remarks : Remarks pydantic-field \u00a4 users : List [ trestle . oscal . common . SystemUser ] pydantic-field required \u00a4 Config \u00a4 SystemInformation ( OscalBaseModel ) pydantic-model \u00a4 information_types : List [ trestle . oscal . ssp . InformationType ] pydantic-field required \u00a4 links : List [ trestle . oscal . common . Link ] pydantic-field \u00a4 props : List [ trestle . oscal . common . Property ] pydantic-field \u00a4 Config \u00a4 SystemSecurityPlan ( OscalBaseModel ) pydantic-model \u00a4 Attributes \u00a4 back_matter : BackMatter pydantic-field \u00a4 control_implementation : ControlImplementation pydantic-field required \u00a4 import_profile : ImportProfile pydantic-field required \u00a4 metadata : Metadata pydantic-field required \u00a4 system_characteristics : SystemCharacteristics pydantic-field required \u00a4 system_implementation : SystemImplementation pydantic-field required \u00a4 uuid : ConstrainedStrValue pydantic-field required \u00a4 A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised. Config \u00a4 handler: python","title":"ssp"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp","text":"","title":"ssp"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AdjustmentJustification","text":"","title":"AdjustmentJustification"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AdjustmentJustification-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AdjustmentJustification.__root__","text":"If the selected security level is different from the base security level, this contains the justification for the change.","title":"__root__"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AuthorizationBoundary","text":"","title":"AuthorizationBoundary"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AuthorizationBoundary-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AuthorizationBoundary.description","text":"A summary of the system's authorization boundary.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AuthorizationBoundary.diagrams","text":"","title":"diagrams"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AuthorizationBoundary.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AuthorizationBoundary.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AuthorizationBoundary.remarks","text":"Commentary about the system's authorization boundary that enhances the diagram.","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AuthorizationBoundary.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AvailabilityImpact","text":"","title":"AvailabilityImpact"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AvailabilityImpact.adjustment_justification","text":"","title":"adjustment_justification"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AvailabilityImpact.base","text":"","title":"base"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AvailabilityImpact.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AvailabilityImpact.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AvailabilityImpact.selected","text":"","title":"selected"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.AvailabilityImpact.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Base","text":"","title":"Base"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Base-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Base.__root__","text":"The prescribed base (Confidentiality, Integrity, or Availability) security impact level.","title":"__root__"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent","text":"","title":"ByComponent"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.component_uuid","text":"A reference to the component that is implementing a given control or control statement.","title":"component_uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.description","text":"An implementation statement that describes how a control or a control statement is implemented within the referenced system component.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.export","text":"Identifies content intended for external consumption, such as with leveraged organizations.","title":"export"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.implementation_status","text":"","title":"implementation_status"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.inherited","text":"","title":"inherited"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.satisfied","text":"","title":"satisfied"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.set_parameters","text":"","title":"set_parameters"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.uuid","text":"A globally unique identifier that can be used to reference this by-component entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ByComponent.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Categorization","text":"","title":"Categorization"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Categorization-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Categorization.information_type_ids","text":"","title":"information_type_ids"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Categorization.system","text":"Specifies the information type identification system used.","title":"system"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Categorization.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ConfidentialityImpact","text":"","title":"ConfidentialityImpact"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ConfidentialityImpact.adjustment_justification","text":"","title":"adjustment_justification"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ConfidentialityImpact.base","text":"","title":"base"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ConfidentialityImpact.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ConfidentialityImpact.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ConfidentialityImpact.selected","text":"","title":"selected"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ConfidentialityImpact.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ControlImplementation","text":"","title":"ControlImplementation"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ControlImplementation-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ControlImplementation.description","text":"A statement describing important things to know about how this set of control satisfaction documentation is approached.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ControlImplementation.implemented_requirements","text":"","title":"implemented_requirements"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ControlImplementation.set_parameters","text":"","title":"set_parameters"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ControlImplementation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DataFlow","text":"","title":"DataFlow"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DataFlow-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DataFlow.description","text":"A summary of the system's data flow.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DataFlow.diagrams","text":"","title":"diagrams"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DataFlow.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DataFlow.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DataFlow.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DataFlow.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DateAuthorized","text":"","title":"DateAuthorized"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DateAuthorized-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.DateAuthorized.__root__","text":"The date the system received its authorization.","title":"__root__"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram","text":"","title":"Diagram"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram.caption","text":"A brief caption to annotate the diagram.","title":"caption"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram.description","text":"A summary of the diagram.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram.remarks","text":"Commentary about the diagram that enhances it.","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram.uuid","text":"The identifier for this diagram.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Diagram.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export","text":"","title":"Export"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export.description","text":"An implementation statement that describes the aspects of the control or control statement implementation that can be available to another system leveraging this system.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export.provided","text":"","title":"provided"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export.responsibilities","text":"","title":"responsibilities"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Export.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement","text":"","title":"ImplementedRequirement"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.by_components","text":"","title":"by_components"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.control_id","text":"A reference to a control with a corresponding id value.","title":"control_id"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.set_parameters","text":"","title":"set_parameters"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.statements","text":"","title":"statements"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.uuid","text":"A globally unique identifier that can be used to reference this control requirement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImplementedRequirement.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImportProfile","text":"","title":"ImportProfile"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImportProfile-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImportProfile.href","text":"A resolvable URL reference to the profile to use as the system's control baseline.","title":"href"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImportProfile.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.ImportProfile.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType","text":"","title":"InformationType"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.availability_impact","text":"The expected level of impact resulting from the disruption of access to or use of the described information or the information system.","title":"availability_impact"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.categorizations","text":"","title":"categorizations"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.confidentiality_impact","text":"The expected level of impact resulting from the unauthorized disclosure of the described information.","title":"confidentiality_impact"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.description","text":"A summary of how this information type is used within the system.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.integrity_impact","text":"The expected level of impact resulting from the unauthorized modification of the described information.","title":"integrity_impact"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.title","text":"A human readable name for the information type. This title should be meaningful within the context of the system.","title":"title"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.uuid","text":"A globally unique identifier that can be used to reference this information type entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationType.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationTypeId","text":"","title":"InformationTypeId"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationTypeId-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.InformationTypeId.__root__","text":"An identifier qualified by the given identification system used, such as NIST SP 800-60.","title":"__root__"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited","text":"","title":"Inherited"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited.description","text":"An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is inheriting from a leveraged system.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited.provided_uuid","text":"Identifies a 'provided' assembly associated with this assembly.","title":"provided_uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited.uuid","text":"A globally unique identifier that can be used to reference this inherited entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Inherited.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.IntegrityImpact","text":"","title":"IntegrityImpact"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.IntegrityImpact.adjustment_justification","text":"","title":"adjustment_justification"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.IntegrityImpact.base","text":"","title":"base"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.IntegrityImpact.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.IntegrityImpact.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.IntegrityImpact.selected","text":"","title":"selected"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.IntegrityImpact.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization","text":"","title":"LeveragedAuthorization"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization.date_authorized","text":"","title":"date_authorized"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization.party_uuid","text":"A reference to the party that manages the leveraged system.","title":"party_uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization.title","text":"A human readable name for the leveraged authorization in the context of the system.","title":"title"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization.uuid","text":"A globally unique identifier that can be used to reference this leveraged authorization entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.LeveragedAuthorization.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Model","text":"","title":"Model"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Model.system_security_plan","text":"","title":"system_security_plan"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.NetworkArchitecture","text":"","title":"NetworkArchitecture"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.NetworkArchitecture-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.NetworkArchitecture.description","text":"A summary of the system's network architecture.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.NetworkArchitecture.diagrams","text":"","title":"diagrams"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.NetworkArchitecture.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.NetworkArchitecture.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.NetworkArchitecture.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.NetworkArchitecture.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided","text":"","title":"Provided"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided.description","text":"An implementation statement that describes the aspects of the control or control statement implementation that can be provided to another system leveraging this system.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided.uuid","text":"A globally unique identifier that can be used to reference this provided entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Provided.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility","text":"","title":"Responsibility"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility.description","text":"An implementation statement that describes the aspects of the control or control statement implementation that a leveraging system must implement to satisfy the control provided by a leveraged system.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility.provided_uuid","text":"Identifies a 'provided' assembly associated with this assembly.","title":"provided_uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility.uuid","text":"A globally unique identifier that can be used to reference this responsibility entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Responsibility.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied","text":"","title":"Satisfied"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied.description","text":"An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is implementing based on a requirement from a leveraged system.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied.responsibility_uuid","text":"Identifies a 'provided' assembly associated with this assembly.","title":"responsibility_uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied.uuid","text":"A globally unique identifier that can be used to reference this satisfied entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Satisfied.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SecurityImpactLevel","text":"","title":"SecurityImpactLevel"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SecurityImpactLevel-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SecurityImpactLevel.security_objective_availability","text":"A target-level of availability for the system, based on the sensitivity of information within the system.","title":"security_objective_availability"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SecurityImpactLevel.security_objective_confidentiality","text":"A target-level of confidentiality for the system, based on the sensitivity of information within the system.","title":"security_objective_confidentiality"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SecurityImpactLevel.security_objective_integrity","text":"A target-level of integrity for the system, based on the sensitivity of information within the system.","title":"security_objective_integrity"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SecurityImpactLevel.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Selected","text":"","title":"Selected"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Selected-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Selected.__root__","text":"The selected (Confidentiality, Integrity, or Availability) security impact level.","title":"__root__"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SetParameter","text":"","title":"SetParameter"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SetParameter-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SetParameter.param_id","text":"A reference to a parameter within a control, who's catalog has been imported into the current implementation context.","title":"param_id"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SetParameter.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SetParameter.values","text":"","title":"values"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SetParameter.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State","text":"An enumeration.","title":"State"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State.disposition","text":"","title":"disposition"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State.operational","text":"","title":"operational"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State.other","text":"","title":"other"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State.under_development","text":"","title":"under_development"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State.under_major_modification","text":"","title":"under_major_modification"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State1","text":"An enumeration.","title":"State1"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State1.disposition","text":"","title":"disposition"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State1.operational","text":"","title":"operational"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State1.other","text":"","title":"other"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.State1.under_development","text":"","title":"under_development"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement","text":"","title":"Statement"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement.by_components","text":"","title":"by_components"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement.statement_id","text":"A reference to a control statement by its identifier","title":"statement_id"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement.uuid","text":"A globally unique identifier that can be used to reference this control statement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Statement.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status","text":"","title":"Status"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status.state","text":"The operational status.","title":"state"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status1","text":"","title":"Status1"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status1-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status1.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status1.state","text":"The current operating status.","title":"state"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.Status1.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics","text":"","title":"SystemCharacteristics"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.authorization_boundary","text":"","title":"authorization_boundary"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.data_flow","text":"","title":"data_flow"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.date_authorized","text":"","title":"date_authorized"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.description","text":"A summary of the system.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.network_architecture","text":"","title":"network_architecture"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.responsible_parties","text":"","title":"responsible_parties"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.security_impact_level","text":"","title":"security_impact_level"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.security_sensitivity_level","text":"The overall information system sensitivity categorization, such as defined by FIPS-199.","title":"security_sensitivity_level"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.status","text":"","title":"status"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.system_ids","text":"","title":"system_ids"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.system_information","text":"","title":"system_information"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.system_name","text":"The full name of the system.","title":"system_name"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.system_name_short","text":"A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.","title":"system_name_short"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemCharacteristics.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent","text":"","title":"SystemComponent"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.description","text":"A description of the component, including information about its function.","title":"description"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.protocols","text":"","title":"protocols"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.purpose","text":"A summary of the technological or business purpose of the component.","title":"purpose"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.responsible_roles","text":"","title":"responsible_roles"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.status","text":"Describes the operational status of the system component.","title":"status"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.title","text":"A human readable name for the system component.","title":"title"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.type","text":"A category describing the purpose of the component.","title":"type"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.uuid","text":"The unique identifier for the component.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemComponent.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation","text":"","title":"SystemImplementation"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation.components","text":"","title":"components"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation.inventory_items","text":"","title":"inventory_items"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation.leveraged_authorizations","text":"","title":"leveraged_authorizations"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation.remarks","text":"","title":"remarks"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation.users","text":"","title":"users"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemImplementation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemInformation","text":"","title":"SystemInformation"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemInformation.information_types","text":"","title":"information_types"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemInformation.links","text":"","title":"links"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemInformation.props","text":"","title":"props"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemInformation.Config","text":"","title":"Config"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan","text":"","title":"SystemSecurityPlan"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan.back_matter","text":"","title":"back_matter"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan.control_implementation","text":"","title":"control_implementation"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan.import_profile","text":"","title":"import_profile"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan.metadata","text":"","title":"metadata"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan.system_characteristics","text":"","title":"system_characteristics"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan.system_implementation","text":"","title":"system_implementation"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan.uuid","text":"A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised.","title":"uuid"},{"location":"api_reference/trestle.oscal.ssp/#trestle.oscal.ssp.SystemSecurityPlan.Config","text":"handler: python","title":"Config"},{"location":"api_reference/trestle.tasks.base_task/","text":"trestle.tasks.base_task \u00a4 Trestle tasks base templating. logger \u00a4 Classes \u00a4 PassFail ( TaskBase ) \u00a4 Holding pattern template for a task which does nothing and always passes. Attributes: Name Type Description name str Name of the task. name : str \u00a4 Methods \u00a4 __init__ ( self , config_object ) special \u00a4 Initialize trestle task pass-fail. Attributes: Name Type Description config_object Config section associated with the task. Source code in trestle/tasks/base_task.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task pass-fail. Attributes: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object ) execute ( self ) \u00a4 Provide a actual outcome. Source code in trestle/tasks/base_task.py def execute ( self ) -> TaskOutcome : \"\"\"Provide a actual outcome.\"\"\" if self . _config : outcome = self . _config . getboolean ( 'execute_status' , fallback = True ) if outcome : return TaskOutcome ( 'success' ) return TaskOutcome ( 'failure' ) print_info ( self ) \u00a4 Print the help string. Source code in trestle/tasks/base_task.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( 'This is a template task which reports pass fail depending on the specific configuration.' ) logger . info ( 'In this case if no config section is provided the task will fail. This a a task specific behavior.' ) logger . info ( 'Configuration flags sit under [task.pass-fail]' ) logger . info ( 'with two boolean flags' ) logger . info ( 'execute_status = True/False with a default pass' ) logger . info ( 'simulate_status = True/False with a default fail' ) logger . info ( 'Note that if the config file does not have the appropriate section this should fail.' ) logger . info ( 'The princple goal is a simple development example.' ) simulate ( self ) \u00a4 Provide a simulated outcome. Source code in trestle/tasks/base_task.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" if self . _config : outcome = self . _config . getboolean ( 'simulate_status' , fallback = True ) if outcome : return TaskOutcome ( 'simulated-success' ) return TaskOutcome ( 'simulated-failure' ) TaskBase ( ABC ) \u00a4 Abstract base class for tasks. Attributes: Name Type Description name str Name of the task. name : str \u00a4 Methods \u00a4 __init__ ( self , config_object ) special \u00a4 Initialize task base and store config. Source code in trestle/tasks/base_task.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\"Initialize task base and store config.\"\"\" self . _config = config_object execute ( self ) \u00a4 Execute the task including potential rollback. Source code in trestle/tasks/base_task.py @abstractmethod def execute ( self ) -> TaskOutcome : \"\"\"Execute the task including potential rollback.\"\"\" print_info ( self ) \u00a4 Print the help string. Source code in trestle/tasks/base_task.py @abstractmethod def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" simulate ( self ) \u00a4 Simulate the task and report task outcome. Source code in trestle/tasks/base_task.py @abstractmethod def simulate ( self ) -> TaskOutcome : \"\"\"Simulate the task and report task outcome.\"\"\" TaskOutcome ( Enum ) \u00a4 Enum describing possible task outcomes. FAILURE \u00a4 NOT_IMPLEMENTED \u00a4 ROLLEDBACK \u00a4 SIM_FAILURE \u00a4 SIM_SUCCESS \u00a4 SUCCESS \u00a4 handler: python","title":"base_task"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task","text":"Trestle tasks base templating.","title":"base_task"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.logger","text":"","title":"logger"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.PassFail","text":"Holding pattern template for a task which does nothing and always passes. Attributes: Name Type Description name str Name of the task.","title":"PassFail"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.PassFail.name","text":"","title":"name"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.PassFail-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.PassFail.__init__","text":"Initialize trestle task pass-fail. Attributes: Name Type Description config_object Config section associated with the task. Source code in trestle/tasks/base_task.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task pass-fail. Attributes: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object )","title":"__init__()"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.PassFail.execute","text":"Provide a actual outcome. Source code in trestle/tasks/base_task.py def execute ( self ) -> TaskOutcome : \"\"\"Provide a actual outcome.\"\"\" if self . _config : outcome = self . _config . getboolean ( 'execute_status' , fallback = True ) if outcome : return TaskOutcome ( 'success' ) return TaskOutcome ( 'failure' )","title":"execute()"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.PassFail.print_info","text":"Print the help string. Source code in trestle/tasks/base_task.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( 'This is a template task which reports pass fail depending on the specific configuration.' ) logger . info ( 'In this case if no config section is provided the task will fail. This a a task specific behavior.' ) logger . info ( 'Configuration flags sit under [task.pass-fail]' ) logger . info ( 'with two boolean flags' ) logger . info ( 'execute_status = True/False with a default pass' ) logger . info ( 'simulate_status = True/False with a default fail' ) logger . info ( 'Note that if the config file does not have the appropriate section this should fail.' ) logger . info ( 'The princple goal is a simple development example.' )","title":"print_info()"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.PassFail.simulate","text":"Provide a simulated outcome. Source code in trestle/tasks/base_task.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" if self . _config : outcome = self . _config . getboolean ( 'simulate_status' , fallback = True ) if outcome : return TaskOutcome ( 'simulated-success' ) return TaskOutcome ( 'simulated-failure' )","title":"simulate()"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskBase","text":"Abstract base class for tasks. Attributes: Name Type Description name str Name of the task.","title":"TaskBase"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskBase.name","text":"","title":"name"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskBase-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskBase.__init__","text":"Initialize task base and store config. Source code in trestle/tasks/base_task.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\"Initialize task base and store config.\"\"\" self . _config = config_object","title":"__init__()"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskBase.execute","text":"Execute the task including potential rollback. Source code in trestle/tasks/base_task.py @abstractmethod def execute ( self ) -> TaskOutcome : \"\"\"Execute the task including potential rollback.\"\"\"","title":"execute()"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskBase.print_info","text":"Print the help string. Source code in trestle/tasks/base_task.py @abstractmethod def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\"","title":"print_info()"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskBase.simulate","text":"Simulate the task and report task outcome. Source code in trestle/tasks/base_task.py @abstractmethod def simulate ( self ) -> TaskOutcome : \"\"\"Simulate the task and report task outcome.\"\"\"","title":"simulate()"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskOutcome","text":"Enum describing possible task outcomes.","title":"TaskOutcome"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskOutcome.FAILURE","text":"","title":"FAILURE"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskOutcome.NOT_IMPLEMENTED","text":"","title":"NOT_IMPLEMENTED"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskOutcome.ROLLEDBACK","text":"","title":"ROLLEDBACK"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskOutcome.SIM_FAILURE","text":"","title":"SIM_FAILURE"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskOutcome.SIM_SUCCESS","text":"","title":"SIM_SUCCESS"},{"location":"api_reference/trestle.tasks.base_task/#trestle.tasks.base_task.TaskOutcome.SUCCESS","text":"handler: python","title":"SUCCESS"},{"location":"api_reference/trestle.tasks.osco_to_oscal/","text":"trestle.tasks.osco_to_oscal \u00a4 OSCAL transformation tasks. logger \u00a4 t_filename \u00a4 t_osco_transformer \u00a4 t_results \u00a4 Classes \u00a4 OscoToOscal ( TaskBase ) \u00a4 Task to convert Osco report to OSCAL json. Attributes: Name Type Description name str Name of the task. name : str \u00a4 Methods \u00a4 __init__ ( self , config_object ) special \u00a4 Initialize trestle task osco-to-oscal. Parameters: Name Type Description Default config_object Optional[configparser.SectionProxy] Config section associated with the task. required Source code in trestle/tasks/osco_to_oscal.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task osco-to-oscal. Args: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object ) execute ( self ) \u00a4 Provide an actual outcome. Source code in trestle/tasks/osco_to_oscal.py def execute ( self ) -> TaskOutcome : \"\"\"Provide an actual outcome.\"\"\" self . _simulate = False return self . _transform () print_info ( self ) \u00a4 Print the help string. Source code in trestle/tasks/osco_to_oscal.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( '' ) logger . info ( 'Purpose: Transform Osco files into Open Security Controls Assessment Language (OSCAL) ' + 'partial results files.' ) logger . info ( '' ) logger . info ( 'Configuration flags sit under [task.osco-to-oscal]:' ) logger . info ( ' input-dir = (required) the path of the input directory comprising Osco reports.' ) logger . info ( ' output-dir = (required) the path of the output directory comprising synthesized OSCAL .json files.' ) logger . info ( ' output-overwrite = (optional) true [default] or false; replace existing output when true.' ) logger . info ( ' quiet = (optional) true or false [default]; display file creations and rules analysis when false.' ) logger . info ( ' timestamp = (optional) timestamp for the Observations in ISO 8601 format, such as ' + ' 2021-01-04T00:05:23+04:00 for example; if not specified then value for \"Timestamp\" key in the Osco ' + ' report is used if present, otherwise current time is used.' ) logger . info ( '' ) logger . info ( 'Operation: A transformation is performed on one or more Osco input files to produce output in OSCAL ' + 'partial results format.' ) simulate ( self ) \u00a4 Provide a simulated outcome. Source code in trestle/tasks/osco_to_oscal.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" self . _simulate = True return self . _transform () handler: python","title":"osco_to_oscal"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal","text":"OSCAL transformation tasks.","title":"osco_to_oscal"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.logger","text":"","title":"logger"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.t_filename","text":"","title":"t_filename"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.t_osco_transformer","text":"","title":"t_osco_transformer"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.t_results","text":"","title":"t_results"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.OscoToOscal","text":"Task to convert Osco report to OSCAL json. Attributes: Name Type Description name str Name of the task.","title":"OscoToOscal"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.OscoToOscal.name","text":"","title":"name"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.OscoToOscal-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.OscoToOscal.__init__","text":"Initialize trestle task osco-to-oscal. Parameters: Name Type Description Default config_object Optional[configparser.SectionProxy] Config section associated with the task. required Source code in trestle/tasks/osco_to_oscal.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task osco-to-oscal. Args: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object )","title":"__init__()"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.OscoToOscal.execute","text":"Provide an actual outcome. Source code in trestle/tasks/osco_to_oscal.py def execute ( self ) -> TaskOutcome : \"\"\"Provide an actual outcome.\"\"\" self . _simulate = False return self . _transform ()","title":"execute()"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.OscoToOscal.print_info","text":"Print the help string. Source code in trestle/tasks/osco_to_oscal.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( '' ) logger . info ( 'Purpose: Transform Osco files into Open Security Controls Assessment Language (OSCAL) ' + 'partial results files.' ) logger . info ( '' ) logger . info ( 'Configuration flags sit under [task.osco-to-oscal]:' ) logger . info ( ' input-dir = (required) the path of the input directory comprising Osco reports.' ) logger . info ( ' output-dir = (required) the path of the output directory comprising synthesized OSCAL .json files.' ) logger . info ( ' output-overwrite = (optional) true [default] or false; replace existing output when true.' ) logger . info ( ' quiet = (optional) true or false [default]; display file creations and rules analysis when false.' ) logger . info ( ' timestamp = (optional) timestamp for the Observations in ISO 8601 format, such as ' + ' 2021-01-04T00:05:23+04:00 for example; if not specified then value for \"Timestamp\" key in the Osco ' + ' report is used if present, otherwise current time is used.' ) logger . info ( '' ) logger . info ( 'Operation: A transformation is performed on one or more Osco input files to produce output in OSCAL ' + 'partial results format.' )","title":"print_info()"},{"location":"api_reference/trestle.tasks.osco_to_oscal/#trestle.tasks.osco_to_oscal.OscoToOscal.simulate","text":"Provide a simulated outcome. Source code in trestle/tasks/osco_to_oscal.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" self . _simulate = True return self . _transform () handler: python","title":"simulate()"},{"location":"api_reference/trestle.tasks.profile_to_osco/","text":"trestle.tasks.profile_to_osco \u00a4 OSCAL transformation tasks. logger \u00a4 Classes \u00a4 ProfileToOsco ( TaskBase ) \u00a4 Task to convert Profile to OSC yaml. Attributes: Name Type Description name str Name of the task. name : str \u00a4 Methods \u00a4 __init__ ( self , config_object ) special \u00a4 Initialize trestle task profile-to-osco. Parameters: Name Type Description Default config_object Optional[configparser.SectionProxy] Config section associated with the task. required Source code in trestle/tasks/profile_to_osco.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task profile-to-osco. Args: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object ) execute ( self ) \u00a4 Provide an actual outcome. Source code in trestle/tasks/profile_to_osco.py def execute ( self ) -> TaskOutcome : \"\"\"Provide an actual outcome.\"\"\" try : return self . _execute () except Exception : logger . error ( traceback . format_exc ()) return TaskOutcome ( 'failure' ) print_info ( self ) \u00a4 Print the help string. Source code in trestle/tasks/profile_to_osco.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( '' ) logger . info ( 'Purpose: Transform Open Security Controls Assessment Language (OSCAL) Profile ' + 'into Open Shift Compliance Operator (OSCO) .yaml file.' ) logger . info ( '' ) logger . info ( 'Configuration flags sit under [task.profile-to-osco]:' ) logger . info ( ' input-file = (required) path of the input file comprising OSCAL profile.' ) logger . info ( ' output-dir = (required) path of the output directory comprising synthesized .yaml file.' ) logger . info ( ' output-name = (optional) name of created file in output directory, default is osco-profile.yaml.' ) logger . info ( ' output-overwrite = (optional) true [default] or false; replace existing output when true.' ) logger . info ( ' quiet = (optional) true or false [default]; display file creations and rules analysis when false.' ) logger . info ( '' ) logger . info ( 'Operation: The specified input profile is transformed into OSCO .yaml.' ) simulate ( self ) \u00a4 Provide a simulated outcome. Source code in trestle/tasks/profile_to_osco.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" return TaskOutcome ( 'simulated-success' ) handler: python","title":"profile_to_osco"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco","text":"OSCAL transformation tasks.","title":"profile_to_osco"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco.logger","text":"","title":"logger"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco.ProfileToOsco","text":"Task to convert Profile to OSC yaml. Attributes: Name Type Description name str Name of the task.","title":"ProfileToOsco"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco.ProfileToOsco.name","text":"","title":"name"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco.ProfileToOsco-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco.ProfileToOsco.__init__","text":"Initialize trestle task profile-to-osco. Parameters: Name Type Description Default config_object Optional[configparser.SectionProxy] Config section associated with the task. required Source code in trestle/tasks/profile_to_osco.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task profile-to-osco. Args: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object )","title":"__init__()"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco.ProfileToOsco.execute","text":"Provide an actual outcome. Source code in trestle/tasks/profile_to_osco.py def execute ( self ) -> TaskOutcome : \"\"\"Provide an actual outcome.\"\"\" try : return self . _execute () except Exception : logger . error ( traceback . format_exc ()) return TaskOutcome ( 'failure' )","title":"execute()"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco.ProfileToOsco.print_info","text":"Print the help string. Source code in trestle/tasks/profile_to_osco.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( '' ) logger . info ( 'Purpose: Transform Open Security Controls Assessment Language (OSCAL) Profile ' + 'into Open Shift Compliance Operator (OSCO) .yaml file.' ) logger . info ( '' ) logger . info ( 'Configuration flags sit under [task.profile-to-osco]:' ) logger . info ( ' input-file = (required) path of the input file comprising OSCAL profile.' ) logger . info ( ' output-dir = (required) path of the output directory comprising synthesized .yaml file.' ) logger . info ( ' output-name = (optional) name of created file in output directory, default is osco-profile.yaml.' ) logger . info ( ' output-overwrite = (optional) true [default] or false; replace existing output when true.' ) logger . info ( ' quiet = (optional) true or false [default]; display file creations and rules analysis when false.' ) logger . info ( '' ) logger . info ( 'Operation: The specified input profile is transformed into OSCO .yaml.' )","title":"print_info()"},{"location":"api_reference/trestle.tasks.profile_to_osco/#trestle.tasks.profile_to_osco.ProfileToOsco.simulate","text":"Provide a simulated outcome. Source code in trestle/tasks/profile_to_osco.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" return TaskOutcome ( 'simulated-success' ) handler: python","title":"simulate()"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/","text":"trestle.tasks.tanium_to_oscal \u00a4 OSCAL transformation tasks. logger \u00a4 t_filename \u00a4 t_results \u00a4 t_tanium_transformer \u00a4 Classes \u00a4 TaniumToOscal ( TaskBase ) \u00a4 Task to convert Tanium report to OSCAL json. Attributes: Name Type Description name str Name of the task. name : str \u00a4 Methods \u00a4 __init__ ( self , config_object ) special \u00a4 Initialize trestle task tanium-to-oscal. Parameters: Name Type Description Default config_object Optional[configparser.SectionProxy] Config section associated with the task. required Source code in trestle/tasks/tanium_to_oscal.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task tanium-to-oscal. Args: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object ) execute ( self ) \u00a4 Provide an actual outcome. Source code in trestle/tasks/tanium_to_oscal.py def execute ( self ) -> TaskOutcome : \"\"\"Provide an actual outcome.\"\"\" self . _simulate = False return self . _transform () print_info ( self ) \u00a4 Print the help string. Source code in trestle/tasks/tanium_to_oscal.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( '' ) logger . info ( 'Purpose: Transform Tanium files into Open Security Controls Assessment Language (OSCAL) results objects' + 'and serialize to a file.' ) logger . info ( '' ) logger . info ( 'Configuration flags sit under [task.tanium-to-oscal]:' ) logger . info ( ' input-dir = (required) the path of the input directory comprising Tanium reports.' ) logger . info ( ' output-dir = (required) the path of the output directory comprising synthesized OSCAL .json files.' ) logger . info ( ' output-overwrite = (optional) true [default] or false; replace existing output when true.' ) logger . info ( ' quiet = (optional) true or false [default]; display file creations and rules analysis when false.' ) logger . info ( ' timestamp = (optional) timestamp for the Observations in ISO 8601 format, such as ' + '2021-01-04T00:05:23+04:00 for example; if not specified then value for \"Timestamp\" key in the Tanium ' + 'report is used if present, otherwise current time is used.' ) logger . info ( '' ) logger . info ( 'Operation: A transformation is performed on one or more Tanium input files to produce output in ' + 'OSCAL partial results format.' ) simulate ( self ) \u00a4 Provide a simulated outcome. Source code in trestle/tasks/tanium_to_oscal.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" self . _simulate = True return self . _transform () handler: python","title":"tanium_to_oscal"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal","text":"OSCAL transformation tasks.","title":"tanium_to_oscal"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.logger","text":"","title":"logger"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.t_filename","text":"","title":"t_filename"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.t_results","text":"","title":"t_results"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.t_tanium_transformer","text":"","title":"t_tanium_transformer"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.TaniumToOscal","text":"Task to convert Tanium report to OSCAL json. Attributes: Name Type Description name str Name of the task.","title":"TaniumToOscal"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.TaniumToOscal.name","text":"","title":"name"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.TaniumToOscal-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.TaniumToOscal.__init__","text":"Initialize trestle task tanium-to-oscal. Parameters: Name Type Description Default config_object Optional[configparser.SectionProxy] Config section associated with the task. required Source code in trestle/tasks/tanium_to_oscal.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task tanium-to-oscal. Args: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object )","title":"__init__()"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.TaniumToOscal.execute","text":"Provide an actual outcome. Source code in trestle/tasks/tanium_to_oscal.py def execute ( self ) -> TaskOutcome : \"\"\"Provide an actual outcome.\"\"\" self . _simulate = False return self . _transform ()","title":"execute()"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.TaniumToOscal.print_info","text":"Print the help string. Source code in trestle/tasks/tanium_to_oscal.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( '' ) logger . info ( 'Purpose: Transform Tanium files into Open Security Controls Assessment Language (OSCAL) results objects' + 'and serialize to a file.' ) logger . info ( '' ) logger . info ( 'Configuration flags sit under [task.tanium-to-oscal]:' ) logger . info ( ' input-dir = (required) the path of the input directory comprising Tanium reports.' ) logger . info ( ' output-dir = (required) the path of the output directory comprising synthesized OSCAL .json files.' ) logger . info ( ' output-overwrite = (optional) true [default] or false; replace existing output when true.' ) logger . info ( ' quiet = (optional) true or false [default]; display file creations and rules analysis when false.' ) logger . info ( ' timestamp = (optional) timestamp for the Observations in ISO 8601 format, such as ' + '2021-01-04T00:05:23+04:00 for example; if not specified then value for \"Timestamp\" key in the Tanium ' + 'report is used if present, otherwise current time is used.' ) logger . info ( '' ) logger . info ( 'Operation: A transformation is performed on one or more Tanium input files to produce output in ' + 'OSCAL partial results format.' )","title":"print_info()"},{"location":"api_reference/trestle.tasks.tanium_to_oscal/#trestle.tasks.tanium_to_oscal.TaniumToOscal.simulate","text":"Provide a simulated outcome. Source code in trestle/tasks/tanium_to_oscal.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" self . _simulate = True return self . _transform () handler: python","title":"simulate()"},{"location":"api_reference/trestle.tasks.transform/","text":"trestle.tasks.transform \u00a4 OSCAL transformation tasks. handler: python","title":"transform"},{"location":"api_reference/trestle.tasks.transform/#trestle.tasks.transform","text":"OSCAL transformation tasks. handler: python","title":"transform"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/","text":"trestle.tasks.xlsx_to_oscal_component_definition \u00a4 OSCAL transformation tasks. logger \u00a4 t_component_name \u00a4 t_control \u00a4 t_controls \u00a4 t_description \u00a4 t_goal_id \u00a4 t_goal_name_id \u00a4 t_goal_remarks \u00a4 t_goal_text \u00a4 t_goal_version \u00a4 t_guidelines \u00a4 t_href \u00a4 t_id \u00a4 t_label \u00a4 t_name \u00a4 t_ofile \u00a4 t_oscal_version \u00a4 t_parameter_usage \u00a4 t_parameter_value \u00a4 t_parameter_values \u00a4 t_parameters \u00a4 t_row \u00a4 t_statements \u00a4 t_timestamp \u00a4 t_tokens \u00a4 t_type \u00a4 t_usage \u00a4 t_uuid_str \u00a4 t_values \u00a4 t_verbose \u00a4 t_version \u00a4 t_work_sheet \u00a4 Classes \u00a4 ParameterHelper \u00a4 Parameter Helper class is a temporary hack because Component Definition does not support Parameters. Methods \u00a4 __init__ ( self , values , id_ , label , href , usage , guidelines ) special \u00a4 Initialize. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def __init__ ( self , values : t_values , id_ : t_id , label : t_label , href : t_href , usage : t_usage , guidelines : t_guidelines ) -> None : \"\"\"Initialize.\"\"\" self . _parameter_values = ParameterValue ( __root__ = str ( values )) self . _id = id_ self . _label = label self . _links = [ Link ( href = href )] self . _usage = usage self . _guidelines = ParameterGuideline ( prose = guidelines ) get_parameter ( self ) \u00a4 Get parameter. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def get_parameter ( self ) -> Parameter : \"\"\"Get parameter.\"\"\" parameter = Parameter ( id = self . _id , label = self . _label , links = self . _links , usage = self . _usage , guidelines = [ self . _guidelines ], values = [ self . _parameter_values ] ) return parameter write_parameters_catalog ( self , parameters , timestamp , oscal_version , version , ofile , verbose ) \u00a4 Write parameters catalog. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def write_parameters_catalog ( self , parameters : t_parameters , timestamp : t_timestamp , oscal_version : t_oscal_version , version : t_version , ofile : t_ofile , verbose : t_verbose , ) -> None : \"\"\"Write parameters catalog.\"\"\" parameter_metadata = Metadata ( title = 'Component Parameters' , last_modified = timestamp , oscal_version = oscal_version , version = version , ) parameter_catalog = Catalog ( uuid = str ( uuid . uuid4 ()), metadata = parameter_metadata , params = list ( parameters . values ()), ) if verbose : logger . info ( f 'output: { ofile } ' ) parameter_catalog . oscal_write ( pathlib . Path ( ofile )) XlsxToOscalComponentDefinition ( TaskBase ) \u00a4 Task to create OSCAL ComponentDefinition json. Attributes: Name Type Description name str Name of the task. name : str \u00a4 Methods \u00a4 __init__ ( self , config_object ) special \u00a4 Initialize trestle task xlsx-to-oscal-component-definition. Parameters: Name Type Description Default config_object Optional[configparser.SectionProxy] Config section associated with the task. required Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task xlsx-to-oscal-component-definition. Args: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object ) self . _timestamp = datetime . datetime . utcnow () . replace ( microsecond = 0 ) . replace ( tzinfo = datetime . timezone . utc ) . isoformat () execute ( self ) \u00a4 Provide an executed outcome. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def execute ( self ) -> TaskOutcome : \"\"\"Provide an executed outcome.\"\"\" try : return self . _execute () except Exception : logger . info ( traceback . format_exc ()) return TaskOutcome ( 'failure' ) print_info ( self ) \u00a4 Print the help string. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( '' ) logger . info ( 'Purpose: From spread sheet and catalog produce OSCAL component definition file.' ) logger . info ( '' ) logger . info ( 'Configuration flags sit under [task.xlsx-to-oscal-component-definition]:' ) text1 = ' catalog-file = ' text2 = '(required) the path of the OSCAL catalog file, for example ' + self . _get_catalog_title () + '.' logger . info ( text1 + text2 ) text1 = ' spread-sheet-file = ' text2 = '(required) the path of the spread sheet file.' logger . info ( text1 + text2 ) text1 = ' work-sheet-name = ' text2 = '(required) the name of the work sheet in the spread sheet file.' logger . info ( text1 + text2 ) text1 = ' ' text2 = 'column \"ControlId\" contains goal ID.' logger . info ( text1 + text2 ) text2 = 'column \"ControlText\" contains goal text.' logger . info ( text1 + text2 ) text2 = 'columns \"NIST Mappings\" contain controls.' logger . info ( text1 + text2 ) text2 = 'column \"ResourceTitle\" contains component name.' logger . info ( text1 + text2 ) text2 = 'column \"goal_name_id\" contains goal name.' logger . info ( text1 + text2 ) text2 = 'column \"Parameter [optional parameter]\" contains parameter name + description, separated by newline.' logger . info ( text1 + text2 ) text2 = 'column \"Values [alternatives]\" contains parameter values.' logger . info ( text1 + text2 ) text1 = ' output-dir = ' text2 = '(required) the path of the output directory for synthesized OSCAL .json files.' logger . info ( text1 + text2 ) text1 = ' output-overwrite = ' text2 = '(optional) true [default] or false; replace existing output when true.' logger . info ( text1 + text2 ) set_timestamp ( self , timestamp ) \u00a4 Set the timestamp. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def set_timestamp ( self , timestamp ) -> None : \"\"\"Set the timestamp.\"\"\" self . _timestamp = timestamp simulate ( self ) \u00a4 Provide a simulated outcome. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" return TaskOutcome ( 'simulated-success' ) Functions \u00a4 get_trestle_version () \u00a4 Get trestle version wrapper. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def get_trestle_version (): \"\"\"Get trestle version wrapper.\"\"\" return __version__ handler: python","title":"xlsx_to_oscal_component_definition"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition","text":"OSCAL transformation tasks.","title":"xlsx_to_oscal_component_definition"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.logger","text":"","title":"logger"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_component_name","text":"","title":"t_component_name"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_control","text":"","title":"t_control"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_controls","text":"","title":"t_controls"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_description","text":"","title":"t_description"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_goal_id","text":"","title":"t_goal_id"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_goal_name_id","text":"","title":"t_goal_name_id"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_goal_remarks","text":"","title":"t_goal_remarks"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_goal_text","text":"","title":"t_goal_text"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_goal_version","text":"","title":"t_goal_version"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_guidelines","text":"","title":"t_guidelines"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_href","text":"","title":"t_href"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_id","text":"","title":"t_id"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_label","text":"","title":"t_label"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_name","text":"","title":"t_name"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_ofile","text":"","title":"t_ofile"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_oscal_version","text":"","title":"t_oscal_version"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_parameter_usage","text":"","title":"t_parameter_usage"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_parameter_value","text":"","title":"t_parameter_value"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_parameter_values","text":"","title":"t_parameter_values"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_parameters","text":"","title":"t_parameters"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_row","text":"","title":"t_row"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_statements","text":"","title":"t_statements"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_timestamp","text":"","title":"t_timestamp"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_tokens","text":"","title":"t_tokens"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_type","text":"","title":"t_type"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_usage","text":"","title":"t_usage"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_uuid_str","text":"","title":"t_uuid_str"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_values","text":"","title":"t_values"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_verbose","text":"","title":"t_verbose"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_version","text":"","title":"t_version"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.t_work_sheet","text":"","title":"t_work_sheet"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.ParameterHelper","text":"Parameter Helper class is a temporary hack because Component Definition does not support Parameters.","title":"ParameterHelper"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.ParameterHelper-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.ParameterHelper.__init__","text":"Initialize. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def __init__ ( self , values : t_values , id_ : t_id , label : t_label , href : t_href , usage : t_usage , guidelines : t_guidelines ) -> None : \"\"\"Initialize.\"\"\" self . _parameter_values = ParameterValue ( __root__ = str ( values )) self . _id = id_ self . _label = label self . _links = [ Link ( href = href )] self . _usage = usage self . _guidelines = ParameterGuideline ( prose = guidelines )","title":"__init__()"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.ParameterHelper.get_parameter","text":"Get parameter. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def get_parameter ( self ) -> Parameter : \"\"\"Get parameter.\"\"\" parameter = Parameter ( id = self . _id , label = self . _label , links = self . _links , usage = self . _usage , guidelines = [ self . _guidelines ], values = [ self . _parameter_values ] ) return parameter","title":"get_parameter()"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.ParameterHelper.write_parameters_catalog","text":"Write parameters catalog. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def write_parameters_catalog ( self , parameters : t_parameters , timestamp : t_timestamp , oscal_version : t_oscal_version , version : t_version , ofile : t_ofile , verbose : t_verbose , ) -> None : \"\"\"Write parameters catalog.\"\"\" parameter_metadata = Metadata ( title = 'Component Parameters' , last_modified = timestamp , oscal_version = oscal_version , version = version , ) parameter_catalog = Catalog ( uuid = str ( uuid . uuid4 ()), metadata = parameter_metadata , params = list ( parameters . values ()), ) if verbose : logger . info ( f 'output: { ofile } ' ) parameter_catalog . oscal_write ( pathlib . Path ( ofile ))","title":"write_parameters_catalog()"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.XlsxToOscalComponentDefinition","text":"Task to create OSCAL ComponentDefinition json. Attributes: Name Type Description name str Name of the task.","title":"XlsxToOscalComponentDefinition"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.XlsxToOscalComponentDefinition.name","text":"","title":"name"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.XlsxToOscalComponentDefinition-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.XlsxToOscalComponentDefinition.__init__","text":"Initialize trestle task xlsx-to-oscal-component-definition. Parameters: Name Type Description Default config_object Optional[configparser.SectionProxy] Config section associated with the task. required Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def __init__ ( self , config_object : Optional [ configparser . SectionProxy ]) -> None : \"\"\" Initialize trestle task xlsx-to-oscal-component-definition. Args: config_object: Config section associated with the task. \"\"\" super () . __init__ ( config_object ) self . _timestamp = datetime . datetime . utcnow () . replace ( microsecond = 0 ) . replace ( tzinfo = datetime . timezone . utc ) . isoformat ()","title":"__init__()"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.XlsxToOscalComponentDefinition.execute","text":"Provide an executed outcome. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def execute ( self ) -> TaskOutcome : \"\"\"Provide an executed outcome.\"\"\" try : return self . _execute () except Exception : logger . info ( traceback . format_exc ()) return TaskOutcome ( 'failure' )","title":"execute()"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.XlsxToOscalComponentDefinition.print_info","text":"Print the help string. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def print_info ( self ) -> None : \"\"\"Print the help string.\"\"\" logger . info ( f 'Help information for { self . name } task.' ) logger . info ( '' ) logger . info ( 'Purpose: From spread sheet and catalog produce OSCAL component definition file.' ) logger . info ( '' ) logger . info ( 'Configuration flags sit under [task.xlsx-to-oscal-component-definition]:' ) text1 = ' catalog-file = ' text2 = '(required) the path of the OSCAL catalog file, for example ' + self . _get_catalog_title () + '.' logger . info ( text1 + text2 ) text1 = ' spread-sheet-file = ' text2 = '(required) the path of the spread sheet file.' logger . info ( text1 + text2 ) text1 = ' work-sheet-name = ' text2 = '(required) the name of the work sheet in the spread sheet file.' logger . info ( text1 + text2 ) text1 = ' ' text2 = 'column \"ControlId\" contains goal ID.' logger . info ( text1 + text2 ) text2 = 'column \"ControlText\" contains goal text.' logger . info ( text1 + text2 ) text2 = 'columns \"NIST Mappings\" contain controls.' logger . info ( text1 + text2 ) text2 = 'column \"ResourceTitle\" contains component name.' logger . info ( text1 + text2 ) text2 = 'column \"goal_name_id\" contains goal name.' logger . info ( text1 + text2 ) text2 = 'column \"Parameter [optional parameter]\" contains parameter name + description, separated by newline.' logger . info ( text1 + text2 ) text2 = 'column \"Values [alternatives]\" contains parameter values.' logger . info ( text1 + text2 ) text1 = ' output-dir = ' text2 = '(required) the path of the output directory for synthesized OSCAL .json files.' logger . info ( text1 + text2 ) text1 = ' output-overwrite = ' text2 = '(optional) true [default] or false; replace existing output when true.' logger . info ( text1 + text2 )","title":"print_info()"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.XlsxToOscalComponentDefinition.set_timestamp","text":"Set the timestamp. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def set_timestamp ( self , timestamp ) -> None : \"\"\"Set the timestamp.\"\"\" self . _timestamp = timestamp","title":"set_timestamp()"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.XlsxToOscalComponentDefinition.simulate","text":"Provide a simulated outcome. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def simulate ( self ) -> TaskOutcome : \"\"\"Provide a simulated outcome.\"\"\" return TaskOutcome ( 'simulated-success' )","title":"simulate()"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.tasks.xlsx_to_oscal_component_definition/#trestle.tasks.xlsx_to_oscal_component_definition.get_trestle_version","text":"Get trestle version wrapper. Source code in trestle/tasks/xlsx_to_oscal_component_definition.py def get_trestle_version (): \"\"\"Get trestle version wrapper.\"\"\" return __version__ handler: python","title":"get_trestle_version()"},{"location":"api_reference/trestle.transforms.implementations.osco/","text":"trestle.transforms.implementations.osco \u00a4 Facilitate OSCAL-OSCO transformation. logger \u00a4 Classes \u00a4 OscoTransformer ( ResultsTransformer ) \u00a4 Interface for Osco transformer. Attributes \u00a4 analysis : List [ str ] property readonly \u00a4 Analysis. Methods \u00a4 __init__ ( self ) special \u00a4 Initialize. Source code in trestle/transforms/implementations/osco.py def __init__ ( self ) -> None : \"\"\"Initialize.\"\"\" self . _results_mgr = ResultsMgr ( self . get_timestamp ()) transform ( self , blob ) \u00a4 Transform the blob into a Results. The expected blob is a string that is one of: - data from OpenShift Compliance Operator (json, yaml, xml) - data from Auditree OSCO fetcher/check (json) Source code in trestle/transforms/implementations/osco.py def transform ( self , blob : str ) -> Results : \"\"\"Transform the blob into a Results. The expected blob is a string that is one of: - data from OpenShift Compliance Operator (json, yaml, xml) - data from Auditree OSCO fetcher/check (json) \"\"\" results = None if results is None : results = self . _ingest_xml ( blob ) if results is None : results = self . _ingest_json ( blob ) if results is None : results = self . _ingest_yaml ( blob ) return results ProfileToOscoTransformer ( FromOscalTransformer ) \u00a4 Interface for Profile to Osco transformer. Methods \u00a4 __init__ ( self , extends = 'ocp4-cis-node' , api_version = 'compliance.openshift.io/v1alpha1' , kind = 'TailoredProfile' , name = 'customized-tailored-profile' , namespace = 'openshift-compliance' ) special \u00a4 Initialize. Source code in trestle/transforms/implementations/osco.py def __init__ ( self , extends = 'ocp4-cis-node' , api_version = 'compliance.openshift.io/v1alpha1' , kind = 'TailoredProfile' , name = 'customized-tailored-profile' , namespace = 'openshift-compliance' , ) -> None : \"\"\"Initialize.\"\"\" self . _extends = extends self . _api_version = api_version self . _kind = kind self . _name = name self . _namespace = namespace transform ( self , profile ) \u00a4 Transform the Profile into a OSCO yaml. Source code in trestle/transforms/implementations/osco.py def transform ( self , profile : Profile ) -> str : \"\"\"Transform the Profile into a OSCO yaml.\"\"\" # set values set_values = self . _get_set_values ( profile ) # spec spec = { 'extends' : self . _get_metadata_prop_value ( profile , 'base_profile_mnemonic' , self . _extends ), 'title' : profile . metadata . title , 'setValues' : set_values , } disable_rules = self . _get_disable_rules ( profile ) if len ( disable_rules ) > 0 : spec [ 'disableRules' ] = disable_rules # yaml data ydata = { 'apiVersion' : self . _api_version , 'kind' : self . _kind , 'metadata' : { 'name' : self . _get_metadata_prop_value ( profile , 'profile_mnemonic' , self . _name ), 'namespace' : self . _namespace , }, 'spec' : spec , } return json . dumps ( ydata ) handler: python","title":"osco"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco","text":"Facilitate OSCAL-OSCO transformation.","title":"osco"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.logger","text":"","title":"logger"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.OscoTransformer","text":"Interface for Osco transformer.","title":"OscoTransformer"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.OscoTransformer-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.OscoTransformer.analysis","text":"Analysis.","title":"analysis"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.OscoTransformer-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.OscoTransformer.__init__","text":"Initialize. Source code in trestle/transforms/implementations/osco.py def __init__ ( self ) -> None : \"\"\"Initialize.\"\"\" self . _results_mgr = ResultsMgr ( self . get_timestamp ())","title":"__init__()"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.OscoTransformer.transform","text":"Transform the blob into a Results. The expected blob is a string that is one of: - data from OpenShift Compliance Operator (json, yaml, xml) - data from Auditree OSCO fetcher/check (json) Source code in trestle/transforms/implementations/osco.py def transform ( self , blob : str ) -> Results : \"\"\"Transform the blob into a Results. The expected blob is a string that is one of: - data from OpenShift Compliance Operator (json, yaml, xml) - data from Auditree OSCO fetcher/check (json) \"\"\" results = None if results is None : results = self . _ingest_xml ( blob ) if results is None : results = self . _ingest_json ( blob ) if results is None : results = self . _ingest_yaml ( blob ) return results","title":"transform()"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.ProfileToOscoTransformer","text":"Interface for Profile to Osco transformer.","title":"ProfileToOscoTransformer"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.ProfileToOscoTransformer-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.ProfileToOscoTransformer.__init__","text":"Initialize. Source code in trestle/transforms/implementations/osco.py def __init__ ( self , extends = 'ocp4-cis-node' , api_version = 'compliance.openshift.io/v1alpha1' , kind = 'TailoredProfile' , name = 'customized-tailored-profile' , namespace = 'openshift-compliance' , ) -> None : \"\"\"Initialize.\"\"\" self . _extends = extends self . _api_version = api_version self . _kind = kind self . _name = name self . _namespace = namespace","title":"__init__()"},{"location":"api_reference/trestle.transforms.implementations.osco/#trestle.transforms.implementations.osco.ProfileToOscoTransformer.transform","text":"Transform the Profile into a OSCO yaml. Source code in trestle/transforms/implementations/osco.py def transform ( self , profile : Profile ) -> str : \"\"\"Transform the Profile into a OSCO yaml.\"\"\" # set values set_values = self . _get_set_values ( profile ) # spec spec = { 'extends' : self . _get_metadata_prop_value ( profile , 'base_profile_mnemonic' , self . _extends ), 'title' : profile . metadata . title , 'setValues' : set_values , } disable_rules = self . _get_disable_rules ( profile ) if len ( disable_rules ) > 0 : spec [ 'disableRules' ] = disable_rules # yaml data ydata = { 'apiVersion' : self . _api_version , 'kind' : self . _kind , 'metadata' : { 'name' : self . _get_metadata_prop_value ( profile , 'profile_mnemonic' , self . _name ), 'namespace' : self . _namespace , }, 'spec' : spec , } return json . dumps ( ydata ) handler: python","title":"transform()"},{"location":"api_reference/trestle.transforms.implementations.tanium/","text":"trestle.transforms.implementations.tanium \u00a4 Facilitate Tanium report to NIST OSCAL transformation. logger \u00a4 Classes \u00a4 TaniumTransformer ( ResultsTransformer ) \u00a4 Interface for Tanium transformer. Attributes \u00a4 analysis : List [ str ] property readonly \u00a4 Analysis. Methods \u00a4 __init__ ( self ) special \u00a4 Initialize. Source code in trestle/transforms/implementations/tanium.py def __init__ ( self ): \"\"\"Initialize.\"\"\" self . _results_mgr = ResultsMgr () self . _results_mgr . set_timestamp ( self . get_timestamp ()) self . _results_mgr . get_timestamp () transform ( self , blob ) \u00a4 Transform the blob into a Results. Source code in trestle/transforms/implementations/tanium.py def transform ( self , blob : str ) -> Results : \"\"\"Transform the blob into a Results.\"\"\" results = Results () lines = blob . splitlines () for line in lines : line = line . strip () if len ( line ) > 0 : jdata = json . loads ( line ) if type ( jdata ) is list : for item in jdata : self . _results_mgr . ingest ( item ) else : self . _results_mgr . ingest ( jdata ) results . __root__ . append ( self . _results_mgr . result ) return results handler: python","title":"tanium"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium","text":"Facilitate Tanium report to NIST OSCAL transformation.","title":"tanium"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium.logger","text":"","title":"logger"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium.TaniumTransformer","text":"Interface for Tanium transformer.","title":"TaniumTransformer"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium.TaniumTransformer-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium.TaniumTransformer.analysis","text":"Analysis.","title":"analysis"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium.TaniumTransformer-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium.TaniumTransformer.__init__","text":"Initialize. Source code in trestle/transforms/implementations/tanium.py def __init__ ( self ): \"\"\"Initialize.\"\"\" self . _results_mgr = ResultsMgr () self . _results_mgr . set_timestamp ( self . get_timestamp ()) self . _results_mgr . get_timestamp ()","title":"__init__()"},{"location":"api_reference/trestle.transforms.implementations.tanium/#trestle.transforms.implementations.tanium.TaniumTransformer.transform","text":"Transform the blob into a Results. Source code in trestle/transforms/implementations/tanium.py def transform ( self , blob : str ) -> Results : \"\"\"Transform the blob into a Results.\"\"\" results = Results () lines = blob . splitlines () for line in lines : line = line . strip () if len ( line ) > 0 : jdata = json . loads ( line ) if type ( jdata ) is list : for item in jdata : self . _results_mgr . ingest ( item ) else : self . _results_mgr . ingest ( jdata ) results . __root__ . append ( self . _results_mgr . result ) return results handler: python","title":"transform()"},{"location":"api_reference/trestle.transforms.results/","text":"trestle.transforms.results \u00a4 Define Results class returned by transformers. Classes \u00a4 Results ( OscalBaseModel ) pydantic-model \u00a4 Transformer results as a list. __root__ : List [ trestle . oscal . assessment_results . Result ] pydantic-field special \u00a4 handler: python","title":"results"},{"location":"api_reference/trestle.transforms.results/#trestle.transforms.results","text":"Define Results class returned by transformers.","title":"results"},{"location":"api_reference/trestle.transforms.results/#trestle.transforms.results-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.transforms.results/#trestle.transforms.results.Results","text":"Transformer results as a list.","title":"Results"},{"location":"api_reference/trestle.transforms.results/#trestle.transforms.results.Results.__root__","text":"handler: python","title":"__root__"},{"location":"api_reference/trestle.transforms.transformer_factory/","text":"trestle.transforms.transformer_factory \u00a4 Define the TransformerFactory and corresponding transformer classes it creates. Classes \u00a4 FromOscalTransformer ( TransformerBase ) \u00a4 Abstract interface for transformers from OSCAL. Methods \u00a4 transform ( self , obj ) \u00a4 Transform the from OSCAL. Source code in trestle/transforms/transformer_factory.py @abstractmethod def transform ( self , obj : OscalBaseModel ) -> str : \"\"\"Transform the from OSCAL.\"\"\" ResultsTransformer ( TransformerBase ) \u00a4 Abstract interface for transformers that specifically return Results. Methods \u00a4 transform ( self , blob ) \u00a4 Transform the blob into Results. Source code in trestle/transforms/transformer_factory.py @abstractmethod def transform ( self , blob : str ) -> Results : \"\"\"Transform the blob into Results.\"\"\" ToOscalTransformer ( TransformerBase ) \u00a4 Abstract interface for transformers to OSCAL. Methods \u00a4 transform ( self , obj ) \u00a4 Transform the to OSCAL. Source code in trestle/transforms/transformer_factory.py @abstractmethod def transform ( self , obj : str ) -> OscalBaseModel : \"\"\"Transform the to OSCAL.\"\"\" TransformerBase ( ABC ) \u00a4 Abstract base interface for all transformers. Methods \u00a4 get_timestamp () staticmethod \u00a4 Get the default timestamp value. Source code in trestle/transforms/transformer_factory.py @staticmethod def get_timestamp () -> str : \"\"\"Get the default timestamp value.\"\"\" return TransformerBase . _timestamp set_timestamp ( value ) staticmethod \u00a4 Set the default timestamp value. Source code in trestle/transforms/transformer_factory.py @staticmethod def set_timestamp ( value : str ) -> None : \"\"\"Set the default timestamp value.\"\"\" datetime . datetime . strptime ( value , '%Y-%m- %d T%H:%M:%S%z' ) TransformerBase . _timestamp = value transform ( self , blob ) \u00a4 Transform the blob into a general OscalBaseModel. Source code in trestle/transforms/transformer_factory.py @abstractmethod def transform ( self , blob : Any ) -> Any : \"\"\"Transform the blob into a general OscalBaseModel.\"\"\" TransformerFactory \u00a4 Perform registration and creation of transformers. Methods \u00a4 __init__ ( self ) special \u00a4 Initialize the transformers dictionary as empty. Source code in trestle/transforms/transformer_factory.py def __init__ ( self ) -> None : \"\"\"Initialize the transformers dictionary as empty.\"\"\" self . _transformers : Dict [ str , Type [ TransformerBase ]] = {} get ( self , name ) \u00a4 Create an instance of the desired transformer based its name. Parameters: Name Type Description Default name str The name of the transformer. required Returns: Type Description TransformerBase An instance of the desired transformer. Exceptions: Type Description TrestleError if the name does not exist in the registry. Source code in trestle/transforms/transformer_factory.py def get ( self , name : str ) -> TransformerBase : \"\"\" Create an instance of the desired transformer based its name. Args: name (str): The name of the transformer. Returns: An instance of the desired transformer. Raises: TrestleError: if the name does not exist in the registry. \"\"\" t = self . _transformers . get ( name ) if t is not None : return t () raise TrestleError ( f 'Error getting non-registered transform { name } ' ) register_transformer ( self , name , transformer ) \u00a4 Register the transformer. This registers transformers in the factory so they may be created by name. Parameters: Name Type Description Default name str The name of the transformer. required transformer TransformerBase The transformer class to be registered. required Returns: Type Description None None Source code in trestle/transforms/transformer_factory.py def register_transformer ( self , name : str , transformer : Type [ TransformerBase ]) -> None : \"\"\" Register the transformer. This registers transformers in the factory so they may be created by name. Args: name (str): The name of the transformer. transformer (TransformerBase): The transformer class to be registered. Returns: None \"\"\" self . _transformers [ name ] = transformer handler: python","title":"transformer_factory"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory","text":"Define the TransformerFactory and corresponding transformer classes it creates.","title":"transformer_factory"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.FromOscalTransformer","text":"Abstract interface for transformers from OSCAL.","title":"FromOscalTransformer"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.FromOscalTransformer-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.FromOscalTransformer.transform","text":"Transform the from OSCAL. Source code in trestle/transforms/transformer_factory.py @abstractmethod def transform ( self , obj : OscalBaseModel ) -> str : \"\"\"Transform the from OSCAL.\"\"\"","title":"transform()"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.ResultsTransformer","text":"Abstract interface for transformers that specifically return Results.","title":"ResultsTransformer"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.ResultsTransformer-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.ResultsTransformer.transform","text":"Transform the blob into Results. Source code in trestle/transforms/transformer_factory.py @abstractmethod def transform ( self , blob : str ) -> Results : \"\"\"Transform the blob into Results.\"\"\"","title":"transform()"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.ToOscalTransformer","text":"Abstract interface for transformers to OSCAL.","title":"ToOscalTransformer"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.ToOscalTransformer-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.ToOscalTransformer.transform","text":"Transform the to OSCAL. Source code in trestle/transforms/transformer_factory.py @abstractmethod def transform ( self , obj : str ) -> OscalBaseModel : \"\"\"Transform the to OSCAL.\"\"\"","title":"transform()"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerBase","text":"Abstract base interface for all transformers.","title":"TransformerBase"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerBase-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerBase.get_timestamp","text":"Get the default timestamp value. Source code in trestle/transforms/transformer_factory.py @staticmethod def get_timestamp () -> str : \"\"\"Get the default timestamp value.\"\"\" return TransformerBase . _timestamp","title":"get_timestamp()"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerBase.set_timestamp","text":"Set the default timestamp value. Source code in trestle/transforms/transformer_factory.py @staticmethod def set_timestamp ( value : str ) -> None : \"\"\"Set the default timestamp value.\"\"\" datetime . datetime . strptime ( value , '%Y-%m- %d T%H:%M:%S%z' ) TransformerBase . _timestamp = value","title":"set_timestamp()"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerBase.transform","text":"Transform the blob into a general OscalBaseModel. Source code in trestle/transforms/transformer_factory.py @abstractmethod def transform ( self , blob : Any ) -> Any : \"\"\"Transform the blob into a general OscalBaseModel.\"\"\"","title":"transform()"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerFactory","text":"Perform registration and creation of transformers.","title":"TransformerFactory"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerFactory-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerFactory.__init__","text":"Initialize the transformers dictionary as empty. Source code in trestle/transforms/transformer_factory.py def __init__ ( self ) -> None : \"\"\"Initialize the transformers dictionary as empty.\"\"\" self . _transformers : Dict [ str , Type [ TransformerBase ]] = {}","title":"__init__()"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerFactory.get","text":"Create an instance of the desired transformer based its name. Parameters: Name Type Description Default name str The name of the transformer. required Returns: Type Description TransformerBase An instance of the desired transformer. Exceptions: Type Description TrestleError if the name does not exist in the registry. Source code in trestle/transforms/transformer_factory.py def get ( self , name : str ) -> TransformerBase : \"\"\" Create an instance of the desired transformer based its name. Args: name (str): The name of the transformer. Returns: An instance of the desired transformer. Raises: TrestleError: if the name does not exist in the registry. \"\"\" t = self . _transformers . get ( name ) if t is not None : return t () raise TrestleError ( f 'Error getting non-registered transform { name } ' )","title":"get()"},{"location":"api_reference/trestle.transforms.transformer_factory/#trestle.transforms.transformer_factory.TransformerFactory.register_transformer","text":"Register the transformer. This registers transformers in the factory so they may be created by name. Parameters: Name Type Description Default name str The name of the transformer. required transformer TransformerBase The transformer class to be registered. required Returns: Type Description None None Source code in trestle/transforms/transformer_factory.py def register_transformer ( self , name : str , transformer : Type [ TransformerBase ]) -> None : \"\"\" Register the transformer. This registers transformers in the factory so they may be created by name. Args: name (str): The name of the transformer. transformer (TransformerBase): The transformer class to be registered. Returns: None \"\"\" self . _transformers [ name ] = transformer handler: python","title":"register_transformer()"},{"location":"api_reference/trestle.transforms.transformer_singleton/","text":"trestle.transforms.transformer_singleton \u00a4 Create the singleton transformer factory here. transformer_factory \u00a4 handler: python","title":"transformer_singleton"},{"location":"api_reference/trestle.transforms.transformer_singleton/#trestle.transforms.transformer_singleton","text":"Create the singleton transformer factory here.","title":"transformer_singleton"},{"location":"api_reference/trestle.transforms.transformer_singleton/#trestle.transforms.transformer_singleton.transformer_factory","text":"handler: python","title":"transformer_factory"},{"location":"api_reference/trestle.transforms.utils.osco_helper/","text":"trestle.transforms.utils.osco_helper \u00a4 Facilitate OpenShift Compliance Operator report to NIST OSCAL json transformation. logger \u00a4 t_analysis \u00a4 t_component \u00a4 t_component_map \u00a4 t_component_ref \u00a4 t_control \u00a4 t_control_selection \u00a4 t_element \u00a4 t_inventory \u00a4 t_inventory_map \u00a4 t_inventory_ref \u00a4 t_local_definitions \u00a4 t_observation \u00a4 t_observation_list \u00a4 t_osco_data \u00a4 t_osco_xml \u00a4 t_result \u00a4 t_results_map \u00a4 t_reviewed_controls \u00a4 t_target \u00a4 t_timestamp \u00a4 Classes \u00a4 ComplianceOperatorReport \u00a4 Represents one report of OSCO data. Methods \u00a4 __init__ ( self , osco_xml ) special \u00a4 Initialize given specified args. Source code in trestle/transforms/utils/osco_helper.py def __init__ ( self , osco_xml : t_osco_xml ) -> None : \"\"\"Initialize given specified args.\"\"\" self . osco_xml = osco_xml rule_use_generator ( self ) \u00a4 Generate RuleUses by way of parsing the embedded XML. Source code in trestle/transforms/utils/osco_helper.py def rule_use_generator ( self ) -> RuleUse : \"\"\"Generate RuleUses by way of parsing the embedded XML.\"\"\" return self . _parse_xml () ResultsMgr \u00a4 Represents collection of data to transformed into an AssessmentResult.results. Attributes \u00a4 analysis : List [ str ] property readonly \u00a4 OSCAL statistics. components : Dict [ str , trestle . oscal . assessment_results . SystemComponent ] property readonly \u00a4 OSCAL components. control_selections : List [ trestle . oscal . assessment_results . ControlSelection ] property readonly \u00a4 OSCAL control selections. default_timestamp \u00a4 inventory : ValuesView [ trestle . oscal . common . InventoryItem ] property readonly \u00a4 OSCAL inventory. local_definitions : LocalDefinitions1 property readonly \u00a4 OSCAL local definitions. observations : List [ trestle . oscal . assessment_results . Observation ] property readonly \u00a4 OSCAL observations. result : Result property readonly \u00a4 OSCAL result. reviewed_controls : ReviewedControls property readonly \u00a4 OSCAL reviewed controls. Methods \u00a4 __init__ ( self , timestamp = '2021-09-29T06:43:10+00:00' ) special \u00a4 Initialize. Source code in trestle/transforms/utils/osco_helper.py def __init__ ( self , timestamp : t_timestamp = default_timestamp ) -> None : \"\"\"Initialize.\"\"\" self . timestamp = timestamp self . observation_list : t_observation_list = [] self . component_map : t_component_map = {} self . inventory_map : t_inventory_map = {} self . results_map : t_results_map = {} self . ns = 'http://ibm.github.io/compliance-trestle/schemas/oscal/ar/osco' ingest ( self , osco_data ) \u00a4 Process OSCO json. Source code in trestle/transforms/utils/osco_helper.py def ingest ( self , osco_data : t_osco_data ) -> None : \"\"\"Process OSCO json.\"\"\" if 'data' not in osco_data . keys (): return if 'results' not in osco_data [ 'data' ]: return results = osco_data [ 'data' ][ 'results' ] self . ingest_xml ( results ) ingest_xml ( self , osco_xml ) \u00a4 Process OSCO xml. Source code in trestle/transforms/utils/osco_helper.py def ingest_xml ( self , osco_xml : t_osco_xml ) -> None : \"\"\"Process OSCO xml.\"\"\" if osco_xml . startswith ( '<?xml' ): pass else : osco_xml = bz2 . decompress ( base64 . b64decode ( osco_xml )) co_report = ComplianceOperatorReport ( osco_xml ) self . _process ( co_report ) RuleUse \u00a4 Represents one rule of OSCO data. Methods \u00a4 __init__ ( self , id_ , target , target_type , benchmark_href , benchmark_id , scanner_name , scanner_version , idref , version , time , result , severity , weight ) special \u00a4 Initialize given specified args. Source code in trestle/transforms/utils/osco_helper.py def __init__ ( self , id_ : str , target : str , target_type : str , benchmark_href : str , benchmark_id : str , scanner_name : str , scanner_version : str , idref : str , version : str , time : str , result : str , severity : str , weight : str ) -> None : \"\"\"Initialize given specified args.\"\"\" self . id_ = id_ self . target = target self . target_type = target_type self . benchmark_href = benchmark_href self . benchmark_id = benchmark_id self . scanner_name = scanner_name self . scanner_version = scanner_version self . idref = idref self . version = version self . time = time self . result = result self . severity = severity self . weight = weight handler: python","title":"osco_helper"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper","text":"Facilitate OpenShift Compliance Operator report to NIST OSCAL json transformation.","title":"osco_helper"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.logger","text":"","title":"logger"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_analysis","text":"","title":"t_analysis"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_component","text":"","title":"t_component"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_component_map","text":"","title":"t_component_map"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_component_ref","text":"","title":"t_component_ref"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_control","text":"","title":"t_control"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_control_selection","text":"","title":"t_control_selection"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_element","text":"","title":"t_element"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_inventory","text":"","title":"t_inventory"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_inventory_map","text":"","title":"t_inventory_map"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_inventory_ref","text":"","title":"t_inventory_ref"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_local_definitions","text":"","title":"t_local_definitions"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_observation","text":"","title":"t_observation"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_observation_list","text":"","title":"t_observation_list"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_osco_data","text":"","title":"t_osco_data"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_osco_xml","text":"","title":"t_osco_xml"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_result","text":"","title":"t_result"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_results_map","text":"","title":"t_results_map"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_reviewed_controls","text":"","title":"t_reviewed_controls"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_target","text":"","title":"t_target"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.t_timestamp","text":"","title":"t_timestamp"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ComplianceOperatorReport","text":"Represents one report of OSCO data.","title":"ComplianceOperatorReport"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ComplianceOperatorReport-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ComplianceOperatorReport.__init__","text":"Initialize given specified args. Source code in trestle/transforms/utils/osco_helper.py def __init__ ( self , osco_xml : t_osco_xml ) -> None : \"\"\"Initialize given specified args.\"\"\" self . osco_xml = osco_xml","title":"__init__()"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ComplianceOperatorReport.rule_use_generator","text":"Generate RuleUses by way of parsing the embedded XML. Source code in trestle/transforms/utils/osco_helper.py def rule_use_generator ( self ) -> RuleUse : \"\"\"Generate RuleUses by way of parsing the embedded XML.\"\"\" return self . _parse_xml ()","title":"rule_use_generator()"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr","text":"Represents collection of data to transformed into an AssessmentResult.results.","title":"ResultsMgr"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.analysis","text":"OSCAL statistics.","title":"analysis"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.components","text":"OSCAL components.","title":"components"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.control_selections","text":"OSCAL control selections.","title":"control_selections"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.default_timestamp","text":"","title":"default_timestamp"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.inventory","text":"OSCAL inventory.","title":"inventory"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.local_definitions","text":"OSCAL local definitions.","title":"local_definitions"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.observations","text":"OSCAL observations.","title":"observations"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.result","text":"OSCAL result.","title":"result"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.reviewed_controls","text":"OSCAL reviewed controls.","title":"reviewed_controls"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.__init__","text":"Initialize. Source code in trestle/transforms/utils/osco_helper.py def __init__ ( self , timestamp : t_timestamp = default_timestamp ) -> None : \"\"\"Initialize.\"\"\" self . timestamp = timestamp self . observation_list : t_observation_list = [] self . component_map : t_component_map = {} self . inventory_map : t_inventory_map = {} self . results_map : t_results_map = {} self . ns = 'http://ibm.github.io/compliance-trestle/schemas/oscal/ar/osco'","title":"__init__()"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.ingest","text":"Process OSCO json. Source code in trestle/transforms/utils/osco_helper.py def ingest ( self , osco_data : t_osco_data ) -> None : \"\"\"Process OSCO json.\"\"\" if 'data' not in osco_data . keys (): return if 'results' not in osco_data [ 'data' ]: return results = osco_data [ 'data' ][ 'results' ] self . ingest_xml ( results )","title":"ingest()"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.ResultsMgr.ingest_xml","text":"Process OSCO xml. Source code in trestle/transforms/utils/osco_helper.py def ingest_xml ( self , osco_xml : t_osco_xml ) -> None : \"\"\"Process OSCO xml.\"\"\" if osco_xml . startswith ( '<?xml' ): pass else : osco_xml = bz2 . decompress ( base64 . b64decode ( osco_xml )) co_report = ComplianceOperatorReport ( osco_xml ) self . _process ( co_report )","title":"ingest_xml()"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.RuleUse","text":"Represents one rule of OSCO data.","title":"RuleUse"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.RuleUse-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.utils.osco_helper/#trestle.transforms.utils.osco_helper.RuleUse.__init__","text":"Initialize given specified args. Source code in trestle/transforms/utils/osco_helper.py def __init__ ( self , id_ : str , target : str , target_type : str , benchmark_href : str , benchmark_id : str , scanner_name : str , scanner_version : str , idref : str , version : str , time : str , result : str , severity : str , weight : str ) -> None : \"\"\"Initialize given specified args.\"\"\" self . id_ = id_ self . target = target self . target_type = target_type self . benchmark_href = benchmark_href self . benchmark_id = benchmark_id self . scanner_name = scanner_name self . scanner_version = scanner_version self . idref = idref self . version = version self . time = time self . result = result self . severity = severity self . weight = weight handler: python","title":"__init__()"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/","text":"trestle.transforms.utils.tanium_helper \u00a4 Facilitate Tanium report to NIST OSCAL json transformation. logger \u00a4 t_analysis \u00a4 t_component \u00a4 t_component_map \u00a4 t_component_ref \u00a4 t_computer_name \u00a4 t_control \u00a4 t_control_selection \u00a4 t_inventory \u00a4 t_inventory_map \u00a4 t_inventory_ref \u00a4 t_local_definitions \u00a4 t_observation \u00a4 t_observation_list \u00a4 t_oscal \u00a4 t_resource \u00a4 t_result \u00a4 t_reviewed_controls \u00a4 t_tanium_collection \u00a4 t_tanium_row \u00a4 t_timestamp \u00a4 Classes \u00a4 ResultsMgr \u00a4 Represents collection of data to transformed into an AssessmentResult.results. Attributes \u00a4 analysis : List [ str ] property readonly \u00a4 OSCAL statistics. components : Dict [ str , trestle . oscal . assessment_results . SystemComponent ] property readonly \u00a4 OSCAL components. control_selections : List [ trestle . oscal . assessment_results . ControlSelection ] property readonly \u00a4 OSCAL control selections. controls : Dict [ str , trestle . oscal . assessment_results . SystemComponent ] property readonly \u00a4 OSCAL controls. inventory : ValuesView [ trestle . oscal . common . InventoryItem ] property readonly \u00a4 OSCAL inventory. local_definitions : LocalDefinitions1 property readonly \u00a4 OSCAL local definitions. observations : List [ trestle . oscal . assessment_results . Observation ] property readonly \u00a4 OSCAL observations. result : Result property readonly \u00a4 OSCAL result. reviewed_controls : ReviewedControls property readonly \u00a4 OSCAL reviewed controls. timestamp \u00a4 Methods \u00a4 __init__ ( self ) special \u00a4 Initialize. Source code in trestle/transforms/utils/tanium_helper.py def __init__ ( self ) -> None : \"\"\"Initialize.\"\"\" self . observation_list : t_observation_list = [] self . component_map : t_component_map = {} self . inventory_map : t_inventory_map = {} self . ns = 'http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium' # track ip-address to computer-name self . map_ip_address_to_computer_name = {} # list of controls self . control_list = [] get_timestamp () staticmethod \u00a4 Get the default timestamp value. Source code in trestle/transforms/utils/tanium_helper.py @staticmethod def get_timestamp () -> str : \"\"\"Get the default timestamp value.\"\"\" return ResultsMgr . timestamp ingest ( self , tanium_row ) \u00a4 Process one row of Tanium. Source code in trestle/transforms/utils/tanium_helper.py def ingest ( self , tanium_row : t_tanium_row ) -> None : \"\"\"Process one row of Tanium.\"\"\" keys = tanium_row . keys () for key in keys : if key . startswith ( 'Comply' ): break comply_list = tanium_row [ key ] for comply in comply_list : rule_use = RuleUse ( tanium_row , comply , ResultsMgr . timestamp ) self . _process ( rule_use ) set_timestamp ( value ) staticmethod \u00a4 Set the default timestamp value. Source code in trestle/transforms/utils/tanium_helper.py @staticmethod def set_timestamp ( value : str ) -> None : \"\"\"Set the default timestamp value.\"\"\" datetime . datetime . strptime ( value , '%Y-%m- %d T%H:%M:%S%z' ) ResultsMgr . timestamp = value RuleUse \u00a4 Represents one row of Tanium data. Methods \u00a4 __init__ ( self , tanium_row , comply , default_timestamp ) special \u00a4 Initialize given specified args. Source code in trestle/transforms/utils/tanium_helper.py def __init__ ( self , tanium_row : t_tanium_row , comply , default_timestamp : t_timestamp ) -> None : \"\"\"Initialize given specified args.\"\"\" logger . debug ( f 'tanium-row: { tanium_row } ' ) try : # level 1 keys self . computer_name = tanium_row [ 'Computer Name' ] self . tanium_client_ip_address = tanium_row [ 'Tanium Client IP Address' ] self . ip_address = str ( tanium_row [ 'IP Address' ]) self . count = str ( tanium_row [ 'Count' ]) # comply keys self . check_id = comply [ 'Check ID' ] self . rule_id = comply [ 'Rule ID' ] self . state = comply [ 'State' ] # self . check_id_level = '[no results]' self . check_id_version = '[no results]' self . check_id_benchmark = '[no results]' self . component = '[no results]' self . component_type = '[no results]' # if ';' in self . check_id : items = self . check_id . split ( ';' ) if len ( items ) > 2 : self . check_id_level = items [ 2 ] if len ( items ) > 1 : self . check_id_version = items [ 1 ] if len ( items ) > 0 : self . check_id_benchmark = items [ 0 ] self . component = items [ 0 ] if self . component . startswith ( 'CIS ' ): self . component = self . component [ len ( 'CIS ' ):] if self . component . endswith ( ' Benchmark' ): self . component = self . component [: - len ( ' Benchmark' )] self . component_type = 'Operating System' # self . timestamp = comply . get ( 'Timestamp' , default_timestamp ) # self . collected = default_timestamp except Exception as e : logger . debug ( f 'tanium-row: { tanium_row } ' ) logger . debug ( e ) logger . debug ( traceback . format_exc ()) raise e return handler: python","title":"tanium_helper"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper","text":"Facilitate Tanium report to NIST OSCAL json transformation.","title":"tanium_helper"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.logger","text":"","title":"logger"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_analysis","text":"","title":"t_analysis"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_component","text":"","title":"t_component"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_component_map","text":"","title":"t_component_map"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_component_ref","text":"","title":"t_component_ref"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_computer_name","text":"","title":"t_computer_name"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_control","text":"","title":"t_control"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_control_selection","text":"","title":"t_control_selection"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_inventory","text":"","title":"t_inventory"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_inventory_map","text":"","title":"t_inventory_map"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_inventory_ref","text":"","title":"t_inventory_ref"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_local_definitions","text":"","title":"t_local_definitions"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_observation","text":"","title":"t_observation"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_observation_list","text":"","title":"t_observation_list"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_oscal","text":"","title":"t_oscal"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_resource","text":"","title":"t_resource"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_result","text":"","title":"t_result"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_reviewed_controls","text":"","title":"t_reviewed_controls"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_tanium_collection","text":"","title":"t_tanium_collection"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_tanium_row","text":"","title":"t_tanium_row"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.t_timestamp","text":"","title":"t_timestamp"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr","text":"Represents collection of data to transformed into an AssessmentResult.results.","title":"ResultsMgr"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr-attributes","text":"","title":"Attributes"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.analysis","text":"OSCAL statistics.","title":"analysis"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.components","text":"OSCAL components.","title":"components"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.control_selections","text":"OSCAL control selections.","title":"control_selections"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.controls","text":"OSCAL controls.","title":"controls"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.inventory","text":"OSCAL inventory.","title":"inventory"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.local_definitions","text":"OSCAL local definitions.","title":"local_definitions"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.observations","text":"OSCAL observations.","title":"observations"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.result","text":"OSCAL result.","title":"result"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.reviewed_controls","text":"OSCAL reviewed controls.","title":"reviewed_controls"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.timestamp","text":"","title":"timestamp"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.__init__","text":"Initialize. Source code in trestle/transforms/utils/tanium_helper.py def __init__ ( self ) -> None : \"\"\"Initialize.\"\"\" self . observation_list : t_observation_list = [] self . component_map : t_component_map = {} self . inventory_map : t_inventory_map = {} self . ns = 'http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium' # track ip-address to computer-name self . map_ip_address_to_computer_name = {} # list of controls self . control_list = []","title":"__init__()"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.get_timestamp","text":"Get the default timestamp value. Source code in trestle/transforms/utils/tanium_helper.py @staticmethod def get_timestamp () -> str : \"\"\"Get the default timestamp value.\"\"\" return ResultsMgr . timestamp","title":"get_timestamp()"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.ingest","text":"Process one row of Tanium. Source code in trestle/transforms/utils/tanium_helper.py def ingest ( self , tanium_row : t_tanium_row ) -> None : \"\"\"Process one row of Tanium.\"\"\" keys = tanium_row . keys () for key in keys : if key . startswith ( 'Comply' ): break comply_list = tanium_row [ key ] for comply in comply_list : rule_use = RuleUse ( tanium_row , comply , ResultsMgr . timestamp ) self . _process ( rule_use )","title":"ingest()"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.ResultsMgr.set_timestamp","text":"Set the default timestamp value. Source code in trestle/transforms/utils/tanium_helper.py @staticmethod def set_timestamp ( value : str ) -> None : \"\"\"Set the default timestamp value.\"\"\" datetime . datetime . strptime ( value , '%Y-%m- %d T%H:%M:%S%z' ) ResultsMgr . timestamp = value","title":"set_timestamp()"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.RuleUse","text":"Represents one row of Tanium data.","title":"RuleUse"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.RuleUse-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.transforms.utils.tanium_helper/#trestle.transforms.utils.tanium_helper.RuleUse.__init__","text":"Initialize given specified args. Source code in trestle/transforms/utils/tanium_helper.py def __init__ ( self , tanium_row : t_tanium_row , comply , default_timestamp : t_timestamp ) -> None : \"\"\"Initialize given specified args.\"\"\" logger . debug ( f 'tanium-row: { tanium_row } ' ) try : # level 1 keys self . computer_name = tanium_row [ 'Computer Name' ] self . tanium_client_ip_address = tanium_row [ 'Tanium Client IP Address' ] self . ip_address = str ( tanium_row [ 'IP Address' ]) self . count = str ( tanium_row [ 'Count' ]) # comply keys self . check_id = comply [ 'Check ID' ] self . rule_id = comply [ 'Rule ID' ] self . state = comply [ 'State' ] # self . check_id_level = '[no results]' self . check_id_version = '[no results]' self . check_id_benchmark = '[no results]' self . component = '[no results]' self . component_type = '[no results]' # if ';' in self . check_id : items = self . check_id . split ( ';' ) if len ( items ) > 2 : self . check_id_level = items [ 2 ] if len ( items ) > 1 : self . check_id_version = items [ 1 ] if len ( items ) > 0 : self . check_id_benchmark = items [ 0 ] self . component = items [ 0 ] if self . component . startswith ( 'CIS ' ): self . component = self . component [ len ( 'CIS ' ):] if self . component . endswith ( ' Benchmark' ): self . component = self . component [: - len ( ' Benchmark' )] self . component_type = 'Operating System' # self . timestamp = comply . get ( 'Timestamp' , default_timestamp ) # self . collected = default_timestamp except Exception as e : logger . debug ( f 'tanium-row: { tanium_row } ' ) logger . debug ( e ) logger . debug ( traceback . format_exc ()) raise e return handler: python","title":"__init__()"},{"location":"api_reference/trestle.utils.fs/","text":"trestle.utils.fs \u00a4 Common file system utilities. logger \u00a4 Functions \u00a4 allowed_task_name ( name ) \u00a4 Determine whether a task, which is a 'non-core-OSCAL activity/directory is allowed. Parameters: Name Type Description Default name str the task name which is assumed may take the form of a relative path for task/subtasks. required Returns: Type Description bool Whether the task name is allowed or not allowed (interferes with assumed project directories such as catalogs). Source code in trestle/utils/fs.py def allowed_task_name ( name : str ) -> bool : \"\"\"Determine whether a task, which is a 'non-core-OSCAL activity/directory is allowed. args: name: the task name which is assumed may take the form of a relative path for task/subtasks. Returns: Whether the task name is allowed or not allowed (interferes with assumed project directories such as catalogs). \"\"\" # Task must not use an OSCAL directory # Task must not self-interfere with a project pathed_name = pathlib . Path ( name ) root_path = pathed_name . parts [ 0 ] if root_path in const . MODEL_TYPE_TO_MODEL_DIR . values (): logger . error ( 'Task name is the same as an OSCAL schema name.' ) return False elif root_path [ 0 ] == '.' : logger . error ( 'Task name must not start with \".\"' ) return False elif pathed_name . suffix != '' : # Does it look like a file logger . error ( 'tasks name must not look like a file path (e.g. contain a suffix' ) return False elif '__global__' in pathed_name . parts : logger . error ( 'Task name cannot contain __global__' ) return False return True clean_project_sub_path ( sub_path ) \u00a4 Clean all directories and files in a project top level subdir. It ensures the sub_path is a child path in the project root. Source code in trestle/utils/fs.py def clean_project_sub_path ( sub_path : pathlib . Path ) -> None : \"\"\"Clean all directories and files in a project top level subdir. It ensures the sub_path is a child path in the project root. \"\"\" if sub_path . exists (): sub_path = sub_path . resolve () project_root = sub_path . parent if not get_trestle_project_root ( project_root ): raise TrestleError ( 'Path to be cleaned is not a under valid Trestle project root' ) # clean all files/directories under sub_path if sub_path . is_dir (): for item in pathlib . Path . iterdir ( sub_path ): if item . is_file (): item . unlink () elif item . is_dir (): clean_project_sub_path ( item ) sub_path . rmdir () # delete the sub_path elif sub_path . is_file (): sub_path . unlink () extract_alias ( string_dir ) \u00a4 Extract alias from filename or directory name removing extensions and prefixes related to dict and list. As we need to do this for multiple parts of a path operating on strings is easier. Source code in trestle/utils/fs.py def extract_alias ( string_dir : str ) -> str : \"\"\" Extract alias from filename or directory name removing extensions and prefixes related to dict and list. As we need to do this for multiple parts of a path operating on strings is easier. \"\"\" alias = string_dir . split ( '.' )[ 0 ] . split ( const . IDX_SEP )[ - 1 ] # get suffix of file or directory name representing list or dict item return alias get_all_models ( root ) \u00a4 Get list of all models in trestle directory as tuples (model_type, model_name). Source code in trestle/utils/fs.py def get_all_models ( root : pathlib . Path ) -> List [ Tuple [ str , str ]]: \"\"\"Get list of all models in trestle directory as tuples (model_type, model_name).\"\"\" full_list = [] for model_type in const . MODEL_TYPE_LIST : models = get_models_of_type ( model_type , root ) for m in models : full_list . append (( model_type , m )) return full_list get_contextual_file_type ( path ) \u00a4 Return the file content type for files in the given directory, if it's a trestle project. Source code in trestle/utils/fs.py def get_contextual_file_type ( path : pathlib . Path ) -> FileContentType : \"\"\"Return the file content type for files in the given directory, if it's a trestle project.\"\"\" if not is_valid_project_model_path ( path ): raise err . TrestleError ( f 'Trestle project not found at path { path } ' ) for file_or_directory in path . iterdir (): if file_or_directory . is_file (): return FileContentType . to_content_type ( file_or_directory . suffix ) for file_or_directory in path . iterdir (): if file_or_directory . is_dir (): return get_contextual_file_type ( file_or_directory ) raise err . TrestleError ( 'No files found in the project.' ) get_models_of_type ( model_type , root ) \u00a4 Get list of model names for requested type in trestle directory. Source code in trestle/utils/fs.py def get_models_of_type ( model_type : str , root : pathlib . Path ) -> List [ str ]: \"\"\"Get list of model names for requested type in trestle directory.\"\"\" if model_type not in const . MODEL_TYPE_LIST : raise err . TrestleError ( f 'Model type { model_type } is not supported' ) # search relative to project root trestle_root = get_trestle_project_root ( root ) if not trestle_root : logger . error ( f 'Given directory { root } is not within a trestle project.' ) raise err . TrestleError ( 'Given directory is not within a trestle project.' ) # contruct path to the model file name model_dir_name = model_type_to_model_dir ( model_type ) root_model_dir = trestle_root / model_dir_name model_list = [] for f in root_model_dir . glob ( '*/' ): # only look for proper json and yaml files if not should_ignore ( f . stem ): if not f . is_dir (): logger . warn ( f 'Ignoring validation of misplaced file { f . name } ' + f 'found in the model directory, { model_dir_name } .' ) else : model_list . append ( f . stem ) return model_list get_project_model_path ( path ) \u00a4 Get the base path of the trestle model project. Source code in trestle/utils/fs.py def get_project_model_path ( path : pathlib . Path ) -> Optional [ pathlib . Path ]: \"\"\"Get the base path of the trestle model project.\"\"\" if len ( path . parts ) > 2 : for i in range ( 2 , len ( path . parts )): current = pathlib . Path ( path . parts [ 0 ]) . joinpath ( * path . parts [ 1 : i + 1 ]) if is_valid_project_model_path ( current ): return current return None get_relative_model_type ( relative_path ) \u00a4 Given the relative path of a file with respect to 'trestle_root' return the oscal model type. Parameters: Name Type Description Default relative_path Path Relative path of the model of interest with respect to the root directory of the trestle project. required Returns: Type Description Tuple[Type[trestle.core.base_model.OscalBaseModel], str] Type of Oscal Model for the provided model Alias of that oscal model. Source code in trestle/utils/fs.py def get_relative_model_type ( relative_path : pathlib . Path ) -> Tuple [ Type [ OscalBaseModel ], str ]: \"\"\" Given the relative path of a file with respect to 'trestle_root' return the oscal model type. Args: relative_path: Relative path of the model of interest with respect to the root directory of the trestle project. Returns: Type of Oscal Model for the provided model Alias of that oscal model. \"\"\" if len ( relative_path . parts ) < 2 : raise TrestleError ( 'Insufficient path length to be a valid relative path w.r.t Trestle project root directory.' ) model_dir = relative_path . parts [ 0 ] model_relative_path = pathlib . Path ( * relative_path . parts [ 2 :]) # catalogs, profiles, etc if model_dir in const . MODEL_DIR_LIST : module_name = const . MODEL_DIR_TO_MODEL_MODULE [ model_dir ] else : raise TrestleError ( f 'No valid trestle model type directory (e.g. catalogs) found for { model_dir } .' ) model_type , model_alias = utils . get_root_model ( module_name ) full_alias = model_alias for index , part in enumerate ( model_relative_path . parts ): alias = extract_alias ( part ) if index > 0 or model_alias != alias : model_alias = alias full_alias = f ' { full_alias } . { model_alias } ' if utils . is_collection_field_type ( model_type ): model_type = utils . get_inner_type ( model_type ) else : model_type = model_type . alias_to_field_map ()[ alias ] . outer_type_ return model_type , full_alias get_singular_alias ( alias_path , relative_path = None ) \u00a4 Get the alias in the singular form from a jsonpath. If contextual_mode is True and contextual_path is None, it assumes alias_path is relative to the directory the user is running trestle from. Parameters: Name Type Description Default alias_path str The current alias element path as a string required relative_path Optional[pathlib.Path] Optional relative path (w.r.t. trestle_root) to cater for relative element paths. None Returns: Type Description str Alias as a string Source code in trestle/utils/fs.py def get_singular_alias ( alias_path : str , relative_path : Optional [ pathlib . Path ] = None ) -> str : \"\"\" Get the alias in the singular form from a jsonpath. If contextual_mode is True and contextual_path is None, it assumes alias_path is relative to the directory the user is running trestle from. Args: alias_path: The current alias element path as a string relative_path: Optional relative path (w.r.t. trestle_root) to cater for relative element paths. Returns: Alias as a string \"\"\" if len ( alias_path . strip ()) == 0 : raise err . TrestleError ( f 'Invalid jsonpath { alias_path } ' ) singular_alias : str = '' full_alias_path = alias_path if relative_path : logger . debug ( f 'get_singular_alias contextual mode: { str } ' ) _ , full_model_alias = get_relative_model_type ( relative_path ) first_alias_a = full_model_alias . split ( '.' )[ - 1 ] first_alias_b = alias_path . split ( '.' )[ 0 ] if first_alias_a == first_alias_b : full_model_alias = '.' . join ( full_model_alias . split ( '.' )[: - 1 ]) full_alias_path = '.' . join ([ full_model_alias , alias_path ]) . strip ( '.' ) path_parts = full_alias_path . split ( const . ALIAS_PATH_SEPARATOR ) logger . debug ( f 'path parts: { path_parts } ' ) model_types = [] root_model_alias = path_parts [ 0 ] found = False for module_name in const . MODEL_TYPE_TO_MODEL_MODULE . values (): model_type , model_alias = utils . get_root_model ( module_name ) if root_model_alias == model_alias : found = True model_types . append ( model_type ) break if not found : raise err . TrestleError ( f ' { root_model_alias } is an invalid root model alias.' ) if len ( path_parts ) == 1 : return root_model_alias model_type = model_types [ 0 ] # go through path parts skipping first one for i in range ( 1 , len ( path_parts )): if utils . is_collection_field_type ( model_type ): # if it is a collection type and last part is * then break if i == len ( path_parts ) - 1 and path_parts [ i ] == '*' : break # otherwise get the inner type of items in the collection model_type = utils . get_inner_type ( model_type ) # and bump i i = i + 1 else : path_part = path_parts [ i ] field_map = model_type . alias_to_field_map () if path_part not in field_map : continue field = field_map [ path_part ] model_type = field . outer_type_ model_types . append ( model_type ) last_alias = path_parts [ - 1 ] if last_alias == '*' : last_alias = path_parts [ - 2 ] # generic model and not list, so return itself fixme doc if not utils . is_collection_field_type ( model_type ): return last_alias parent_model_type = model_types [ - 2 ] try : field_map = parent_model_type . alias_to_field_map () field = field_map [ last_alias ] outer_type = field . outer_type_ inner_type = utils . get_inner_type ( outer_type ) inner_type_name = inner_type . __name__ singular_alias = utils . classname_to_alias ( inner_type_name , 'json' ) except Exception as e : raise err . TrestleError ( f 'Error in json path { alias_path } : { e } ' ) return singular_alias get_stripped_model_type ( absolute_path , absolute_trestle_root , aliases_not_to_be_stripped = None ) \u00a4 Get the stripped contextual model class and alias based on the contextual path. This function relies on the directory structure of the trestle model being edited to determine, based on the existing files and folder, which fields should be stripped from the model type represented by the path passed in as a parameter. Source code in trestle/utils/fs.py def get_stripped_model_type ( absolute_path : pathlib . Path , absolute_trestle_root : pathlib . Path , aliases_not_to_be_stripped : List [ str ] = None ) -> Tuple [ Type [ OscalBaseModel ], str ]: \"\"\" Get the stripped contextual model class and alias based on the contextual path. This function relies on the directory structure of the trestle model being edited to determine, based on the existing files and folder, which fields should be stripped from the model type represented by the path passed in as a parameter. \"\"\" # Set default value of path to Path.cwd() if aliases_not_to_be_stripped is None : aliases_not_to_be_stripped = [] singular_model_type , model_alias = get_relative_model_type ( absolute_path . relative_to ( absolute_trestle_root )) logger . debug ( f 'singular model type { singular_model_type } model alias { model_alias } ' ) # Stripped models do not apply to collection types such as List[] and Dict{} # if model type is a list or dict, generate a new wrapping model for it if utils . is_collection_field_type ( singular_model_type ): malias = model_alias . split ( '.' )[ - 1 ] class_name = utils . alias_to_classname ( malias , 'json' ) logger . debug ( f 'collection field type class name { class_name } and alias { malias } ' ) model_type = create_model ( class_name , __base__ = OscalBaseModel , __root__ = ( singular_model_type , ... )) logger . debug ( f 'model_type created: { model_type } ' ) model_type = cast ( Type [ OscalBaseModel ], model_type ) return model_type , model_alias malias = model_alias . split ( '.' )[ - 1 ] logger . debug ( f 'not collection field type, malias: { malias } ' ) if absolute_path . is_dir () and malias != extract_alias ( absolute_path . name ): split_subdir = absolute_path / malias else : split_subdir = absolute_path . parent / absolute_path . with_suffix ( '' ) . name aliases_to_be_stripped = set () if split_subdir . exists (): for f in split_subdir . iterdir (): # TODO ignore hidden files alias = extract_alias ( f . name ) if alias not in aliases_not_to_be_stripped : aliases_to_be_stripped . add ( alias ) logger . debug ( f 'aliases to be stripped: { aliases_to_be_stripped } ' ) if len ( aliases_to_be_stripped ) > 0 : model_type = singular_model_type . create_stripped_model_type ( stripped_fields_aliases = list ( aliases_to_be_stripped ) ) logger . debug ( f 'model_type: { model_type } ' ) return model_type , model_alias else : return singular_model_type , model_alias get_trestle_project_root ( path ) \u00a4 Get the trestle project root folder in the path. Source code in trestle/utils/fs.py def get_trestle_project_root ( path : pathlib . Path ) -> Optional [ pathlib . Path ]: \"\"\"Get the trestle project root folder in the path.\"\"\" while len ( path . parts ) > 1 : # it must not be the system root directory if is_valid_project_root ( path ): return path path = path . parent return None has_parent_path ( sub_path , parent_path ) \u00a4 Check if sub_path has the specified parent_dir path. Source code in trestle/utils/fs.py def has_parent_path ( sub_path : pathlib . Path , parent_path : pathlib . Path ) -> bool : \"\"\"Check if sub_path has the specified parent_dir path.\"\"\" # sub_path should be longer than parent path if len ( sub_path . parts ) < len ( parent_path . parts ): return False for i , part in enumerate ( parent_path . parts ): if part != sub_path . parts [ i ]: return False return True is_hidden ( file_path ) \u00a4 Determine whether a file is hidden based on the appropriate os attributes. This function will only work for the current file path only (e.g. not if a parent is hidden). Parameters: Name Type Description Default file_path Path The file path for which we are testing whether the file / directory is hidden. required Returns: Type Description bool Whether or not the file is file/directory is hidden. Source code in trestle/utils/fs.py def is_hidden ( file_path : pathlib . Path ) -> bool : \"\"\" Determine whether a file is hidden based on the appropriate os attributes. This function will only work for the current file path only (e.g. not if a parent is hidden). Args: file_path: The file path for which we are testing whether the file / directory is hidden. Returns: Whether or not the file is file/directory is hidden. \"\"\" # Handle windows if os . name == 'nt' : # pragma: no cover attribute = win32api . GetFileAttributes ( str ( file_path )) return attribute & ( win32con . FILE_ATTRIBUTE_HIDDEN | win32con . FILE_ATTRIBUTE_SYSTEM ) # Handle unix return file_path . stem . startswith ( '.' ) is_symlink ( file_path ) \u00a4 Is the file path a symlink. Source code in trestle/utils/fs.py def is_symlink ( file_path : pathlib . Path ) -> bool : \"\"\"Is the file path a symlink.\"\"\" if os . name == 'nt' : return file_path . suffix == '.lnk' return file_path . is_symlink () is_valid_project_model_path ( path ) \u00a4 Check if the file/directory path is a valid trestle model project. Source code in trestle/utils/fs.py def is_valid_project_model_path ( path : pathlib . Path ) -> bool : \"\"\"Check if the file/directory path is a valid trestle model project.\"\"\" root_path = get_trestle_project_root ( path ) if root_path is None : return False relative_path = path . relative_to ( str ( root_path )) if len ( relative_path . parts ) < 2 or relative_path . parts [ 0 ] not in const . MODEL_DIR_LIST : return False return True is_valid_project_root ( path ) \u00a4 Check if the path is a valid trestle project root. Source code in trestle/utils/fs.py def is_valid_project_root ( path : pathlib . Path ) -> bool : \"\"\"Check if the path is a valid trestle project root.\"\"\" trestle_dir = path / const . TRESTLE_CONFIG_DIR return trestle_dir . exists () and trestle_dir . is_dir () load_file ( file_name ) \u00a4 Load JSON or YAML file content into a dict. This is not intended to be the default load mechanism. It should only be used if a OSCAL object type is unknown but the context a user is in. Source code in trestle/utils/fs.py def load_file ( file_name : pathlib . Path ) -> Dict [ str , Any ]: \"\"\" Load JSON or YAML file content into a dict. This is not intended to be the default load mechanism. It should only be used if a OSCAL object type is unknown but the context a user is in. \"\"\" content_type = FileContentType . to_content_type ( file_name . suffix ) with file_name . open ( 'r' , encoding = const . FILE_ENCODING ) as f : if content_type == FileContentType . YAML : yaml = YAML ( typ = 'safe' ) return yaml . load ( f ) elif content_type == FileContentType . JSON : return json . load ( f ) local_and_visible ( file_path ) \u00a4 Is the file or dir local (not a symlink) and not hidden. Source code in trestle/utils/fs.py def local_and_visible ( file_path : pathlib . Path ) -> bool : \"\"\"Is the file or dir local (not a symlink) and not hidden.\"\"\" return not ( is_hidden ( file_path ) or is_symlink ( file_path )) model_type_to_model_dir ( model_type ) \u00a4 Get plural model directory from model type. Source code in trestle/utils/fs.py def model_type_to_model_dir ( model_type : str ) -> str : \"\"\"Get plural model directory from model type.\"\"\" if model_type not in const . MODEL_TYPE_LIST : raise err . TrestleError ( f 'Not a valid model type: { model_type } .' ) return const . MODEL_TYPE_TO_MODEL_DIR [ model_type ] relative_resolve ( candidate , cwd ) \u00a4 Resolve a candidate file path relative to a provided cwd. This is to circumvent bad behaviour for resolve on windows platforms where the path must exist. If a relative dir is passed it presumes the directory is relative to the PROVIDED cwd. If relative expansions exist (e.g. ../) the final result must still be within the cwd. If an absolute path is provided it tests whether the path is within the cwd or not. Source code in trestle/utils/fs.py def relative_resolve ( candidate : pathlib . Path , cwd : pathlib . Path ) -> pathlib . Path : \"\"\"Resolve a candidate file path relative to a provided cwd. This is to circumvent bad behaviour for resolve on windows platforms where the path must exist. If a relative dir is passed it presumes the directory is relative to the PROVIDED cwd. If relative expansions exist (e.g. ../) the final result must still be within the cwd. If an absolute path is provided it tests whether the path is within the cwd or not. \"\"\" # Expand user first if applicable. candidate = candidate . expanduser () if not cwd . is_absolute (): raise TrestleError ( 'Error handling current working directory. CWD is expected to be absolute.' ) if not candidate . is_absolute (): new = pathlib . Path ( cwd / candidate ) . resolve () else : new = candidate . resolve () try : new . relative_to ( cwd ) except ValueError : raise TrestleError ( f 'Provided dir { candidate } is not relative to { cwd } ' ) return new should_ignore ( name ) \u00a4 Check if the file or directory should be ignored or not. Source code in trestle/utils/fs.py def should_ignore ( name : str ) -> bool : \"\"\"Check if the file or directory should be ignored or not.\"\"\" return name [ 0 ] == '.' or name [ 0 ] == '_' handler: python","title":"fs"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs","text":"Common file system utilities.","title":"fs"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.logger","text":"","title":"logger"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.allowed_task_name","text":"Determine whether a task, which is a 'non-core-OSCAL activity/directory is allowed. Parameters: Name Type Description Default name str the task name which is assumed may take the form of a relative path for task/subtasks. required Returns: Type Description bool Whether the task name is allowed or not allowed (interferes with assumed project directories such as catalogs). Source code in trestle/utils/fs.py def allowed_task_name ( name : str ) -> bool : \"\"\"Determine whether a task, which is a 'non-core-OSCAL activity/directory is allowed. args: name: the task name which is assumed may take the form of a relative path for task/subtasks. Returns: Whether the task name is allowed or not allowed (interferes with assumed project directories such as catalogs). \"\"\" # Task must not use an OSCAL directory # Task must not self-interfere with a project pathed_name = pathlib . Path ( name ) root_path = pathed_name . parts [ 0 ] if root_path in const . MODEL_TYPE_TO_MODEL_DIR . values (): logger . error ( 'Task name is the same as an OSCAL schema name.' ) return False elif root_path [ 0 ] == '.' : logger . error ( 'Task name must not start with \".\"' ) return False elif pathed_name . suffix != '' : # Does it look like a file logger . error ( 'tasks name must not look like a file path (e.g. contain a suffix' ) return False elif '__global__' in pathed_name . parts : logger . error ( 'Task name cannot contain __global__' ) return False return True","title":"allowed_task_name()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.clean_project_sub_path","text":"Clean all directories and files in a project top level subdir. It ensures the sub_path is a child path in the project root. Source code in trestle/utils/fs.py def clean_project_sub_path ( sub_path : pathlib . Path ) -> None : \"\"\"Clean all directories and files in a project top level subdir. It ensures the sub_path is a child path in the project root. \"\"\" if sub_path . exists (): sub_path = sub_path . resolve () project_root = sub_path . parent if not get_trestle_project_root ( project_root ): raise TrestleError ( 'Path to be cleaned is not a under valid Trestle project root' ) # clean all files/directories under sub_path if sub_path . is_dir (): for item in pathlib . Path . iterdir ( sub_path ): if item . is_file (): item . unlink () elif item . is_dir (): clean_project_sub_path ( item ) sub_path . rmdir () # delete the sub_path elif sub_path . is_file (): sub_path . unlink ()","title":"clean_project_sub_path()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.extract_alias","text":"Extract alias from filename or directory name removing extensions and prefixes related to dict and list. As we need to do this for multiple parts of a path operating on strings is easier. Source code in trestle/utils/fs.py def extract_alias ( string_dir : str ) -> str : \"\"\" Extract alias from filename or directory name removing extensions and prefixes related to dict and list. As we need to do this for multiple parts of a path operating on strings is easier. \"\"\" alias = string_dir . split ( '.' )[ 0 ] . split ( const . IDX_SEP )[ - 1 ] # get suffix of file or directory name representing list or dict item return alias","title":"extract_alias()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.get_all_models","text":"Get list of all models in trestle directory as tuples (model_type, model_name). Source code in trestle/utils/fs.py def get_all_models ( root : pathlib . Path ) -> List [ Tuple [ str , str ]]: \"\"\"Get list of all models in trestle directory as tuples (model_type, model_name).\"\"\" full_list = [] for model_type in const . MODEL_TYPE_LIST : models = get_models_of_type ( model_type , root ) for m in models : full_list . append (( model_type , m )) return full_list","title":"get_all_models()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.get_contextual_file_type","text":"Return the file content type for files in the given directory, if it's a trestle project. Source code in trestle/utils/fs.py def get_contextual_file_type ( path : pathlib . Path ) -> FileContentType : \"\"\"Return the file content type for files in the given directory, if it's a trestle project.\"\"\" if not is_valid_project_model_path ( path ): raise err . TrestleError ( f 'Trestle project not found at path { path } ' ) for file_or_directory in path . iterdir (): if file_or_directory . is_file (): return FileContentType . to_content_type ( file_or_directory . suffix ) for file_or_directory in path . iterdir (): if file_or_directory . is_dir (): return get_contextual_file_type ( file_or_directory ) raise err . TrestleError ( 'No files found in the project.' )","title":"get_contextual_file_type()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.get_models_of_type","text":"Get list of model names for requested type in trestle directory. Source code in trestle/utils/fs.py def get_models_of_type ( model_type : str , root : pathlib . Path ) -> List [ str ]: \"\"\"Get list of model names for requested type in trestle directory.\"\"\" if model_type not in const . MODEL_TYPE_LIST : raise err . TrestleError ( f 'Model type { model_type } is not supported' ) # search relative to project root trestle_root = get_trestle_project_root ( root ) if not trestle_root : logger . error ( f 'Given directory { root } is not within a trestle project.' ) raise err . TrestleError ( 'Given directory is not within a trestle project.' ) # contruct path to the model file name model_dir_name = model_type_to_model_dir ( model_type ) root_model_dir = trestle_root / model_dir_name model_list = [] for f in root_model_dir . glob ( '*/' ): # only look for proper json and yaml files if not should_ignore ( f . stem ): if not f . is_dir (): logger . warn ( f 'Ignoring validation of misplaced file { f . name } ' + f 'found in the model directory, { model_dir_name } .' ) else : model_list . append ( f . stem ) return model_list","title":"get_models_of_type()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.get_project_model_path","text":"Get the base path of the trestle model project. Source code in trestle/utils/fs.py def get_project_model_path ( path : pathlib . Path ) -> Optional [ pathlib . Path ]: \"\"\"Get the base path of the trestle model project.\"\"\" if len ( path . parts ) > 2 : for i in range ( 2 , len ( path . parts )): current = pathlib . Path ( path . parts [ 0 ]) . joinpath ( * path . parts [ 1 : i + 1 ]) if is_valid_project_model_path ( current ): return current return None","title":"get_project_model_path()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.get_relative_model_type","text":"Given the relative path of a file with respect to 'trestle_root' return the oscal model type. Parameters: Name Type Description Default relative_path Path Relative path of the model of interest with respect to the root directory of the trestle project. required Returns: Type Description Tuple[Type[trestle.core.base_model.OscalBaseModel], str] Type of Oscal Model for the provided model Alias of that oscal model. Source code in trestle/utils/fs.py def get_relative_model_type ( relative_path : pathlib . Path ) -> Tuple [ Type [ OscalBaseModel ], str ]: \"\"\" Given the relative path of a file with respect to 'trestle_root' return the oscal model type. Args: relative_path: Relative path of the model of interest with respect to the root directory of the trestle project. Returns: Type of Oscal Model for the provided model Alias of that oscal model. \"\"\" if len ( relative_path . parts ) < 2 : raise TrestleError ( 'Insufficient path length to be a valid relative path w.r.t Trestle project root directory.' ) model_dir = relative_path . parts [ 0 ] model_relative_path = pathlib . Path ( * relative_path . parts [ 2 :]) # catalogs, profiles, etc if model_dir in const . MODEL_DIR_LIST : module_name = const . MODEL_DIR_TO_MODEL_MODULE [ model_dir ] else : raise TrestleError ( f 'No valid trestle model type directory (e.g. catalogs) found for { model_dir } .' ) model_type , model_alias = utils . get_root_model ( module_name ) full_alias = model_alias for index , part in enumerate ( model_relative_path . parts ): alias = extract_alias ( part ) if index > 0 or model_alias != alias : model_alias = alias full_alias = f ' { full_alias } . { model_alias } ' if utils . is_collection_field_type ( model_type ): model_type = utils . get_inner_type ( model_type ) else : model_type = model_type . alias_to_field_map ()[ alias ] . outer_type_ return model_type , full_alias","title":"get_relative_model_type()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.get_singular_alias","text":"Get the alias in the singular form from a jsonpath. If contextual_mode is True and contextual_path is None, it assumes alias_path is relative to the directory the user is running trestle from. Parameters: Name Type Description Default alias_path str The current alias element path as a string required relative_path Optional[pathlib.Path] Optional relative path (w.r.t. trestle_root) to cater for relative element paths. None Returns: Type Description str Alias as a string Source code in trestle/utils/fs.py def get_singular_alias ( alias_path : str , relative_path : Optional [ pathlib . Path ] = None ) -> str : \"\"\" Get the alias in the singular form from a jsonpath. If contextual_mode is True and contextual_path is None, it assumes alias_path is relative to the directory the user is running trestle from. Args: alias_path: The current alias element path as a string relative_path: Optional relative path (w.r.t. trestle_root) to cater for relative element paths. Returns: Alias as a string \"\"\" if len ( alias_path . strip ()) == 0 : raise err . TrestleError ( f 'Invalid jsonpath { alias_path } ' ) singular_alias : str = '' full_alias_path = alias_path if relative_path : logger . debug ( f 'get_singular_alias contextual mode: { str } ' ) _ , full_model_alias = get_relative_model_type ( relative_path ) first_alias_a = full_model_alias . split ( '.' )[ - 1 ] first_alias_b = alias_path . split ( '.' )[ 0 ] if first_alias_a == first_alias_b : full_model_alias = '.' . join ( full_model_alias . split ( '.' )[: - 1 ]) full_alias_path = '.' . join ([ full_model_alias , alias_path ]) . strip ( '.' ) path_parts = full_alias_path . split ( const . ALIAS_PATH_SEPARATOR ) logger . debug ( f 'path parts: { path_parts } ' ) model_types = [] root_model_alias = path_parts [ 0 ] found = False for module_name in const . MODEL_TYPE_TO_MODEL_MODULE . values (): model_type , model_alias = utils . get_root_model ( module_name ) if root_model_alias == model_alias : found = True model_types . append ( model_type ) break if not found : raise err . TrestleError ( f ' { root_model_alias } is an invalid root model alias.' ) if len ( path_parts ) == 1 : return root_model_alias model_type = model_types [ 0 ] # go through path parts skipping first one for i in range ( 1 , len ( path_parts )): if utils . is_collection_field_type ( model_type ): # if it is a collection type and last part is * then break if i == len ( path_parts ) - 1 and path_parts [ i ] == '*' : break # otherwise get the inner type of items in the collection model_type = utils . get_inner_type ( model_type ) # and bump i i = i + 1 else : path_part = path_parts [ i ] field_map = model_type . alias_to_field_map () if path_part not in field_map : continue field = field_map [ path_part ] model_type = field . outer_type_ model_types . append ( model_type ) last_alias = path_parts [ - 1 ] if last_alias == '*' : last_alias = path_parts [ - 2 ] # generic model and not list, so return itself fixme doc if not utils . is_collection_field_type ( model_type ): return last_alias parent_model_type = model_types [ - 2 ] try : field_map = parent_model_type . alias_to_field_map () field = field_map [ last_alias ] outer_type = field . outer_type_ inner_type = utils . get_inner_type ( outer_type ) inner_type_name = inner_type . __name__ singular_alias = utils . classname_to_alias ( inner_type_name , 'json' ) except Exception as e : raise err . TrestleError ( f 'Error in json path { alias_path } : { e } ' ) return singular_alias","title":"get_singular_alias()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.get_stripped_model_type","text":"Get the stripped contextual model class and alias based on the contextual path. This function relies on the directory structure of the trestle model being edited to determine, based on the existing files and folder, which fields should be stripped from the model type represented by the path passed in as a parameter. Source code in trestle/utils/fs.py def get_stripped_model_type ( absolute_path : pathlib . Path , absolute_trestle_root : pathlib . Path , aliases_not_to_be_stripped : List [ str ] = None ) -> Tuple [ Type [ OscalBaseModel ], str ]: \"\"\" Get the stripped contextual model class and alias based on the contextual path. This function relies on the directory structure of the trestle model being edited to determine, based on the existing files and folder, which fields should be stripped from the model type represented by the path passed in as a parameter. \"\"\" # Set default value of path to Path.cwd() if aliases_not_to_be_stripped is None : aliases_not_to_be_stripped = [] singular_model_type , model_alias = get_relative_model_type ( absolute_path . relative_to ( absolute_trestle_root )) logger . debug ( f 'singular model type { singular_model_type } model alias { model_alias } ' ) # Stripped models do not apply to collection types such as List[] and Dict{} # if model type is a list or dict, generate a new wrapping model for it if utils . is_collection_field_type ( singular_model_type ): malias = model_alias . split ( '.' )[ - 1 ] class_name = utils . alias_to_classname ( malias , 'json' ) logger . debug ( f 'collection field type class name { class_name } and alias { malias } ' ) model_type = create_model ( class_name , __base__ = OscalBaseModel , __root__ = ( singular_model_type , ... )) logger . debug ( f 'model_type created: { model_type } ' ) model_type = cast ( Type [ OscalBaseModel ], model_type ) return model_type , model_alias malias = model_alias . split ( '.' )[ - 1 ] logger . debug ( f 'not collection field type, malias: { malias } ' ) if absolute_path . is_dir () and malias != extract_alias ( absolute_path . name ): split_subdir = absolute_path / malias else : split_subdir = absolute_path . parent / absolute_path . with_suffix ( '' ) . name aliases_to_be_stripped = set () if split_subdir . exists (): for f in split_subdir . iterdir (): # TODO ignore hidden files alias = extract_alias ( f . name ) if alias not in aliases_not_to_be_stripped : aliases_to_be_stripped . add ( alias ) logger . debug ( f 'aliases to be stripped: { aliases_to_be_stripped } ' ) if len ( aliases_to_be_stripped ) > 0 : model_type = singular_model_type . create_stripped_model_type ( stripped_fields_aliases = list ( aliases_to_be_stripped ) ) logger . debug ( f 'model_type: { model_type } ' ) return model_type , model_alias else : return singular_model_type , model_alias","title":"get_stripped_model_type()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.get_trestle_project_root","text":"Get the trestle project root folder in the path. Source code in trestle/utils/fs.py def get_trestle_project_root ( path : pathlib . Path ) -> Optional [ pathlib . Path ]: \"\"\"Get the trestle project root folder in the path.\"\"\" while len ( path . parts ) > 1 : # it must not be the system root directory if is_valid_project_root ( path ): return path path = path . parent return None","title":"get_trestle_project_root()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.has_parent_path","text":"Check if sub_path has the specified parent_dir path. Source code in trestle/utils/fs.py def has_parent_path ( sub_path : pathlib . Path , parent_path : pathlib . Path ) -> bool : \"\"\"Check if sub_path has the specified parent_dir path.\"\"\" # sub_path should be longer than parent path if len ( sub_path . parts ) < len ( parent_path . parts ): return False for i , part in enumerate ( parent_path . parts ): if part != sub_path . parts [ i ]: return False return True","title":"has_parent_path()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.is_hidden","text":"Determine whether a file is hidden based on the appropriate os attributes. This function will only work for the current file path only (e.g. not if a parent is hidden). Parameters: Name Type Description Default file_path Path The file path for which we are testing whether the file / directory is hidden. required Returns: Type Description bool Whether or not the file is file/directory is hidden. Source code in trestle/utils/fs.py def is_hidden ( file_path : pathlib . Path ) -> bool : \"\"\" Determine whether a file is hidden based on the appropriate os attributes. This function will only work for the current file path only (e.g. not if a parent is hidden). Args: file_path: The file path for which we are testing whether the file / directory is hidden. Returns: Whether or not the file is file/directory is hidden. \"\"\" # Handle windows if os . name == 'nt' : # pragma: no cover attribute = win32api . GetFileAttributes ( str ( file_path )) return attribute & ( win32con . FILE_ATTRIBUTE_HIDDEN | win32con . FILE_ATTRIBUTE_SYSTEM ) # Handle unix return file_path . stem . startswith ( '.' )","title":"is_hidden()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.is_symlink","text":"Is the file path a symlink. Source code in trestle/utils/fs.py def is_symlink ( file_path : pathlib . Path ) -> bool : \"\"\"Is the file path a symlink.\"\"\" if os . name == 'nt' : return file_path . suffix == '.lnk' return file_path . is_symlink ()","title":"is_symlink()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.is_valid_project_model_path","text":"Check if the file/directory path is a valid trestle model project. Source code in trestle/utils/fs.py def is_valid_project_model_path ( path : pathlib . Path ) -> bool : \"\"\"Check if the file/directory path is a valid trestle model project.\"\"\" root_path = get_trestle_project_root ( path ) if root_path is None : return False relative_path = path . relative_to ( str ( root_path )) if len ( relative_path . parts ) < 2 or relative_path . parts [ 0 ] not in const . MODEL_DIR_LIST : return False return True","title":"is_valid_project_model_path()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.is_valid_project_root","text":"Check if the path is a valid trestle project root. Source code in trestle/utils/fs.py def is_valid_project_root ( path : pathlib . Path ) -> bool : \"\"\"Check if the path is a valid trestle project root.\"\"\" trestle_dir = path / const . TRESTLE_CONFIG_DIR return trestle_dir . exists () and trestle_dir . is_dir ()","title":"is_valid_project_root()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.load_file","text":"Load JSON or YAML file content into a dict. This is not intended to be the default load mechanism. It should only be used if a OSCAL object type is unknown but the context a user is in. Source code in trestle/utils/fs.py def load_file ( file_name : pathlib . Path ) -> Dict [ str , Any ]: \"\"\" Load JSON or YAML file content into a dict. This is not intended to be the default load mechanism. It should only be used if a OSCAL object type is unknown but the context a user is in. \"\"\" content_type = FileContentType . to_content_type ( file_name . suffix ) with file_name . open ( 'r' , encoding = const . FILE_ENCODING ) as f : if content_type == FileContentType . YAML : yaml = YAML ( typ = 'safe' ) return yaml . load ( f ) elif content_type == FileContentType . JSON : return json . load ( f )","title":"load_file()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.local_and_visible","text":"Is the file or dir local (not a symlink) and not hidden. Source code in trestle/utils/fs.py def local_and_visible ( file_path : pathlib . Path ) -> bool : \"\"\"Is the file or dir local (not a symlink) and not hidden.\"\"\" return not ( is_hidden ( file_path ) or is_symlink ( file_path ))","title":"local_and_visible()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.model_type_to_model_dir","text":"Get plural model directory from model type. Source code in trestle/utils/fs.py def model_type_to_model_dir ( model_type : str ) -> str : \"\"\"Get plural model directory from model type.\"\"\" if model_type not in const . MODEL_TYPE_LIST : raise err . TrestleError ( f 'Not a valid model type: { model_type } .' ) return const . MODEL_TYPE_TO_MODEL_DIR [ model_type ]","title":"model_type_to_model_dir()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.relative_resolve","text":"Resolve a candidate file path relative to a provided cwd. This is to circumvent bad behaviour for resolve on windows platforms where the path must exist. If a relative dir is passed it presumes the directory is relative to the PROVIDED cwd. If relative expansions exist (e.g. ../) the final result must still be within the cwd. If an absolute path is provided it tests whether the path is within the cwd or not. Source code in trestle/utils/fs.py def relative_resolve ( candidate : pathlib . Path , cwd : pathlib . Path ) -> pathlib . Path : \"\"\"Resolve a candidate file path relative to a provided cwd. This is to circumvent bad behaviour for resolve on windows platforms where the path must exist. If a relative dir is passed it presumes the directory is relative to the PROVIDED cwd. If relative expansions exist (e.g. ../) the final result must still be within the cwd. If an absolute path is provided it tests whether the path is within the cwd or not. \"\"\" # Expand user first if applicable. candidate = candidate . expanduser () if not cwd . is_absolute (): raise TrestleError ( 'Error handling current working directory. CWD is expected to be absolute.' ) if not candidate . is_absolute (): new = pathlib . Path ( cwd / candidate ) . resolve () else : new = candidate . resolve () try : new . relative_to ( cwd ) except ValueError : raise TrestleError ( f 'Provided dir { candidate } is not relative to { cwd } ' ) return new","title":"relative_resolve()"},{"location":"api_reference/trestle.utils.fs/#trestle.utils.fs.should_ignore","text":"Check if the file or directory should be ignored or not. Source code in trestle/utils/fs.py def should_ignore ( name : str ) -> bool : \"\"\"Check if the file or directory should be ignored or not.\"\"\" return name [ 0 ] == '.' or name [ 0 ] == '_' handler: python","title":"should_ignore()"},{"location":"api_reference/trestle.utils.load_distributed/","text":"trestle.utils.load_distributed \u00a4 Module to load distributed model. Functions \u00a4 load_distributed ( abs_path , abs_trestle_root , collection_type = None ) \u00a4 Given path to a model, load the model. If the model is decomposed/split/distributed,the decomposed models are loaded recursively. Parameters: Name Type Description Default abs_path Path The path to the file/directory to be loaded. required abs_trestle_root Path The trestle project root directory. required collection_type Optional[Type[Any]] The type of collection model, if it is a collection model. typing.List if the model is a list, typing.Dict if the model is additionalProperty. Defaults to None. None Returns: Type Description Tuple[Type[trestle.core.base_model.OscalBaseModel], str, Union[trestle.core.base_model.OscalBaseModel, List[trestle.core.base_model.OscalBaseModel], Dict[str, trestle.core.base_model.OscalBaseModel]]] Return a tuple of Model Type (e.g. class 'trestle.oscal.catalog.Catalog'), Model Alias (e.g. 'catalog.metadata') and Instance of the Model. If the model is decomposed/split/distributed, the instance of the model contains the decomposed models loaded recursively. Source code in trestle/utils/load_distributed.py def load_distributed ( abs_path : Path , abs_trestle_root : Path , collection_type : Optional [ Type [ Any ]] = None ) -> Tuple [ Type [ OscalBaseModel ], str , Union [ OscalBaseModel , List [ OscalBaseModel ], Dict [ str , OscalBaseModel ]]]: \"\"\" Given path to a model, load the model. If the model is decomposed/split/distributed,the decomposed models are loaded recursively. Args: abs_path: The path to the file/directory to be loaded. abs_trestle_root: The trestle project root directory. collection_type: The type of collection model, if it is a collection model. typing.List if the model is a list, typing.Dict if the model is additionalProperty. Defaults to None. Returns: Return a tuple of Model Type (e.g. class 'trestle.oscal.catalog.Catalog'), Model Alias (e.g. 'catalog.metadata') and Instance of the Model. If the model is decomposed/split/distributed, the instance of the model contains the decomposed models loaded recursively. \"\"\" # if trying to load file that does not exist, load path instead if not abs_path . exists (): abs_path = abs_path . with_name ( abs_path . stem ) if not abs_path . exists (): raise TrestleNotFoundError ( f 'File { abs_path } not found for load.' ) # If the path contains a list type model if collection_type is list : return _load_list ( abs_path , abs_trestle_root ) # If the path contains a dict type model if collection_type is dict : return _load_dict ( abs_path , abs_trestle_root ) # Get current model primary_model_type , primary_model_alias = fs . get_stripped_model_type ( abs_path , abs_trestle_root ) primary_model_instance : OscalBaseModel = None # is this an attempt to load an actual json or yaml file? content_type = FileContentType . path_to_content_type ( abs_path ) # if file is sought but it doesn't exist, ignore and load as decomposed model if FileContentType . is_readable_file ( content_type ) and abs_path . exists (): primary_model_instance = primary_model_type . oscal_read ( abs_path ) # Is model decomposed? decomposed_dir = abs_path . with_name ( abs_path . stem ) if decomposed_dir . exists (): aliases_not_to_be_stripped = [] instances_to_be_merged : List [ OscalBaseModel ] = [] for local_path in sorted ( Path . iterdir ( decomposed_dir )): if local_path . is_file (): model_type , model_alias , model_instance = load_distributed ( local_path , abs_trestle_root ) aliases_not_to_be_stripped . append ( model_alias . split ( '.' )[ - 1 ]) instances_to_be_merged . append ( model_instance ) elif local_path . is_dir (): model_type , model_alias = fs . get_stripped_model_type ( local_path , abs_trestle_root ) # Only load the directory if it is a collection model. Otherwise do nothing - it gets loaded when # iterating over the model file # If a model is just a container for a list e.g. # class Foo(OscalBaseModel): noqa: E800 # __root__: List[Bar] noqa: E800 # You need to test whether first a root key exists # then whether the outer_type of root is a collection. # Alternative is to do a try except to avoid the error for an unknown key. if model_type . is_collection_container (): # This directory is a decomposed List or Dict collection_type = model_type . get_collection_type () model_type , model_alias , model_instance = load_distributed ( local_path , abs_trestle_root , collection_type ) aliases_not_to_be_stripped . append ( model_alias . split ( '.' )[ - 1 ]) instances_to_be_merged . append ( model_instance ) primary_model_dict = {} if primary_model_instance is not None : primary_model_dict = primary_model_instance . __dict__ merged_model_type , merged_model_alias = fs . get_stripped_model_type ( abs_path , abs_trestle_root , aliases_not_to_be_stripped ) # The following use of top_level is to allow loading of a top level model by name only, e.g. MyCatalog # There may be a better overall way to approach this. top_level = len ( merged_model_alias . split ( '.' )) == 1 for i in range ( len ( aliases_not_to_be_stripped )): alias = aliases_not_to_be_stripped [ i ] instance = instances_to_be_merged [ i ] if hasattr ( instance , '__dict__' ) and '__root__' in instance . __dict__ and isinstance ( instance , OscalBaseModel ): instance = instance . __dict__ [ '__root__' ] if top_level and not primary_model_dict : primary_model_dict = instance . __dict__ else : primary_model_dict [ alias ] = instance merged_model_instance = merged_model_type ( ** primary_model_dict ) # type: ignore return merged_model_type , merged_model_alias , merged_model_instance else : return primary_model_type , primary_model_alias , primary_model_instance handler: python","title":"load_distributed"},{"location":"api_reference/trestle.utils.load_distributed/#trestle.utils.load_distributed","text":"Module to load distributed model.","title":"load_distributed"},{"location":"api_reference/trestle.utils.load_distributed/#trestle.utils.load_distributed-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.utils.load_distributed/#trestle.utils.load_distributed.load_distributed","text":"Given path to a model, load the model. If the model is decomposed/split/distributed,the decomposed models are loaded recursively. Parameters: Name Type Description Default abs_path Path The path to the file/directory to be loaded. required abs_trestle_root Path The trestle project root directory. required collection_type Optional[Type[Any]] The type of collection model, if it is a collection model. typing.List if the model is a list, typing.Dict if the model is additionalProperty. Defaults to None. None Returns: Type Description Tuple[Type[trestle.core.base_model.OscalBaseModel], str, Union[trestle.core.base_model.OscalBaseModel, List[trestle.core.base_model.OscalBaseModel], Dict[str, trestle.core.base_model.OscalBaseModel]]] Return a tuple of Model Type (e.g. class 'trestle.oscal.catalog.Catalog'), Model Alias (e.g. 'catalog.metadata') and Instance of the Model. If the model is decomposed/split/distributed, the instance of the model contains the decomposed models loaded recursively. Source code in trestle/utils/load_distributed.py def load_distributed ( abs_path : Path , abs_trestle_root : Path , collection_type : Optional [ Type [ Any ]] = None ) -> Tuple [ Type [ OscalBaseModel ], str , Union [ OscalBaseModel , List [ OscalBaseModel ], Dict [ str , OscalBaseModel ]]]: \"\"\" Given path to a model, load the model. If the model is decomposed/split/distributed,the decomposed models are loaded recursively. Args: abs_path: The path to the file/directory to be loaded. abs_trestle_root: The trestle project root directory. collection_type: The type of collection model, if it is a collection model. typing.List if the model is a list, typing.Dict if the model is additionalProperty. Defaults to None. Returns: Return a tuple of Model Type (e.g. class 'trestle.oscal.catalog.Catalog'), Model Alias (e.g. 'catalog.metadata') and Instance of the Model. If the model is decomposed/split/distributed, the instance of the model contains the decomposed models loaded recursively. \"\"\" # if trying to load file that does not exist, load path instead if not abs_path . exists (): abs_path = abs_path . with_name ( abs_path . stem ) if not abs_path . exists (): raise TrestleNotFoundError ( f 'File { abs_path } not found for load.' ) # If the path contains a list type model if collection_type is list : return _load_list ( abs_path , abs_trestle_root ) # If the path contains a dict type model if collection_type is dict : return _load_dict ( abs_path , abs_trestle_root ) # Get current model primary_model_type , primary_model_alias = fs . get_stripped_model_type ( abs_path , abs_trestle_root ) primary_model_instance : OscalBaseModel = None # is this an attempt to load an actual json or yaml file? content_type = FileContentType . path_to_content_type ( abs_path ) # if file is sought but it doesn't exist, ignore and load as decomposed model if FileContentType . is_readable_file ( content_type ) and abs_path . exists (): primary_model_instance = primary_model_type . oscal_read ( abs_path ) # Is model decomposed? decomposed_dir = abs_path . with_name ( abs_path . stem ) if decomposed_dir . exists (): aliases_not_to_be_stripped = [] instances_to_be_merged : List [ OscalBaseModel ] = [] for local_path in sorted ( Path . iterdir ( decomposed_dir )): if local_path . is_file (): model_type , model_alias , model_instance = load_distributed ( local_path , abs_trestle_root ) aliases_not_to_be_stripped . append ( model_alias . split ( '.' )[ - 1 ]) instances_to_be_merged . append ( model_instance ) elif local_path . is_dir (): model_type , model_alias = fs . get_stripped_model_type ( local_path , abs_trestle_root ) # Only load the directory if it is a collection model. Otherwise do nothing - it gets loaded when # iterating over the model file # If a model is just a container for a list e.g. # class Foo(OscalBaseModel): noqa: E800 # __root__: List[Bar] noqa: E800 # You need to test whether first a root key exists # then whether the outer_type of root is a collection. # Alternative is to do a try except to avoid the error for an unknown key. if model_type . is_collection_container (): # This directory is a decomposed List or Dict collection_type = model_type . get_collection_type () model_type , model_alias , model_instance = load_distributed ( local_path , abs_trestle_root , collection_type ) aliases_not_to_be_stripped . append ( model_alias . split ( '.' )[ - 1 ]) instances_to_be_merged . append ( model_instance ) primary_model_dict = {} if primary_model_instance is not None : primary_model_dict = primary_model_instance . __dict__ merged_model_type , merged_model_alias = fs . get_stripped_model_type ( abs_path , abs_trestle_root , aliases_not_to_be_stripped ) # The following use of top_level is to allow loading of a top level model by name only, e.g. MyCatalog # There may be a better overall way to approach this. top_level = len ( merged_model_alias . split ( '.' )) == 1 for i in range ( len ( aliases_not_to_be_stripped )): alias = aliases_not_to_be_stripped [ i ] instance = instances_to_be_merged [ i ] if hasattr ( instance , '__dict__' ) and '__root__' in instance . __dict__ and isinstance ( instance , OscalBaseModel ): instance = instance . __dict__ [ '__root__' ] if top_level and not primary_model_dict : primary_model_dict = instance . __dict__ else : primary_model_dict [ alias ] = instance merged_model_instance = merged_model_type ( ** primary_model_dict ) # type: ignore return merged_model_type , merged_model_alias , merged_model_instance else : return primary_model_type , primary_model_alias , primary_model_instance handler: python","title":"load_distributed()"},{"location":"api_reference/trestle.utils.log/","text":"trestle.utils.log \u00a4 Common logging utilities. Classes \u00a4 SpecificLevelFilter ( Filter ) \u00a4 Filter for the same level as provided by setLevel for a log handler. Python by default logs all levels above to a given destination. This makes it easy to split levels where you might log all levels to file and only errors to std.err, however, does not allow logging a specific level elsewhere. Methods \u00a4 __init__ ( self , level ) special \u00a4 Initialize providing maximum level to be pushed through the filter. Source code in trestle/utils/log.py def __init__ ( self , level : int ) -> None : \"\"\"Initialize providing maximum level to be pushed through the filter.\"\"\" self . _level = level filter ( self , log_record ) \u00a4 Filter log messages. Source code in trestle/utils/log.py def filter ( self , log_record : logging . LogRecord ) -> bool : # noqa: A003 \"\"\"Filter log messages.\"\"\" return log_record . levelno <= self . _level Functions \u00a4 exception_handler ( exception_type , exception , traceback ) \u00a4 Empty exception handler to prevent stack traceback in quiet mode. Source code in trestle/utils/log.py def exception_handler ( exception_type , exception , traceback ): \"\"\"Empty exception handler to prevent stack traceback in quiet mode.\"\"\" logging . warning ( exception ) set_global_logging_levels ( level = 20 ) \u00a4 Initialise logging. Should only be invoked by the CLI classes or similar. Source code in trestle/utils/log.py def set_global_logging_levels ( level : int = logging . INFO ) -> None : \"\"\"Initialise logging. Should only be invoked by the CLI classes or similar. \"\"\" # Remove handlers _logger . handlers = [] # set global level _logger . setLevel ( level ) # Create standard out console_out_handler = logging . StreamHandler ( sys . stdout ) console_out_handler . setLevel ( logging . INFO ) console_out_handler . addFilter ( SpecificLevelFilter ( logging . INFO )) console_debug_handler = logging . StreamHandler ( sys . stdout ) console_debug_handler . setLevel ( logging . DEBUG ) console_debug_handler . addFilter ( SpecificLevelFilter ( logging . DEBUG )) console_error_handler = logging . StreamHandler ( sys . stderr ) console_error_handler . setLevel ( logging . WARNING ) # create formatters error_formatter = logging . Formatter ( ' %(asctime)s %(name)s : %(lineno)d %(levelname)s : %(message)s ' ) console_debug_handler . setFormatter ( error_formatter ) console_error_handler . setFormatter ( error_formatter ) # add ch to logger _logger . addHandler ( console_out_handler ) _logger . addHandler ( console_error_handler ) _logger . addHandler ( console_debug_handler ) set_log_level_from_args ( args ) \u00a4 Vanity function to automatically set log levels based on verbosity flags. Source code in trestle/utils/log.py def set_log_level_from_args ( args : argparse . Namespace ) -> None : \"\"\"Vanity function to automatically set log levels based on verbosity flags.\"\"\" if args . verbose > 0 : set_global_logging_levels ( logging . DEBUG ) else : set_global_logging_levels ( logging . INFO ) sys . excepthook = exception_handler handler: python","title":"log"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log","text":"Common logging utilities.","title":"log"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log.SpecificLevelFilter","text":"Filter for the same level as provided by setLevel for a log handler. Python by default logs all levels above to a given destination. This makes it easy to split levels where you might log all levels to file and only errors to std.err, however, does not allow logging a specific level elsewhere.","title":"SpecificLevelFilter"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log.SpecificLevelFilter-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log.SpecificLevelFilter.__init__","text":"Initialize providing maximum level to be pushed through the filter. Source code in trestle/utils/log.py def __init__ ( self , level : int ) -> None : \"\"\"Initialize providing maximum level to be pushed through the filter.\"\"\" self . _level = level","title":"__init__()"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log.SpecificLevelFilter.filter","text":"Filter log messages. Source code in trestle/utils/log.py def filter ( self , log_record : logging . LogRecord ) -> bool : # noqa: A003 \"\"\"Filter log messages.\"\"\" return log_record . levelno <= self . _level","title":"filter()"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log.exception_handler","text":"Empty exception handler to prevent stack traceback in quiet mode. Source code in trestle/utils/log.py def exception_handler ( exception_type , exception , traceback ): \"\"\"Empty exception handler to prevent stack traceback in quiet mode.\"\"\" logging . warning ( exception )","title":"exception_handler()"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log.set_global_logging_levels","text":"Initialise logging. Should only be invoked by the CLI classes or similar. Source code in trestle/utils/log.py def set_global_logging_levels ( level : int = logging . INFO ) -> None : \"\"\"Initialise logging. Should only be invoked by the CLI classes or similar. \"\"\" # Remove handlers _logger . handlers = [] # set global level _logger . setLevel ( level ) # Create standard out console_out_handler = logging . StreamHandler ( sys . stdout ) console_out_handler . setLevel ( logging . INFO ) console_out_handler . addFilter ( SpecificLevelFilter ( logging . INFO )) console_debug_handler = logging . StreamHandler ( sys . stdout ) console_debug_handler . setLevel ( logging . DEBUG ) console_debug_handler . addFilter ( SpecificLevelFilter ( logging . DEBUG )) console_error_handler = logging . StreamHandler ( sys . stderr ) console_error_handler . setLevel ( logging . WARNING ) # create formatters error_formatter = logging . Formatter ( ' %(asctime)s %(name)s : %(lineno)d %(levelname)s : %(message)s ' ) console_debug_handler . setFormatter ( error_formatter ) console_error_handler . setFormatter ( error_formatter ) # add ch to logger _logger . addHandler ( console_out_handler ) _logger . addHandler ( console_error_handler ) _logger . addHandler ( console_debug_handler )","title":"set_global_logging_levels()"},{"location":"api_reference/trestle.utils.log/#trestle.utils.log.set_log_level_from_args","text":"Vanity function to automatically set log levels based on verbosity flags. Source code in trestle/utils/log.py def set_log_level_from_args ( args : argparse . Namespace ) -> None : \"\"\"Vanity function to automatically set log levels based on verbosity flags.\"\"\" if args . verbose > 0 : set_global_logging_levels ( logging . DEBUG ) else : set_global_logging_levels ( logging . INFO ) sys . excepthook = exception_handler handler: python","title":"set_log_level_from_args()"},{"location":"api_reference/trestle.utils.md_writer/","text":"trestle.utils.md_writer \u00a4 Create formatted markdown files with optional yaml header. logger \u00a4 Classes \u00a4 MDWriter \u00a4 Simple class to create markdown files. Methods \u00a4 __init__ ( self , file_path ) special \u00a4 Initialize the class. Source code in trestle/utils/md_writer.py def __init__ ( self , file_path : pathlib . Path ): \"\"\"Initialize the class.\"\"\" self . _file_path = file_path self . _lines = [] self . _indent_level = 0 self . _indent_size = 2 self . _yaml_header = None add_yaml_header ( self , header ) \u00a4 Add the yaml header. Source code in trestle/utils/md_writer.py def add_yaml_header ( self , header : dict ) -> None : \"\"\"Add the yaml header.\"\"\" self . _yaml_header = header new_header ( self , level , title ) \u00a4 Add new header. Source code in trestle/utils/md_writer.py def new_header ( self , level : int , title : str ) -> None : \"\"\"Add new header.\"\"\" # headers must be separated by blank lines self . new_paragraph () self . new_line ( '#' * level + ' ' + title ) self . new_paragraph () new_hr ( self ) \u00a4 Add horizontal rule. Source code in trestle/utils/md_writer.py def new_hr ( self ) -> None : \"\"\"Add horizontal rule.\"\"\" self . new_paragraph () self . new_line ( const . SSP_MD_HRULE_LINE ) self . new_paragraph () new_line ( self , line ) \u00a4 Add a line of text to the output. Source code in trestle/utils/md_writer.py def new_line ( self , line : str ) -> None : \"\"\"Add a line of text to the output.\"\"\" # prevent double empty lines out_line = '' if self . _is_blank ( line ) else self . _current_indent_space () + line if self . _prev_blank_line () and out_line == '' : return self . _add_line_raw ( out_line ) new_list ( self , list_ ) \u00a4 Add a list to the markdown. Source code in trestle/utils/md_writer.py def new_list ( self , list_ : List [ Any ]) -> None : \"\"\"Add a list to the markdown.\"\"\" # in general this is a list of lists # if string just write it out if isinstance ( list_ , str ): if self . _is_blank ( list_ ): self . new_paragraph () else : self . new_line ( '- ' + list_ ) # else it is a sublist so indent else : self . _add_indent_level ( 1 ) self . new_paragraph () for item in list_ : if self . _indent_level <= 0 : self . new_paragraph () self . new_list ( item ) self . _add_indent_level ( - 1 ) new_paragraph ( self ) \u00a4 Start a new paragraph. Source code in trestle/utils/md_writer.py def new_paragraph ( self ): \"\"\"Start a new paragraph.\"\"\" self . new_line ( '' ) set_indent_level ( self , level ) \u00a4 Set the current indent level. Source code in trestle/utils/md_writer.py def set_indent_level ( self , level : int ) -> None : \"\"\"Set the current indent level.\"\"\" self . _indent_level = level set_indent_step_size ( self , size ) \u00a4 Set the indent step size in spaces. Source code in trestle/utils/md_writer.py def set_indent_step_size ( self , size : int ) -> None : \"\"\"Set the indent step size in spaces.\"\"\" self . _indent_size = size write_out ( self ) \u00a4 Write out the markdown file. Source code in trestle/utils/md_writer.py def write_out ( self ) -> None : \"\"\"Write out the markdown file.\"\"\" try : self . _file_path . parent . mkdir ( exist_ok = True , parents = True ) with open ( self . _file_path , 'w' , encoding = const . FILE_ENCODING ) as f : # Make sure yaml header is written first if self . _yaml_header is not None : f . write ( '--- \\n ' ) f . write ( ' \\n ' ) yaml = YAML ( typ = 'safe' ) yaml . default_flow_style = False yaml . indent ( mapping = 2 , sequence = 4 , offset = 2 ) yaml . dump ( self . _yaml_header , f ) f . write ( ' \\n ' ) f . write ( '--- \\n ' ) f . write ( ' \\n ' . join ( self . _lines )) except IOError as e : logger . debug ( f 'md_writer error attempting to write out md file { self . _file_path } { e } ' ) raise TrestleError ( f 'Error attempting to write out md file { self . _file_path } { e } ' ) handler: python","title":"md_writer"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer","text":"Create formatted markdown files with optional yaml header.","title":"md_writer"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.logger","text":"","title":"logger"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter","text":"Simple class to create markdown files.","title":"MDWriter"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.__init__","text":"Initialize the class. Source code in trestle/utils/md_writer.py def __init__ ( self , file_path : pathlib . Path ): \"\"\"Initialize the class.\"\"\" self . _file_path = file_path self . _lines = [] self . _indent_level = 0 self . _indent_size = 2 self . _yaml_header = None","title":"__init__()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.add_yaml_header","text":"Add the yaml header. Source code in trestle/utils/md_writer.py def add_yaml_header ( self , header : dict ) -> None : \"\"\"Add the yaml header.\"\"\" self . _yaml_header = header","title":"add_yaml_header()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.new_header","text":"Add new header. Source code in trestle/utils/md_writer.py def new_header ( self , level : int , title : str ) -> None : \"\"\"Add new header.\"\"\" # headers must be separated by blank lines self . new_paragraph () self . new_line ( '#' * level + ' ' + title ) self . new_paragraph ()","title":"new_header()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.new_hr","text":"Add horizontal rule. Source code in trestle/utils/md_writer.py def new_hr ( self ) -> None : \"\"\"Add horizontal rule.\"\"\" self . new_paragraph () self . new_line ( const . SSP_MD_HRULE_LINE ) self . new_paragraph ()","title":"new_hr()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.new_line","text":"Add a line of text to the output. Source code in trestle/utils/md_writer.py def new_line ( self , line : str ) -> None : \"\"\"Add a line of text to the output.\"\"\" # prevent double empty lines out_line = '' if self . _is_blank ( line ) else self . _current_indent_space () + line if self . _prev_blank_line () and out_line == '' : return self . _add_line_raw ( out_line )","title":"new_line()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.new_list","text":"Add a list to the markdown. Source code in trestle/utils/md_writer.py def new_list ( self , list_ : List [ Any ]) -> None : \"\"\"Add a list to the markdown.\"\"\" # in general this is a list of lists # if string just write it out if isinstance ( list_ , str ): if self . _is_blank ( list_ ): self . new_paragraph () else : self . new_line ( '- ' + list_ ) # else it is a sublist so indent else : self . _add_indent_level ( 1 ) self . new_paragraph () for item in list_ : if self . _indent_level <= 0 : self . new_paragraph () self . new_list ( item ) self . _add_indent_level ( - 1 )","title":"new_list()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.new_paragraph","text":"Start a new paragraph. Source code in trestle/utils/md_writer.py def new_paragraph ( self ): \"\"\"Start a new paragraph.\"\"\" self . new_line ( '' )","title":"new_paragraph()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.set_indent_level","text":"Set the current indent level. Source code in trestle/utils/md_writer.py def set_indent_level ( self , level : int ) -> None : \"\"\"Set the current indent level.\"\"\" self . _indent_level = level","title":"set_indent_level()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.set_indent_step_size","text":"Set the indent step size in spaces. Source code in trestle/utils/md_writer.py def set_indent_step_size ( self , size : int ) -> None : \"\"\"Set the indent step size in spaces.\"\"\" self . _indent_size = size","title":"set_indent_step_size()"},{"location":"api_reference/trestle.utils.md_writer/#trestle.utils.md_writer.MDWriter.write_out","text":"Write out the markdown file. Source code in trestle/utils/md_writer.py def write_out ( self ) -> None : \"\"\"Write out the markdown file.\"\"\" try : self . _file_path . parent . mkdir ( exist_ok = True , parents = True ) with open ( self . _file_path , 'w' , encoding = const . FILE_ENCODING ) as f : # Make sure yaml header is written first if self . _yaml_header is not None : f . write ( '--- \\n ' ) f . write ( ' \\n ' ) yaml = YAML ( typ = 'safe' ) yaml . default_flow_style = False yaml . indent ( mapping = 2 , sequence = 4 , offset = 2 ) yaml . dump ( self . _yaml_header , f ) f . write ( ' \\n ' ) f . write ( '--- \\n ' ) f . write ( ' \\n ' . join ( self . _lines )) except IOError as e : logger . debug ( f 'md_writer error attempting to write out md file { self . _file_path } { e } ' ) raise TrestleError ( f 'Error attempting to write out md file { self . _file_path } { e } ' ) handler: python","title":"write_out()"},{"location":"api_reference/trestle.utils.oscal_helper/","text":"trestle.utils.oscal_helper \u00a4 OSCAL utilities. logger \u00a4 t_control \u00a4 t_control_id \u00a4 t_control_name \u00a4 t_control_prop \u00a4 t_prop_name \u00a4 t_status \u00a4 Classes \u00a4 CatalogHelper \u00a4 Catalog Helper class to assist navigating catalog. Methods \u00a4 __init__ ( self , catalog_file ) special \u00a4 Initialize. Source code in trestle/utils/oscal_helper.py def __init__ ( self , catalog_file ) -> None : \"\"\"Initialize.\"\"\" self . _catalog = Catalog . oscal_read ( pathlib . Path ( catalog_file )) logger . info ( f 'catalog: { catalog_file } ' ) exists ( self ) \u00a4 Catalog exists determination. Source code in trestle/utils/oscal_helper.py def exists ( self ) -> bool : \"\"\"Catalog exists determination.\"\"\" return self . _catalog is not None find_control_id ( self , control_name ) \u00a4 Find control_id for given control_name. Source code in trestle/utils/oscal_helper.py def find_control_id ( self , control_name : t_control_name ) -> ( t_control_id , t_status ): \"\"\"Find control_id for given control_name.\"\"\" for group in self . _catalog . groups : for control in group . controls : control_id , status = self . _find_control_id ( control , control_name ) if control_id is not None : return control_id , status return None , None handler: python","title":"oscal_helper"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper","text":"OSCAL utilities.","title":"oscal_helper"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.logger","text":"","title":"logger"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.t_control","text":"","title":"t_control"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.t_control_id","text":"","title":"t_control_id"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.t_control_name","text":"","title":"t_control_name"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.t_control_prop","text":"","title":"t_control_prop"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.t_prop_name","text":"","title":"t_prop_name"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.t_status","text":"","title":"t_status"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper-classes","text":"","title":"Classes"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.CatalogHelper","text":"Catalog Helper class to assist navigating catalog.","title":"CatalogHelper"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.CatalogHelper-methods","text":"","title":"Methods"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.CatalogHelper.__init__","text":"Initialize. Source code in trestle/utils/oscal_helper.py def __init__ ( self , catalog_file ) -> None : \"\"\"Initialize.\"\"\" self . _catalog = Catalog . oscal_read ( pathlib . Path ( catalog_file )) logger . info ( f 'catalog: { catalog_file } ' )","title":"__init__()"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.CatalogHelper.exists","text":"Catalog exists determination. Source code in trestle/utils/oscal_helper.py def exists ( self ) -> bool : \"\"\"Catalog exists determination.\"\"\" return self . _catalog is not None","title":"exists()"},{"location":"api_reference/trestle.utils.oscal_helper/#trestle.utils.oscal_helper.CatalogHelper.find_control_id","text":"Find control_id for given control_name. Source code in trestle/utils/oscal_helper.py def find_control_id ( self , control_name : t_control_name ) -> ( t_control_id , t_status ): \"\"\"Find control_id for given control_name.\"\"\" for group in self . _catalog . groups : for control in group . controls : control_id , status = self . _find_control_id ( control , control_name ) if control_id is not None : return control_id , status return None , None handler: python","title":"find_control_id()"},{"location":"api_reference/trestle.utils.trash/","text":"trestle.utils.trash \u00a4 Trestle trash module. TRESTLE_TRASH_DIR \u00a4 TRESTLE_TRASH_DIR_EXT \u00a4 TRESTLE_TRASH_FILE_EXT \u00a4 Functions \u00a4 get_trash_root ( path ) \u00a4 Find the trestle trash root path. Source code in trestle/utils/trash.py def get_trash_root ( path : pathlib . Path ) -> Optional [ pathlib . Path ]: \"\"\"Find the trestle trash root path.\"\"\" if path is None or len ( path . parts ) <= 0 : return None current = path while len ( current . parts ) > 1 : # it must not be the system root directory trash_dir = current / TRESTLE_TRASH_DIR if trash_dir . exists () and trash_dir . is_dir (): return trash_dir current = current . parent return None recover ( dest_content_path , delete_trash = False ) \u00a4 Recover the specified file or directory from the trash directory. dest_content_path: destination content path that needs to be recovered from trash It recovers the latest path content from trash if exists Source code in trestle/utils/trash.py def recover ( dest_content_path : pathlib . Path , delete_trash : bool = False ) -> None : \"\"\"Recover the specified file or directory from the trash directory. dest_content_path: destination content path that needs to be recovered from trash It recovers the latest path content from trash if exists \"\"\" if dest_content_path . suffix != '' : return recover_file ( dest_content_path , delete_trash ) else : return recover_dir ( dest_content_path , delete_trash ) recover_dir ( dest_dir_path , delete_trash = False ) \u00a4 Move the specified dir from the trash directory. dest_dir_path: destination path of the directory inside a trestle project It recovers the latest directory and contents from trash if exists Source code in trestle/utils/trash.py def recover_dir ( dest_dir_path : pathlib . Path , delete_trash : bool = False ) -> None : \"\"\"Move the specified dir from the trash directory. dest_dir_path: destination path of the directory inside a trestle project It recovers the latest directory and contents from trash if exists \"\"\" trash_dir_path = to_trash_dir_path ( dest_dir_path ) if not ( trash_dir_path . exists () and trash_dir_path . is_dir ()): raise AssertionError ( f 'Specified path \" { dest_dir_path } \" could not be found in trash' ) # move all files/directories under sub_path for item_path in pathlib . Path . iterdir ( trash_dir_path ): if item_path . is_file (): recover_file ( to_origin_file_path ( item_path ), delete_trash ) elif item_path . is_dir (): recover_dir ( to_origin_dir_path ( item_path ), delete_trash ) if delete_trash : trash_dir_path . rmdir () recover_file ( file_path , delete_trash = False ) \u00a4 Recover the specified file from the trash directory. It recovers the latest file from trash if exists Source code in trestle/utils/trash.py def recover_file ( file_path : pathlib . Path , delete_trash : bool = False ) -> None : \"\"\"Recover the specified file from the trash directory. It recovers the latest file from trash if exists \"\"\" trash_file_path = to_trash_file_path ( file_path ) if not trash_file_path . exists (): raise AssertionError ( f 'Specified path \" { file_path } \" could not be found in trash' ) file_path . parent . mkdir ( exist_ok = True , parents = True ) copyfile ( trash_file_path , file_path ) if delete_trash : trash_file_path . unlink () store ( content_path , delete_content = False ) \u00a4 Move the specified file or directory to the trash directory. It overwrites the previous file or directory if exists Source code in trestle/utils/trash.py def store ( content_path : pathlib . Path , delete_content : bool = False ) -> None : \"\"\"Move the specified file or directory to the trash directory. It overwrites the previous file or directory if exists \"\"\" if content_path . is_file (): return store_file ( content_path , delete_content ) elif content_path . is_dir (): return store_dir ( content_path , delete_content ) store_dir ( dir_path , delete_source = False ) \u00a4 Move the specified dir to the trash directory. It overwrites the previous directory and contents if exists Source code in trestle/utils/trash.py def store_dir ( dir_path : pathlib . Path , delete_source : bool = False ) -> None : \"\"\"Move the specified dir to the trash directory. It overwrites the previous directory and contents if exists \"\"\" if not dir_path . is_dir (): raise AssertionError ( f 'Specified path \" { dir_path } \" is not a dir' ) # move all files/directories under sub_path for item_path in pathlib . Path . iterdir ( dir_path ): if item_path . is_file (): store_file ( item_path , delete_source ) elif item_path . is_dir (): store_dir ( item_path , delete_source ) if delete_source : dir_path . rmdir () store_file ( file_path , delete_source = False ) \u00a4 Move the specified file to the trash directory. It overwrites the previous file if exists Source code in trestle/utils/trash.py def store_file ( file_path : pathlib . Path , delete_source : bool = False ) -> None : \"\"\"Move the specified file to the trash directory. It overwrites the previous file if exists \"\"\" if not file_path . is_file (): raise AssertionError ( f 'Specified path \" { file_path } \" is not a file' ) trash_file_path = to_trash_file_path ( file_path ) trash_file_path . parent . mkdir ( exist_ok = True , parents = True ) copyfile ( file_path , trash_file_path ) if delete_source : file_path . unlink () to_origin_dir_path ( trash_dir_path ) \u00a4 Convert trash content path to origin path. Source code in trestle/utils/trash.py def to_origin_dir_path ( trash_dir_path : pathlib . Path ) -> pathlib . Path : \"\"\"Convert trash content path to origin path.\"\"\" if trash_dir_path . suffix != '' and trash_dir_path . suffix . endswith ( TRESTLE_TRASH_FILE_EXT ): raise AssertionError ( f 'Given path \" { trash_dir_path } \" is a trash file, not a valid trash directory' ) trestle_root = fs . get_trestle_project_root ( trash_dir_path ) if trestle_root is None : raise AssertionError ( f 'Directory path \" { trash_dir_path } \" is not in a valid trestle project path' ) trash_root = get_trash_root ( trash_dir_path ) if trash_root is None : raise AssertionError ( f 'Directory path \" { trash_dir_path } \" is not in a valid trestle trash path' ) if not fs . has_parent_path ( trash_dir_path , trash_root ): raise AssertionError ( f 'Directory path \" { trash_dir_path } \" is not a valid trash dir path' ) relative_path = trash_dir_path . relative_to ( str ( trash_root )) origin_path_parts : List [ str ] = [] for item in relative_path . parts : parts = item . split ( TRESTLE_TRASH_DIR_EXT ) origin_path_parts . append ( parts [ 0 ]) origin_relative_path = pathlib . Path ( '/' . join ( origin_path_parts )) origin_path = trestle_root / origin_relative_path return origin_path to_origin_file_path ( trash_file_path ) \u00a4 Convert trash file path to origin file path. Source code in trestle/utils/trash.py def to_origin_file_path ( trash_file_path : pathlib . Path ) -> pathlib . Path : \"\"\"Convert trash file path to origin file path.\"\"\" if trash_file_path . suffix != TRESTLE_TRASH_FILE_EXT : raise AssertionError ( f 'File path \" { trash_file_path } \" is not a valid trash file path' ) origin_dir = to_origin_dir_path ( trash_file_path . parent ) file_parts = trash_file_path . name . split ( TRESTLE_TRASH_FILE_EXT ) origin_file_path = origin_dir / file_parts [ 0 ] return origin_file_path to_origin_path ( trash_content_path ) \u00a4 Convert the trash path to origin path. Source code in trestle/utils/trash.py def to_origin_path ( trash_content_path : pathlib . Path ) -> pathlib . Path : \"\"\"Convert the trash path to origin path.\"\"\" if trash_content_path . suffix == TRESTLE_TRASH_FILE_EXT : return to_origin_file_path ( trash_content_path ) else : return to_origin_dir_path ( trash_content_path ) to_trash_dir_path ( dir_path ) \u00a4 Construct the path to the trashed file. Source code in trestle/utils/trash.py def to_trash_dir_path ( dir_path : pathlib . Path ) -> pathlib . Path : \"\"\"Construct the path to the trashed file.\"\"\" absolute_path = dir_path . resolve () root_path = fs . get_trestle_project_root ( absolute_path ) if root_path is None : raise AssertionError ( f 'Directory path \" { absolute_path } \" is not in a valid trestle project' ) trestle_trash_path = root_path / TRESTLE_TRASH_DIR relative_path = absolute_path . relative_to ( str ( root_path )) if len ( relative_path . parts ) == 0 : trash_dir = trestle_trash_path else : trash_dir = trestle_trash_path / f ' { relative_path }{ TRESTLE_TRASH_DIR_EXT } ' return trash_dir to_trash_file_path ( file_path ) \u00a4 Construct the path to the trashed file. Source code in trestle/utils/trash.py def to_trash_file_path ( file_path : pathlib . Path ) -> pathlib . Path : \"\"\"Construct the path to the trashed file.\"\"\" trash_file_dir = to_trash_dir_path ( file_path . parent ) trash_file_path = trash_file_dir / f ' { file_path . name }{ TRESTLE_TRASH_FILE_EXT } ' return trash_file_path to_trash_path ( path ) \u00a4 Convert the dir or file path to apporpriate trash file or dir path. Source code in trestle/utils/trash.py def to_trash_path ( path : pathlib . Path ) -> pathlib . Path : \"\"\"Convert the dir or file path to apporpriate trash file or dir path.\"\"\" if path . suffix != '' : return to_trash_file_path ( path ) else : return to_trash_dir_path ( path ) handler: python","title":"trash"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash","text":"Trestle trash module.","title":"trash"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.TRESTLE_TRASH_DIR","text":"","title":"TRESTLE_TRASH_DIR"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.TRESTLE_TRASH_DIR_EXT","text":"","title":"TRESTLE_TRASH_DIR_EXT"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.TRESTLE_TRASH_FILE_EXT","text":"","title":"TRESTLE_TRASH_FILE_EXT"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash-functions","text":"","title":"Functions"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.get_trash_root","text":"Find the trestle trash root path. Source code in trestle/utils/trash.py def get_trash_root ( path : pathlib . Path ) -> Optional [ pathlib . Path ]: \"\"\"Find the trestle trash root path.\"\"\" if path is None or len ( path . parts ) <= 0 : return None current = path while len ( current . parts ) > 1 : # it must not be the system root directory trash_dir = current / TRESTLE_TRASH_DIR if trash_dir . exists () and trash_dir . is_dir (): return trash_dir current = current . parent return None","title":"get_trash_root()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.recover","text":"Recover the specified file or directory from the trash directory. dest_content_path: destination content path that needs to be recovered from trash It recovers the latest path content from trash if exists Source code in trestle/utils/trash.py def recover ( dest_content_path : pathlib . Path , delete_trash : bool = False ) -> None : \"\"\"Recover the specified file or directory from the trash directory. dest_content_path: destination content path that needs to be recovered from trash It recovers the latest path content from trash if exists \"\"\" if dest_content_path . suffix != '' : return recover_file ( dest_content_path , delete_trash ) else : return recover_dir ( dest_content_path , delete_trash )","title":"recover()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.recover_dir","text":"Move the specified dir from the trash directory. dest_dir_path: destination path of the directory inside a trestle project It recovers the latest directory and contents from trash if exists Source code in trestle/utils/trash.py def recover_dir ( dest_dir_path : pathlib . Path , delete_trash : bool = False ) -> None : \"\"\"Move the specified dir from the trash directory. dest_dir_path: destination path of the directory inside a trestle project It recovers the latest directory and contents from trash if exists \"\"\" trash_dir_path = to_trash_dir_path ( dest_dir_path ) if not ( trash_dir_path . exists () and trash_dir_path . is_dir ()): raise AssertionError ( f 'Specified path \" { dest_dir_path } \" could not be found in trash' ) # move all files/directories under sub_path for item_path in pathlib . Path . iterdir ( trash_dir_path ): if item_path . is_file (): recover_file ( to_origin_file_path ( item_path ), delete_trash ) elif item_path . is_dir (): recover_dir ( to_origin_dir_path ( item_path ), delete_trash ) if delete_trash : trash_dir_path . rmdir ()","title":"recover_dir()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.recover_file","text":"Recover the specified file from the trash directory. It recovers the latest file from trash if exists Source code in trestle/utils/trash.py def recover_file ( file_path : pathlib . Path , delete_trash : bool = False ) -> None : \"\"\"Recover the specified file from the trash directory. It recovers the latest file from trash if exists \"\"\" trash_file_path = to_trash_file_path ( file_path ) if not trash_file_path . exists (): raise AssertionError ( f 'Specified path \" { file_path } \" could not be found in trash' ) file_path . parent . mkdir ( exist_ok = True , parents = True ) copyfile ( trash_file_path , file_path ) if delete_trash : trash_file_path . unlink ()","title":"recover_file()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.store","text":"Move the specified file or directory to the trash directory. It overwrites the previous file or directory if exists Source code in trestle/utils/trash.py def store ( content_path : pathlib . Path , delete_content : bool = False ) -> None : \"\"\"Move the specified file or directory to the trash directory. It overwrites the previous file or directory if exists \"\"\" if content_path . is_file (): return store_file ( content_path , delete_content ) elif content_path . is_dir (): return store_dir ( content_path , delete_content )","title":"store()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.store_dir","text":"Move the specified dir to the trash directory. It overwrites the previous directory and contents if exists Source code in trestle/utils/trash.py def store_dir ( dir_path : pathlib . Path , delete_source : bool = False ) -> None : \"\"\"Move the specified dir to the trash directory. It overwrites the previous directory and contents if exists \"\"\" if not dir_path . is_dir (): raise AssertionError ( f 'Specified path \" { dir_path } \" is not a dir' ) # move all files/directories under sub_path for item_path in pathlib . Path . iterdir ( dir_path ): if item_path . is_file (): store_file ( item_path , delete_source ) elif item_path . is_dir (): store_dir ( item_path , delete_source ) if delete_source : dir_path . rmdir ()","title":"store_dir()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.store_file","text":"Move the specified file to the trash directory. It overwrites the previous file if exists Source code in trestle/utils/trash.py def store_file ( file_path : pathlib . Path , delete_source : bool = False ) -> None : \"\"\"Move the specified file to the trash directory. It overwrites the previous file if exists \"\"\" if not file_path . is_file (): raise AssertionError ( f 'Specified path \" { file_path } \" is not a file' ) trash_file_path = to_trash_file_path ( file_path ) trash_file_path . parent . mkdir ( exist_ok = True , parents = True ) copyfile ( file_path , trash_file_path ) if delete_source : file_path . unlink ()","title":"store_file()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.to_origin_dir_path","text":"Convert trash content path to origin path. Source code in trestle/utils/trash.py def to_origin_dir_path ( trash_dir_path : pathlib . Path ) -> pathlib . Path : \"\"\"Convert trash content path to origin path.\"\"\" if trash_dir_path . suffix != '' and trash_dir_path . suffix . endswith ( TRESTLE_TRASH_FILE_EXT ): raise AssertionError ( f 'Given path \" { trash_dir_path } \" is a trash file, not a valid trash directory' ) trestle_root = fs . get_trestle_project_root ( trash_dir_path ) if trestle_root is None : raise AssertionError ( f 'Directory path \" { trash_dir_path } \" is not in a valid trestle project path' ) trash_root = get_trash_root ( trash_dir_path ) if trash_root is None : raise AssertionError ( f 'Directory path \" { trash_dir_path } \" is not in a valid trestle trash path' ) if not fs . has_parent_path ( trash_dir_path , trash_root ): raise AssertionError ( f 'Directory path \" { trash_dir_path } \" is not a valid trash dir path' ) relative_path = trash_dir_path . relative_to ( str ( trash_root )) origin_path_parts : List [ str ] = [] for item in relative_path . parts : parts = item . split ( TRESTLE_TRASH_DIR_EXT ) origin_path_parts . append ( parts [ 0 ]) origin_relative_path = pathlib . Path ( '/' . join ( origin_path_parts )) origin_path = trestle_root / origin_relative_path return origin_path","title":"to_origin_dir_path()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.to_origin_file_path","text":"Convert trash file path to origin file path. Source code in trestle/utils/trash.py def to_origin_file_path ( trash_file_path : pathlib . Path ) -> pathlib . Path : \"\"\"Convert trash file path to origin file path.\"\"\" if trash_file_path . suffix != TRESTLE_TRASH_FILE_EXT : raise AssertionError ( f 'File path \" { trash_file_path } \" is not a valid trash file path' ) origin_dir = to_origin_dir_path ( trash_file_path . parent ) file_parts = trash_file_path . name . split ( TRESTLE_TRASH_FILE_EXT ) origin_file_path = origin_dir / file_parts [ 0 ] return origin_file_path","title":"to_origin_file_path()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.to_origin_path","text":"Convert the trash path to origin path. Source code in trestle/utils/trash.py def to_origin_path ( trash_content_path : pathlib . Path ) -> pathlib . Path : \"\"\"Convert the trash path to origin path.\"\"\" if trash_content_path . suffix == TRESTLE_TRASH_FILE_EXT : return to_origin_file_path ( trash_content_path ) else : return to_origin_dir_path ( trash_content_path )","title":"to_origin_path()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.to_trash_dir_path","text":"Construct the path to the trashed file. Source code in trestle/utils/trash.py def to_trash_dir_path ( dir_path : pathlib . Path ) -> pathlib . Path : \"\"\"Construct the path to the trashed file.\"\"\" absolute_path = dir_path . resolve () root_path = fs . get_trestle_project_root ( absolute_path ) if root_path is None : raise AssertionError ( f 'Directory path \" { absolute_path } \" is not in a valid trestle project' ) trestle_trash_path = root_path / TRESTLE_TRASH_DIR relative_path = absolute_path . relative_to ( str ( root_path )) if len ( relative_path . parts ) == 0 : trash_dir = trestle_trash_path else : trash_dir = trestle_trash_path / f ' { relative_path }{ TRESTLE_TRASH_DIR_EXT } ' return trash_dir","title":"to_trash_dir_path()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.to_trash_file_path","text":"Construct the path to the trashed file. Source code in trestle/utils/trash.py def to_trash_file_path ( file_path : pathlib . Path ) -> pathlib . Path : \"\"\"Construct the path to the trashed file.\"\"\" trash_file_dir = to_trash_dir_path ( file_path . parent ) trash_file_path = trash_file_dir / f ' { file_path . name }{ TRESTLE_TRASH_FILE_EXT } ' return trash_file_path","title":"to_trash_file_path()"},{"location":"api_reference/trestle.utils.trash/#trestle.utils.trash.to_trash_path","text":"Convert the dir or file path to apporpriate trash file or dir path. Source code in trestle/utils/trash.py def to_trash_path ( path : pathlib . Path ) -> pathlib . Path : \"\"\"Convert the dir or file path to apporpriate trash file or dir path.\"\"\" if path . suffix != '' : return to_trash_file_path ( path ) else : return to_trash_dir_path ( path ) handler: python","title":"to_trash_path()"},{"location":"assets/","text":"Assets \u00a4 Binary artifacts for documenation should be stored here.","title":"Assets"},{"location":"assets/#assets","text":"Binary artifacts for documenation should be stored here.","title":"Assets"},{"location":"contributing/DCO/","text":"Developer Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 660 York Street, Suite 102, San Francisco, CA 94110 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.","title":"Developer Certificate of Originality"},{"location":"contributing/mkdocs_contributing/","text":"{!CONTRIBUTING.md!}","title":"Contributing overview"},{"location":"contributing/website/","text":"Developing for the trestle documentation website \u00a4 This page describes the developing for the trestle (website) which is deployed at https://ibm.github.io/compliance-trestle . Documentation for use within the github project. \u00a4 Github uses certain files within a project such as /README.md , /CONTRIBUTING.md , LICENSE which are specifically indexed by github. The current documentation website build reuses some of these files, specifically: Contents of README.md Entirety of LICENSE Entirety of CONTRIBUTING.md Entirety of CODE_OF_CONDUCT.md Entirety of CHANGELOG.md For this to work correctly no relative links within the github repository should exist. All links should be absolute to the documentation website. Build system and local testing of the website. \u00a4 Trestle has adopted the mkdocs system to generate this website using a small number of extensions to mkdocs. The website can be viewed locally from a clone of the compliance-trestle repo by running make docs-serve in the root directory bringing the website up at https://localhost:8000 . If you experience issues run make develop to ensure the appropriate markdown extensions are in your python environment. make docs-serve performs two actions: Runs the custom automation script scripts/website_automation.py Serves the website on localhost. All documentation specific assets are stored within the ./docs folder. The exception being mkdocs.yml which configures the documentation tree. Before opening a PR users should ensure: No warnings are generated by mkdocs All markdown documents within ./docs are included in the website navigation defined in mkdocs.yml trestle custom automation. \u00a4 In order to streamline development, and ensure the website remains up to date, a small automation script has been built. This automation script principally ensures that: License is consistent with github.com All modules are in the reference documentation running make docs-automation will ensure that the website is ready to deploy. Building the models from the OSCAL schemas. \u00a4 The creation of the OSCAL models in trestle/oscal is a multi-step process: The oscal schemas are downloaded as modules from NIST into the nist-source/json/schema directory. The script scripts/gen-oscal.py loads each schema file and converts it to pydantic/python with datamodel-codegen . The generated python files may need some fixup, so a separate script scripts/fix_any.py is run on each file. Note that there is one schema specific to IBM needs and it is loaded from 3rd-party-schema-documents/IBM_target_schema_v1.0.0.json . The whole process is handled in the Makefile by make code-gen . A normal user would never need to run this but developers may need to, particularly if there are changes to the OSCAL schemas. Also note that the depenedent tools, pydantic and datamodel-codegen, may get updated by doing a fresh make install or make develop , which may then result in a change to the model files. Items handled by fix_any.py . \u00a4 The original motivation for this script was to replace numerous situations where the type assigned to a given variable was simply Any , which meant no type enforcement would apply for that variable, defeating the purpose of the strict type enforcement provided by Pydantic. As of this writing the number of such cases has been reduced to just one - which is handled by the script. Other issues handled by the script are: The current OSCAL schemas have situations where objects are defined within different classes in a schema using the same name, but the contents of those classes may or may not be different. datamodel-codegen handles this by creating separate classes as needed and appending 1, 2 etc. to the names, keeping them distinct. The resulting high level classes that reference them behave as expected, but if components of those classes are added in a granular way by a user or developer, the correct index must be used. To reduce side-effects of the duplicate classes, classes are checked to see if they are identical or not. If they are identical the separate 1, 2 classes are culled and references to them are pointed to the non-indexed class. Currently there are 5 classes that require a separate '1' version: Status, Type, Entry, LocalDefinitions, and Action . In order to guarantee there are no induced forward references in the files, the classes are reordered to minimize the need for forwards, and any that can't be avoided are explicitly provided at the bottom of the file. The generated files have many classes that simply have a __root__ element defined, along with a description. Such classes don't have particular value in such a simple form and could instead simply be defined in the parent class. Seeing the changes induced by fix_any.py on the classes. \u00a4 As a convenience for developers, a separate script, scripts/order_classes.py is available, which orders the classes in a given file alphabetically. This way, if you use the script on files before and after applying fix_any.py you can use a normal diff tool to see the changes made. This is strictly as a development tool for doing the comparison and the resulting files will not work since they will have forward references.","title":"Documentation website"},{"location":"contributing/website/#developing-for-the-trestle-documentation-website","text":"This page describes the developing for the trestle (website) which is deployed at https://ibm.github.io/compliance-trestle .","title":"Developing for the trestle documentation website"},{"location":"contributing/website/#documentation-for-use-within-the-github-project","text":"Github uses certain files within a project such as /README.md , /CONTRIBUTING.md , LICENSE which are specifically indexed by github. The current documentation website build reuses some of these files, specifically: Contents of README.md Entirety of LICENSE Entirety of CONTRIBUTING.md Entirety of CODE_OF_CONDUCT.md Entirety of CHANGELOG.md For this to work correctly no relative links within the github repository should exist. All links should be absolute to the documentation website.","title":"Documentation for use within the github project."},{"location":"contributing/website/#build-system-and-local-testing-of-the-website","text":"Trestle has adopted the mkdocs system to generate this website using a small number of extensions to mkdocs. The website can be viewed locally from a clone of the compliance-trestle repo by running make docs-serve in the root directory bringing the website up at https://localhost:8000 . If you experience issues run make develop to ensure the appropriate markdown extensions are in your python environment. make docs-serve performs two actions: Runs the custom automation script scripts/website_automation.py Serves the website on localhost. All documentation specific assets are stored within the ./docs folder. The exception being mkdocs.yml which configures the documentation tree. Before opening a PR users should ensure: No warnings are generated by mkdocs All markdown documents within ./docs are included in the website navigation defined in mkdocs.yml","title":"Build system and local testing of the website."},{"location":"contributing/website/#trestle-custom-automation","text":"In order to streamline development, and ensure the website remains up to date, a small automation script has been built. This automation script principally ensures that: License is consistent with github.com All modules are in the reference documentation running make docs-automation will ensure that the website is ready to deploy.","title":"trestle custom automation."},{"location":"contributing/website/#building-the-models-from-the-oscal-schemas","text":"The creation of the OSCAL models in trestle/oscal is a multi-step process: The oscal schemas are downloaded as modules from NIST into the nist-source/json/schema directory. The script scripts/gen-oscal.py loads each schema file and converts it to pydantic/python with datamodel-codegen . The generated python files may need some fixup, so a separate script scripts/fix_any.py is run on each file. Note that there is one schema specific to IBM needs and it is loaded from 3rd-party-schema-documents/IBM_target_schema_v1.0.0.json . The whole process is handled in the Makefile by make code-gen . A normal user would never need to run this but developers may need to, particularly if there are changes to the OSCAL schemas. Also note that the depenedent tools, pydantic and datamodel-codegen, may get updated by doing a fresh make install or make develop , which may then result in a change to the model files.","title":"Building the models from the OSCAL schemas."},{"location":"contributing/website/#items-handled-by-fix_anypy","text":"The original motivation for this script was to replace numerous situations where the type assigned to a given variable was simply Any , which meant no type enforcement would apply for that variable, defeating the purpose of the strict type enforcement provided by Pydantic. As of this writing the number of such cases has been reduced to just one - which is handled by the script. Other issues handled by the script are: The current OSCAL schemas have situations where objects are defined within different classes in a schema using the same name, but the contents of those classes may or may not be different. datamodel-codegen handles this by creating separate classes as needed and appending 1, 2 etc. to the names, keeping them distinct. The resulting high level classes that reference them behave as expected, but if components of those classes are added in a granular way by a user or developer, the correct index must be used. To reduce side-effects of the duplicate classes, classes are checked to see if they are identical or not. If they are identical the separate 1, 2 classes are culled and references to them are pointed to the non-indexed class. Currently there are 5 classes that require a separate '1' version: Status, Type, Entry, LocalDefinitions, and Action . In order to guarantee there are no induced forward references in the files, the classes are reordered to minimize the need for forwards, and any that can't be avoided are explicitly provided at the bottom of the file. The generated files have many classes that simply have a __root__ element defined, along with a description. Such classes don't have particular value in such a simple form and could instead simply be defined in the parent class.","title":"Items handled by fix_any.py."},{"location":"contributing/website/#seeing-the-changes-induced-by-fix_anypy-on-the-classes","text":"As a convenience for developers, a separate script, scripts/order_classes.py is available, which orders the classes in a given file alphabetically. This way, if you use the script on files before and after applying fix_any.py you can use a normal diff tool to see the changes made. This is strictly as a development tool for doing the comparison and the resulting files will not work since they will have forward references.","title":"Seeing the changes induced by fix_any.py on the classes."},{"location":"reference/third-party-result-schema-SCC/","text":"Schema of Assessment Results for Interchange with IBM Cloud Security and Compliance Center, SCC \u00a4 This document depicts the structure and guidelines for creating an OSCAL result object which would be generated by various transformers for different tools such as Tanium to OSCAL and OSCO to OSCAL. Policy Validation Points (PVPs) such as toolchain that directly generate OSCAL results for sending to SCC Exchange API should follow the structure and guidelines described below. The overall object will be a results element of OSCAL Assessment Result schema wrapped in an outer json object as shown below. { results: [ { result object ... }, { result object ... } ] } Each result object represents one assessment scan and should have the required properties as per OSCAL schema. The start and end represents the start and end datetime of evidence collection activity. The end is optional. In addition to these, the result object may contain details about inventory, list of observations (checks) for each inventory, and findings for profile level controls (such as NIST). { \"uuid\": \"cd54e9bf-f4d3-45d6-ae3b-6e8255847dc2\", \"title\": \"Tanium\", \"description\": \"Tanium\", \"start\": \"2021-04-05T20:19:11.000+00:00\", \"end\": \"2021-04-05T20:19:11.000+00:00\", \"local-definitions\": { }, \"reviewed-controls\": { }, \"observations\": { }, \"findings\": { } } The inventory should be included in local-definitions if observations are being reported, but can be omitted if only findings are being reported. As reviewed-controls is required as per OSCAL schema, an empty object should be included if only observations are being reported. Optionally, the controls for which the status is being reported in findings can be captured here. The actual assessment checks being performed on different inventory items should be captured under observations . This can be omitted if only findings are being reported. As findings is required as per OSCAL schema, an empty object can be included if only observations are being reported and no profile controls are being assessed. Otherwise, findings should include the status of profile controls. General Guidance \u00a4 All the properties in the source result (tool specific format) should be represented as properties of the right objects in OSCAL such as inventory-items, observations, etc. The properties should have a tool specific namespace to convey that the property names are exactly same as what is coming from specific tools. Not everything from the non-OSCAL results are relevant (required) by SCC. The relevant properties MUST have SCC specific class such as scc_inventory_item_id, scc_result, etc. This will help SCC identify corresponding information from different tools and handle them appropriately. SCC MUST store the original property names so that when these are retrieved by tools later, they can get back the same name-value pairs as was there in the input data. There must be a pre-defined set of properties (class values) from SCC for each result object component such as inventory-items , components , observations , etc. A property value MUST be a string of appropriate format. Transforms \u00a4 File Unification SCC class for OSCO and Tanium to OSCAL.xlsx contains the SCC class mapping from Tanium and OpenShift Compliance Operator results data to OSCAL. Although other properties are constructed during transformation, only items having SCC class are shown in the table. Inventory \u00a4 Inventory is captured under local-definitions in result object. local-definitions can be used to represent inventory items, components, users, etc. For our purposes only components and inventory-items will be used. Components should be used to represent software, services, etc. whereas inventory-items represent specific machines, VMs, network devices, etc. The inventory items should be associated to a component through implemented-components as shown below. \"local-definitions\": { \"components\": { \"b3e243a1-4660-4f5a-aa85-159b4b2d69ce\": { \"type\": \"Operating System\", \"title\": \"Windows 10\", \"description\": \"Windows 10\", \"status\": { \"state\": \"operational\" } } }, \"inventory-items\": [ { \"uuid\": \"c9fb63cf-d21e-4584-88f8-44d67ea33ba0\", \"description\": \"inventory\", \"props\": [ { \"name\": \"Computer Name\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"cmp-wn-2106.demo.tanium.local\" }, { \"name\": \"Tanium Client IP Address\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"192.168.0.120\", \"class\": \"scc_inventory_item_id\" }, { \"name\": \"IP Address\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"['fe80::cd44:4154:61e8:53ae', '192.168.0.120']\" }, { \"name\": \"Count\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1\" } ], \"implemented-components\": [ { \"component-uuid\": \"b3e243a1-4660-4f5a-aa85-159b4b2d69ce\" } ] }, ... ] } Inventory items have one required property with class scc_inventory_item_id as shown above. Similarly in some other tool's result the scc_inventory_item_id may be specified through some other property. It is the job of the transformation code to appropriately specify class values for required properties. As shown above, non-mandatory property such as count from native result does not have any class specified. The type of the inventory item is specified by linking it to component via implemented-components . Observation \u00a4 Loosely speaking, an observation object equates with results from a goal check, and the observation is uniquely identified by a uuid, e.g., { \"uuid\" : \"00000000-0000-4000-9999-000000000016\", \"description\" : \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\", ... } A sample observation object generated from Tanium result looks like - { \"uuid\": \"74b605f8-7e8c-41b3-9514-2412692fbe01\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-11T22:34:03+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"c8919d2b-3300-4f3f-98f6-15a7104c2e04\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-11T22:34:03.000+00:00\" } An observation has five required properties - scc_predefined_profile - identifies both Goal based Profiles (eg CIS-benchmarks, IBM BP etc) and Control/Regulation based Profiles (eg. NIST, FS Cloud etc). The way the integrators or customers will differentiate between the two types of profiles is by the OSCAL element used i.e., Goal based Profiles are defined in the observation element which carries the goal id (check id) and posture. Control/Regulation based Profiles are defined in the finding element which carries the control posture, the custom profile name, and the mapping of the goal results to NIST controls scc_check_version, scc_predefined_profile_version - gives the version of the goal/profile i.e., CIS benchmark version used for check. scc_goal_description, scc_check_name_id - gives the specific goal check (rule) that was assessed from the scc_predefined_profile. scc_result - gives the outcome of performing the check. Possible values are - \"pass\", \"fail\", \"error\" , \"unknown\", \"notchecked\", \"notapplicable\". scc_timestamp - datetime for this observation. This can be date and time when this observation was performed or reported. Targets such as systems or services MUST be a subject in the observation, which MUST be identified by a uuid-ref value pointing to the subject in local-definitions. Finding \u00a4 A finding represents the assessment of a profile control such as NIST 800-53: AC-1 and the related observations. A sample finding object looks like - { \"uuid\": \"cde35fad-3922-4046-8ef8-830e77ffd75a\", \"title\": \"800-53: IA-5\", \"description\": \"800-53: IA-5\", \"target\": { \"type\": \"statement-id\", \"id-ref\": \"800-53: IA-5\", \"props\": [ { \"name\": \"Profile\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Windows 10 - NIST 800-53\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"version: 1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Custom ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"800-53: IA-5\", } ], \"status\": \"not-satisfied\" }, \"related-observations\": [ { \"observation-uuid\": \"d8bd1785-b95f-45c9-9fa8-32a362845102\" }, { \"observation-uuid\": \"d06c6f13-5006-4e2d-b3f3-5cdb577473b1\" } ] } A finding has two required property scc_predefined_profile that gives the name of the profile whose control is specified in \"id-ref\", and scc_predefined_profile_version . If there is no finding associated with a PVP, a single finding will be created (to preserve valid OSCAL) where the UUID maps to a 'all zeros' UUID e.g.: { \"uuid\": \"00000000-0000-4000-8000-000000000000\", \"title\": \"No finding\", \"description\": \"No finding.\" }","title":"Integrating with IBM SCC"},{"location":"reference/third-party-result-schema-SCC/#schema-of-assessment-results-for-interchange-with-ibm-cloud-security-and-compliance-center-scc","text":"This document depicts the structure and guidelines for creating an OSCAL result object which would be generated by various transformers for different tools such as Tanium to OSCAL and OSCO to OSCAL. Policy Validation Points (PVPs) such as toolchain that directly generate OSCAL results for sending to SCC Exchange API should follow the structure and guidelines described below. The overall object will be a results element of OSCAL Assessment Result schema wrapped in an outer json object as shown below. { results: [ { result object ... }, { result object ... } ] } Each result object represents one assessment scan and should have the required properties as per OSCAL schema. The start and end represents the start and end datetime of evidence collection activity. The end is optional. In addition to these, the result object may contain details about inventory, list of observations (checks) for each inventory, and findings for profile level controls (such as NIST). { \"uuid\": \"cd54e9bf-f4d3-45d6-ae3b-6e8255847dc2\", \"title\": \"Tanium\", \"description\": \"Tanium\", \"start\": \"2021-04-05T20:19:11.000+00:00\", \"end\": \"2021-04-05T20:19:11.000+00:00\", \"local-definitions\": { }, \"reviewed-controls\": { }, \"observations\": { }, \"findings\": { } } The inventory should be included in local-definitions if observations are being reported, but can be omitted if only findings are being reported. As reviewed-controls is required as per OSCAL schema, an empty object should be included if only observations are being reported. Optionally, the controls for which the status is being reported in findings can be captured here. The actual assessment checks being performed on different inventory items should be captured under observations . This can be omitted if only findings are being reported. As findings is required as per OSCAL schema, an empty object can be included if only observations are being reported and no profile controls are being assessed. Otherwise, findings should include the status of profile controls.","title":"Schema of Assessment Results for Interchange with IBM Cloud Security and Compliance Center, SCC"},{"location":"reference/third-party-result-schema-SCC/#general-guidance","text":"All the properties in the source result (tool specific format) should be represented as properties of the right objects in OSCAL such as inventory-items, observations, etc. The properties should have a tool specific namespace to convey that the property names are exactly same as what is coming from specific tools. Not everything from the non-OSCAL results are relevant (required) by SCC. The relevant properties MUST have SCC specific class such as scc_inventory_item_id, scc_result, etc. This will help SCC identify corresponding information from different tools and handle them appropriately. SCC MUST store the original property names so that when these are retrieved by tools later, they can get back the same name-value pairs as was there in the input data. There must be a pre-defined set of properties (class values) from SCC for each result object component such as inventory-items , components , observations , etc. A property value MUST be a string of appropriate format.","title":"General Guidance"},{"location":"reference/third-party-result-schema-SCC/#transforms","text":"File Unification SCC class for OSCO and Tanium to OSCAL.xlsx contains the SCC class mapping from Tanium and OpenShift Compliance Operator results data to OSCAL. Although other properties are constructed during transformation, only items having SCC class are shown in the table.","title":"Transforms"},{"location":"reference/third-party-result-schema-SCC/#inventory","text":"Inventory is captured under local-definitions in result object. local-definitions can be used to represent inventory items, components, users, etc. For our purposes only components and inventory-items will be used. Components should be used to represent software, services, etc. whereas inventory-items represent specific machines, VMs, network devices, etc. The inventory items should be associated to a component through implemented-components as shown below. \"local-definitions\": { \"components\": { \"b3e243a1-4660-4f5a-aa85-159b4b2d69ce\": { \"type\": \"Operating System\", \"title\": \"Windows 10\", \"description\": \"Windows 10\", \"status\": { \"state\": \"operational\" } } }, \"inventory-items\": [ { \"uuid\": \"c9fb63cf-d21e-4584-88f8-44d67ea33ba0\", \"description\": \"inventory\", \"props\": [ { \"name\": \"Computer Name\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"cmp-wn-2106.demo.tanium.local\" }, { \"name\": \"Tanium Client IP Address\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"192.168.0.120\", \"class\": \"scc_inventory_item_id\" }, { \"name\": \"IP Address\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"['fe80::cd44:4154:61e8:53ae', '192.168.0.120']\" }, { \"name\": \"Count\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1\" } ], \"implemented-components\": [ { \"component-uuid\": \"b3e243a1-4660-4f5a-aa85-159b4b2d69ce\" } ] }, ... ] } Inventory items have one required property with class scc_inventory_item_id as shown above. Similarly in some other tool's result the scc_inventory_item_id may be specified through some other property. It is the job of the transformation code to appropriately specify class values for required properties. As shown above, non-mandatory property such as count from native result does not have any class specified. The type of the inventory item is specified by linking it to component via implemented-components .","title":"Inventory"},{"location":"reference/third-party-result-schema-SCC/#observation","text":"Loosely speaking, an observation object equates with results from a goal check, and the observation is uniquely identified by a uuid, e.g., { \"uuid\" : \"00000000-0000-4000-9999-000000000016\", \"description\" : \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\", ... } A sample observation object generated from Tanium result looks like - { \"uuid\": \"74b605f8-7e8c-41b3-9514-2412692fbe01\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-11T22:34:03+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"c8919d2b-3300-4f3f-98f6-15a7104c2e04\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-11T22:34:03.000+00:00\" } An observation has five required properties - scc_predefined_profile - identifies both Goal based Profiles (eg CIS-benchmarks, IBM BP etc) and Control/Regulation based Profiles (eg. NIST, FS Cloud etc). The way the integrators or customers will differentiate between the two types of profiles is by the OSCAL element used i.e., Goal based Profiles are defined in the observation element which carries the goal id (check id) and posture. Control/Regulation based Profiles are defined in the finding element which carries the control posture, the custom profile name, and the mapping of the goal results to NIST controls scc_check_version, scc_predefined_profile_version - gives the version of the goal/profile i.e., CIS benchmark version used for check. scc_goal_description, scc_check_name_id - gives the specific goal check (rule) that was assessed from the scc_predefined_profile. scc_result - gives the outcome of performing the check. Possible values are - \"pass\", \"fail\", \"error\" , \"unknown\", \"notchecked\", \"notapplicable\". scc_timestamp - datetime for this observation. This can be date and time when this observation was performed or reported. Targets such as systems or services MUST be a subject in the observation, which MUST be identified by a uuid-ref value pointing to the subject in local-definitions.","title":"Observation"},{"location":"reference/third-party-result-schema-SCC/#finding","text":"A finding represents the assessment of a profile control such as NIST 800-53: AC-1 and the related observations. A sample finding object looks like - { \"uuid\": \"cde35fad-3922-4046-8ef8-830e77ffd75a\", \"title\": \"800-53: IA-5\", \"description\": \"800-53: IA-5\", \"target\": { \"type\": \"statement-id\", \"id-ref\": \"800-53: IA-5\", \"props\": [ { \"name\": \"Profile\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Windows 10 - NIST 800-53\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"version: 1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Custom ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"800-53: IA-5\", } ], \"status\": \"not-satisfied\" }, \"related-observations\": [ { \"observation-uuid\": \"d8bd1785-b95f-45c9-9fa8-32a362845102\" }, { \"observation-uuid\": \"d06c6f13-5006-4e2d-b3f3-5cdb577473b1\" } ] } A finding has two required property scc_predefined_profile that gives the name of the profile whose control is specified in \"id-ref\", and scc_predefined_profile_version . If there is no finding associated with a PVP, a single finding will be created (to preserve valid OSCAL) where the UUID maps to a 'all zeros' UUID e.g.: { \"uuid\": \"00000000-0000-4000-8000-000000000000\", \"title\": \"No finding\", \"description\": \"No finding.\" }","title":"Finding"},{"location":"specifications/","text":"Specifications \u00a4 This directory is used for storing trestle specs . Trestle specs are architectural documents which span across multiple issues / stories. They are not intended to be end-user documentation, rather, documentation for trestle developers. This folder will not be part of the documentation website.","title":"Specifications"},{"location":"specifications/#specifications","text":"This directory is used for storing trestle specs . Trestle specs are architectural documents which span across multiple issues / stories. They are not intended to be end-user documentation, rather, documentation for trestle developers. This folder will not be part of the documentation website.","title":"Specifications"},{"location":"specifications/caching_spec/","text":"Trestle caching architecture \u00a4 Purpose \u00a4 This document describes the caching strategy and behaviour that is supported by trestle for 3rd party artifacts that are external to the core repo. A principle that trestle is expected to uphold is that documents, unless the user explicitly contradicts, are referred to by reference. For example the user should not be expected to manually copy NIST 800-53 into their working directory (although they may). They would refer to the source document such that integrity is maintained. Given this a caching strategy is required to manage these documents - especially when operating in a CICD world. Users \u00a4 The scope of this document is for developers. Once implemented additional documentation should be created for end users. Scope \u00a4 This document is only concerned with links which refer to other OSCAL schema objects. External references (say to an xccdf document) are not considered. Cache update behaviour. \u00a4 When a user requests an external resource the cache MUST be used unless the user provides a cache update flag --update-cache . If the cache cannot update the default behaviour of --update-cache is failure. If --update-cache-opportunistic is enabled instead the cache will be updated where possible. Note: Documents MUST only be committed to the cache if and only if they are valid OSCAL. Note that OSCAL validation in this context is defined ONLY as meeting the minimum requirements of the json schema. Types of external references. \u00a4 NIST defines many types of referential links within the OSCAL schema. Here trestle is interested in supporting a subset of these links. In particular these links are characterized specifically by the fact that they refer to 'upstream' OSCAL artifacts. The table below identifies the references covered by this document. Schema Json path ( represents array or named keys) Refers to profile profile.imports[*].href catalog or profile SSP system-security-plan.import-profile.href profile component-definition component-definition.import-component-definition[*].href component-definition component-definition component-definition.component[*].control-implementations[*].source catalog or profile target-definition target-definition.import-target-definition[*].href target-definition target-definition target-definition.component[*].control-implementations[*].source catalog or profile assessment-plan assessment-plan.import-ssp.href ssp assessment-results assessment-results.import-ap.href assessment-plan It is worth noting that the profile definition is recursive. In some of the OSCAL schemas these objects are optional. For the purposes of trestle these references are considered mandatory and it is expected that trestle will error if fields are missing. In particular while (say as an example) import-ssp is optional in assessment-plan, without it we cannot validate if the control ids provided by the user make sense. Trestle cache dir. \u00a4 The trestle cache will be located within the .trestle project. Files are organised within that directory by hostname irrespective of protocol. The resulting structure is shown below. . \u251c\u2500\u2500 .trestle \u2502 \u2514\u2500\u2500cache \u2502 \u251c\u2500\u2500 localhost (./ or file) \u2502 \u2502 \u251c\u2500\u2500 __rel__ \u2502 | | \u2514\u2500\u2500 __parent__/__parent__/catalog.json \u2502 \u2502 \u2514\u2500\u2500 __abs__ \u2502 | \u2514\u2500\u2500 /__root__/home/username/oscal/catalog.jon \u2502 \u2514\u2500\u2500 hostname.com \u2502 \u2514\u2500\u2500 path/to/file.json \u2502 | \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 target-definitions \u2502 \u251c\u2500\u2500 system-security-plans \u2502 \u251c\u2500\u2500 assessment-plans \u2502 \u251c\u2500\u2500 assessment-results \u2502 \u2514\u2500\u2500 plan-of-action-and-milestones \u251c\u2500\u2500 catalogs \u251c\u2500\u2500 profiles \u251c\u2500\u2500 target-definitions \u251c\u2500\u2500 component-definitions \u251c\u2500\u2500 system-security-plans \u251c\u2500\u2500 assessment-plans \u251c\u2500\u2500 assessment-results \u2514\u2500\u2500 plan-of-action-and-milestones Note that localhost has special treatment to manage relative file references. The cache MAY live within version control system depending on desired behaviour. It is recommended that caches live within the VCS to allow end to end tracking. Keeping the cache within the VCS implies that callers of trestle MUST explicitly ask for the cache to be refreshed if required. The cache MUST NOT reference files within the current trestle context. The cache MUST NOT support 'distributed OSCAL files'. All files MUST be a valid OSCAL schema in a single document. Supported protocols / methods \u00a4 Local file system (aka localhost) \u00a4 The local file system MAY be used as a storage mechanism other files. Local storage is unique in that references may be relative at all times (i.e. it does not make sense to expand the directory path). Given this localhost has two sub directories: __abs__ for absolute paths, __rel__ for relative paths. In addition to this relative paths MAY contain ../ references to the parent directory. This is represented by __parent__ / Local storage may be referred to by the following mechanisms: file://path/to/file.json => .trestle/cache/localhost/__rel__/path/to/file.json file:///abspath/to/file.json => .trestle/cache/localhost/__abs__/abspath/to/file.json /root/file/path.json => .trestle/cache/localhost/__abs__/root/file/path.json ../relative/path/to/file.json => .trestle/cache/localhost/__rel__/__parent__/relative/path/to/file.json http(s)://localhost/path/to/file.json => .trestle/cache/localhost/__abs__/path/to/file.json References MUST NOT address the local trestle context. References outside of the local trestle context WILL NOT be tested for whether they are in the trestle context. For localhost both absolute and relative references are supported. All calls over http(s) are treated as absolute paths. Authorization / authentication is as in the following section. Relative path reference root \u00a4 Relative paths are setup assuming the they are with respect to the editing directory. Relative paths in the dist directory should be reworked to include dist . HTTPS ONLY \u00a4 HTTPS endpoints are supported for trestle. Unencrypted HTTP endpoints are not. The simplest case is similar to this: https://sample.com/path/to/file.json => .trestle/cache/sample.com/path/to/file.json For all workloads the http header application type SHOULD match the file type provided. Trestle MAY warn on inconsistencies, however, the file extension takes precedence. For endpoints where an extension is NOT provided https://sample.com/path/to/file or https://sample.com/path/to/file/ Trestle will: Infer file type from http headers write out the file to object.{filetype} file. If a user requests https://sample.com/path/to/file/object.json trestle MUST warn the user of the risk of conflicts with automatically generated names. Authentication: \u00a4 As the caching supports HTTPS ONLY, there is support for HTTP basic authentication. Attempting HTTP based authentication MUST cause errors, as would attempting HTTP fetching in any case. Credentials MUST NOT be stored in cleartext. NOT ALLOWED: https://username:password@sample.com/path/to/file/ Credentials MUST be referred to by moustache templates e.g.: https://{{username_var}}:{{password_var}}@sample.com/path/to/file/ where the \"moustache\" templated variables refer to environmental variables in the user's environment. Support for non standard behaviour is supported on specific domains (see below). Specific domains over https \u00a4 Given the requirement for raw source files users may have issues accurately accessing a resource on many domains for which they can get the raw form. This is also true on environments where 2-Factor Authentication may protect accessing user facing sites. Specific site support is expected to expand based on user's requirements. Github.com / github.enterprisename.com \u00a4 Support in this section is intended to cover both github.com and github enterprise deployed at github.{business url}.com. The first scenario is for unauthenticated access. Unauthenticated access may be addressed through either the 'UI' form URL e.g.: https://github.com/IBM/compliance-trestle/blob/develop/LICENSE OR the raw form URL: https://raw.githubusercontent.com/IBM/compliance-trestle/develop/LICENSE Both URLs would map to the following path in trestle cache: .trestle/cache/github.com/IBM/compliance-trestle/develop/LICENSE For authenticated scenarios both domains are supported, however, tokens provided to the raw website e.g.: https://raw.githubusercontent.com/IBM/compliance-trestle/develop/LICENSE?token=TOKEN are ignored. Trestle MUST warn users when github tokens are included. To support authentication with github username / password authentication MUST NOT be supported. API authentication through personal access tokens is supported. API tokens will be read from the environment with the following patterns: github.com: GITHUB_API_TOKEN github.business.com: GITHUB_BUSINESS_API_TOKEN In the future ssh based authentication may be supported. SFTP \u00a4 SFTP support may be supported. The URI takes the following form: sftp://{{username}}:{{password}}@sftp.com:/path/to/file.json OR sftp://username:{{password}}@sftp.com:/path/to/file.json OR sftp://username@sftp.com:/path/to/file.json All user provided paths WILL be expanded to the full path. (e.g. if ~ is used to represent the home directory.) a SSH key may be provided by environmental variable SSH_KEY . Potential future supported methods. \u00a4 It is anticipated that some applications may be provided with specialised support from the trestle framework. The current list being considered includes: git (over https or ssh) TBA \u00a4","title":"Trestle caching architecture"},{"location":"specifications/caching_spec/#trestle-caching-architecture","text":"","title":"Trestle caching architecture"},{"location":"specifications/caching_spec/#purpose","text":"This document describes the caching strategy and behaviour that is supported by trestle for 3rd party artifacts that are external to the core repo. A principle that trestle is expected to uphold is that documents, unless the user explicitly contradicts, are referred to by reference. For example the user should not be expected to manually copy NIST 800-53 into their working directory (although they may). They would refer to the source document such that integrity is maintained. Given this a caching strategy is required to manage these documents - especially when operating in a CICD world.","title":"Purpose"},{"location":"specifications/caching_spec/#users","text":"The scope of this document is for developers. Once implemented additional documentation should be created for end users.","title":"Users"},{"location":"specifications/caching_spec/#scope","text":"This document is only concerned with links which refer to other OSCAL schema objects. External references (say to an xccdf document) are not considered.","title":"Scope"},{"location":"specifications/caching_spec/#cache-update-behaviour","text":"When a user requests an external resource the cache MUST be used unless the user provides a cache update flag --update-cache . If the cache cannot update the default behaviour of --update-cache is failure. If --update-cache-opportunistic is enabled instead the cache will be updated where possible. Note: Documents MUST only be committed to the cache if and only if they are valid OSCAL. Note that OSCAL validation in this context is defined ONLY as meeting the minimum requirements of the json schema.","title":"Cache update behaviour."},{"location":"specifications/caching_spec/#types-of-external-references","text":"NIST defines many types of referential links within the OSCAL schema. Here trestle is interested in supporting a subset of these links. In particular these links are characterized specifically by the fact that they refer to 'upstream' OSCAL artifacts. The table below identifies the references covered by this document. Schema Json path ( represents array or named keys) Refers to profile profile.imports[*].href catalog or profile SSP system-security-plan.import-profile.href profile component-definition component-definition.import-component-definition[*].href component-definition component-definition component-definition.component[*].control-implementations[*].source catalog or profile target-definition target-definition.import-target-definition[*].href target-definition target-definition target-definition.component[*].control-implementations[*].source catalog or profile assessment-plan assessment-plan.import-ssp.href ssp assessment-results assessment-results.import-ap.href assessment-plan It is worth noting that the profile definition is recursive. In some of the OSCAL schemas these objects are optional. For the purposes of trestle these references are considered mandatory and it is expected that trestle will error if fields are missing. In particular while (say as an example) import-ssp is optional in assessment-plan, without it we cannot validate if the control ids provided by the user make sense.","title":"Types of external references."},{"location":"specifications/caching_spec/#trestle-cache-dir","text":"The trestle cache will be located within the .trestle project. Files are organised within that directory by hostname irrespective of protocol. The resulting structure is shown below. . \u251c\u2500\u2500 .trestle \u2502 \u2514\u2500\u2500cache \u2502 \u251c\u2500\u2500 localhost (./ or file) \u2502 \u2502 \u251c\u2500\u2500 __rel__ \u2502 | | \u2514\u2500\u2500 __parent__/__parent__/catalog.json \u2502 \u2502 \u2514\u2500\u2500 __abs__ \u2502 | \u2514\u2500\u2500 /__root__/home/username/oscal/catalog.jon \u2502 \u2514\u2500\u2500 hostname.com \u2502 \u2514\u2500\u2500 path/to/file.json \u2502 | \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 target-definitions \u2502 \u251c\u2500\u2500 system-security-plans \u2502 \u251c\u2500\u2500 assessment-plans \u2502 \u251c\u2500\u2500 assessment-results \u2502 \u2514\u2500\u2500 plan-of-action-and-milestones \u251c\u2500\u2500 catalogs \u251c\u2500\u2500 profiles \u251c\u2500\u2500 target-definitions \u251c\u2500\u2500 component-definitions \u251c\u2500\u2500 system-security-plans \u251c\u2500\u2500 assessment-plans \u251c\u2500\u2500 assessment-results \u2514\u2500\u2500 plan-of-action-and-milestones Note that localhost has special treatment to manage relative file references. The cache MAY live within version control system depending on desired behaviour. It is recommended that caches live within the VCS to allow end to end tracking. Keeping the cache within the VCS implies that callers of trestle MUST explicitly ask for the cache to be refreshed if required. The cache MUST NOT reference files within the current trestle context. The cache MUST NOT support 'distributed OSCAL files'. All files MUST be a valid OSCAL schema in a single document.","title":"Trestle cache dir."},{"location":"specifications/caching_spec/#supported-protocols-methods","text":"","title":"Supported protocols / methods"},{"location":"specifications/caching_spec/#local-file-system-aka-localhost","text":"The local file system MAY be used as a storage mechanism other files. Local storage is unique in that references may be relative at all times (i.e. it does not make sense to expand the directory path). Given this localhost has two sub directories: __abs__ for absolute paths, __rel__ for relative paths. In addition to this relative paths MAY contain ../ references to the parent directory. This is represented by __parent__ / Local storage may be referred to by the following mechanisms: file://path/to/file.json => .trestle/cache/localhost/__rel__/path/to/file.json file:///abspath/to/file.json => .trestle/cache/localhost/__abs__/abspath/to/file.json /root/file/path.json => .trestle/cache/localhost/__abs__/root/file/path.json ../relative/path/to/file.json => .trestle/cache/localhost/__rel__/__parent__/relative/path/to/file.json http(s)://localhost/path/to/file.json => .trestle/cache/localhost/__abs__/path/to/file.json References MUST NOT address the local trestle context. References outside of the local trestle context WILL NOT be tested for whether they are in the trestle context. For localhost both absolute and relative references are supported. All calls over http(s) are treated as absolute paths. Authorization / authentication is as in the following section.","title":"Local file system (aka localhost)"},{"location":"specifications/caching_spec/#relative-path-reference-root","text":"Relative paths are setup assuming the they are with respect to the editing directory. Relative paths in the dist directory should be reworked to include dist .","title":"Relative path reference root"},{"location":"specifications/caching_spec/#https-only","text":"HTTPS endpoints are supported for trestle. Unencrypted HTTP endpoints are not. The simplest case is similar to this: https://sample.com/path/to/file.json => .trestle/cache/sample.com/path/to/file.json For all workloads the http header application type SHOULD match the file type provided. Trestle MAY warn on inconsistencies, however, the file extension takes precedence. For endpoints where an extension is NOT provided https://sample.com/path/to/file or https://sample.com/path/to/file/ Trestle will: Infer file type from http headers write out the file to object.{filetype} file. If a user requests https://sample.com/path/to/file/object.json trestle MUST warn the user of the risk of conflicts with automatically generated names.","title":"HTTPS ONLY"},{"location":"specifications/caching_spec/#authentication","text":"As the caching supports HTTPS ONLY, there is support for HTTP basic authentication. Attempting HTTP based authentication MUST cause errors, as would attempting HTTP fetching in any case. Credentials MUST NOT be stored in cleartext. NOT ALLOWED: https://username:password@sample.com/path/to/file/ Credentials MUST be referred to by moustache templates e.g.: https://{{username_var}}:{{password_var}}@sample.com/path/to/file/ where the \"moustache\" templated variables refer to environmental variables in the user's environment. Support for non standard behaviour is supported on specific domains (see below).","title":"Authentication:"},{"location":"specifications/caching_spec/#specific-domains-over-https","text":"Given the requirement for raw source files users may have issues accurately accessing a resource on many domains for which they can get the raw form. This is also true on environments where 2-Factor Authentication may protect accessing user facing sites. Specific site support is expected to expand based on user's requirements.","title":"Specific domains over https"},{"location":"specifications/caching_spec/#githubcom-githubenterprisenamecom","text":"Support in this section is intended to cover both github.com and github enterprise deployed at github.{business url}.com. The first scenario is for unauthenticated access. Unauthenticated access may be addressed through either the 'UI' form URL e.g.: https://github.com/IBM/compliance-trestle/blob/develop/LICENSE OR the raw form URL: https://raw.githubusercontent.com/IBM/compliance-trestle/develop/LICENSE Both URLs would map to the following path in trestle cache: .trestle/cache/github.com/IBM/compliance-trestle/develop/LICENSE For authenticated scenarios both domains are supported, however, tokens provided to the raw website e.g.: https://raw.githubusercontent.com/IBM/compliance-trestle/develop/LICENSE?token=TOKEN are ignored. Trestle MUST warn users when github tokens are included. To support authentication with github username / password authentication MUST NOT be supported. API authentication through personal access tokens is supported. API tokens will be read from the environment with the following patterns: github.com: GITHUB_API_TOKEN github.business.com: GITHUB_BUSINESS_API_TOKEN In the future ssh based authentication may be supported.","title":"Github.com / github.enterprisename.com"},{"location":"specifications/caching_spec/#sftp","text":"SFTP support may be supported. The URI takes the following form: sftp://{{username}}:{{password}}@sftp.com:/path/to/file.json OR sftp://username:{{password}}@sftp.com:/path/to/file.json OR sftp://username@sftp.com:/path/to/file.json All user provided paths WILL be expanded to the full path. (e.g. if ~ is used to represent the home directory.) a SSH key may be provided by environmental variable SSH_KEY .","title":"SFTP"},{"location":"specifications/caching_spec/#potential-future-supported-methods","text":"It is anticipated that some applications may be provided with specialised support from the trestle framework. The current list being considered includes: git (over https or ssh) TBA","title":"Potential future supported methods."},{"location":"specifications/caching_spec/#_1","text":"","title":""},{"location":"specifications/trestle-spec/","text":"Trestle CLI Specifications (v0.1.0) \u00a4 Table of Contents \u00a4 Purpose Users Scope Trestle commands Draft commands Future work Deploy commands Monitor commands Reporting commands Purpose \u00a4 This document contains detail specifications of the Trestle CLI commands. Trestle offers various commands to simplify operations at different steps in compliance management and reporting. Trestle assumes all security and compliance specifications and requirements are expressed in OSCAL format. Users \u00a4 Trestle aims at compliance engineers who are familiar with various software development tools such as Git, CI/CD and command line tools. Users of Trestle are also expected to be comfortable with editing OSCAL files in YAML/JSON/XML format. Scope \u00a4 The scope of this document is to describe the purpose and expected behaviour of various trestle commands for manipulating OSCAL documents ONLY. This will not be all of trestle. Workflow commands will be subsequent / expanded on this. Definitions \u00a4 trestle project directory : directory containing a .trestle folder as the result of trestle init . Also referred as $TRESTLE_BASEDIR in this document. trestle model directory : directory representing the source folder for manipulating an OSCAL model in a trestle project. This type of directory is usually created by commands such as trestle create and trestle import . Examples of a trestle model directory named mymodel under different types of models are: $TRESTLE_BASEDIR/catalogs/mymodel $TRESTLE_BASEDIR/profiles/mymodel $TRESTLE_BASEDIR/component-definitions/mymodel $TRESTLE_BASEDIR/system-security-plans/mymodel $TRESTLE_BASEDIR/assessment-plans/mymodel $TRESTLE_BASEDIR/assessment-results/mymodel $TRESTLE_BASEDIR/plan-of-action-and-milestones/mymodel Trestle Commands \u00a4 Draft Commands \u00a4 For the draft phase of compliance engineering, trestle provides the following commands to facilitate various draft related operations. trestle init \u00a4 This command will create a trestle project in the current directory with necessary directory structure and trestle artefacts. For example, if we run trestle init in a directory, it will create a directory structure like below for different artefacts: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 system-security-plans \u2502 \u251c\u2500\u2500 assessment-plans \u2502 \u251c\u2500\u2500 assessment-results \u2502 \u2514\u2500\u2500 plan-of-action-and-milestones \u251c\u2500\u2500 catalogs \u251c\u2500\u2500 profiles \u251c\u2500\u2500 component-definitions \u251c\u2500\u2500 system-security-plans \u251c\u2500\u2500 assessment-plans \u251c\u2500\u2500 assessment-results \u2514\u2500\u2500 plan-of-action-and-milestones .trestle directory is a special directory containing various trestle artefacts to help run various other commands. dist directory will contain the merged or assembled version of the models located on the source model directories (at the project root level) which are: catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results and plan-of-action-and-milestones . Notice that trestle is a highly opinionated tool and, therefore, the names of the files and directories that are created by any of the trestle commands and subcommands MUST NOT be changed manually. trestle create \u00a4 This command will create an initial directory structure for various OSCAL models including sample JSON files and subdirectories representing parts of the model. For example, trestle create catalog -o nist800-53 will create a directory structure of a sample catalog like below. . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u251c\u2500\u2500 00001__control.json \u2514\u2500\u2500 00002__control.json ... Notice that subdirectories under a trestle directory model such as $TRESTLE_BASEDIR/catalogs/nist800-53/catalog and $TRESTLE_BASEDIR/catalogs/nist800-53/catalog/groups represent a decomposition of the original file. The subdirectory catalog means that the original catalog.json was split and the split parts are inside the catalog directory (in this case groups ). Every subdirectory in a trestle directory model should have a corresponding .json or .yaml file with the same name. Exceptions to that rule are named fields (dicts) such as catalog.metadata.responsible-parties and array fields such as catalog.groups . When those subcomponents are split/expanded each file or subdirectory under them represents an item of the collection. Because of that, if a corresponding groups.json | groups.yaml file were to exist, its contents would just be an empty representation of that collection and the user would need to be careful never to edit that file. Therefore, we decided not to create that corresponding file in those cases. Following the same logic, another exception is when all the fields from a .json | .yaml file are split, leaving the original file as an empty object. In that case, the file would be deleted as well. The following subcommands are currently supported: trestle create catalog : creates a directory structure of a sample OSCAL catalog model under the catalogs folder. This folder can contain multiple catalogs. trestle create profile : creates a directory structure of a sample OSCAL profile model under the profiles folder. This folder can contain multiple profiles. trestle create component-definition : creates a directory structure of a sample component-definition model under the component-definitions folder. This folder can contain multiple component-definitions. trestle create system-security-plan : creates a directory structure of a sample system-security-plan model under the system-security-plans folder. This folder can contain multiple system-security-plans. trestle create assessment-plan : creates a directory structure of a sample assessment-plan under the assessment-plans folder. This folder can contain multiple assessment-plans. trestle create assessment-result : creates a directory structure of a sample assessment-result under the assessment-results folder. This folder can contain multiple assessment-results. trestle create plan-of-action-and-milestone : creates a directory structure of a sample plan-of-action-and-milestone under the plan-of-action-and-milestones folder. This folder can contain multiple plan-of-action-and-milestones. The following options are supported: -o or --output : specifies the name/alias of a model. It is used as the prefix for the output filename under the dist directory and for naming the source subdirectories under catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results or plan-of-action-and-milestones . The user can edit the parts of the generated OSCAL model by modifying the sample content in those directories. The initial level of decomposition of each type of model varies according to the model type. This default or reference decomposition behaviour can be changed by modifying the rules in a .trestle/config file . These rules can be written as a sequence of trestle split commands. Catalog default decomposition \u00a4 For catalog , the inital sample content is broken down as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... a catalog.json file containing a catalog JSON object without the catalog.groups property. Also, because the catalog is decomposed, there's a subdirectory called catalog at the same level as catalog.json . catalog.groups property is broken down into a subdirectory called groups under catalog . For each group in the catalog.groups array list, an indexed json file is created containing a group JSON object without the group.controls property. Also, because each group is further decomposed, an indexed subdirectory is created at the same level as the indexed file. catalog.groups[i].controls property in each group is broken down into subdirectories called controls under each indexed group subdirectory. For each control in a catalog.groups[i].controls array list, an indexed JSON file is created representing the contents of a control. Profile default decomposition \u00a4 For profile , the initial sample content is not broken down by default as shown below. . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 profiles \u2502 \u2514\u2500\u2500 profile-myprofile.json \u2514\u2500\u2500 profiles \u2514\u2500\u2500 profile-myprofile \u2514\u2500\u2500 profile.json ... profile.json file has the content of the OSCAL profile. Target-definition default decomposition \u00a4 THIS IS LEGACY CONTENT TARGET DEFINITIONS NO LONGER EXIST For target-definition , the initial sample content is broken down as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 target-definitions \u2502 \u2514\u2500\u2500 mycloudservices-example.json \u2514\u2500\u2500 target-definitions \u2514\u2500\u2500 mycloudservices-example \u251c\u2500\u2500 target-definition.json \u251c\u2500\u2500 target-definition \u2514\u2500\u2500 targets \u251c\u2500\u2500 74ccb93f-07d1-422a-a43d-3c97bae4c514__target.json \u251c\u2500\u2500 74ccb93f-07d1-422a-a43d-3c97bae4c514__target \u2502 \u2514\u2500\u2500 target-control-implementations \u2502 \u251c\u2500\u2500 00000__target-control-implementation.json \u2502 \u2514\u2500\u2500 00001__target-control-implementation.json \u251c\u2500\u2500 953a2878-2a21-4a0f-a9fa-3a37b61b9df8__target.json \u2514\u2500\u2500 953a2878-2a21-4a0f-a9fa-3a37b61b9df8__target \u2514\u2500\u2500 target-control-implementations \u251c\u2500\u2500 00000__target-control-implementation.json \u2514\u2500\u2500 00001__target-control-implementation.json ... a target-definition.json file containing a target definition JSON object except for the target-definition.targets property. Also, because the target definition is decomposed, there's a subdirectory called target-definition at the same level as target-definition.json . target-definition.targets property is broken down into a subdirectory named targets under target-definition . For each target in the target-definition.targets uniquely identified by a property labelled with the target's uuid, a filename named after {{uuid}}__target us created containing a target JSON object without the target.target-control-implementations property. Also, because each target is further decomposed, a subdirectory named after {{uuid}}__target is created at the same level as its corresponding file. target-definition.components.{{uuid}}.target-control-implementations property is broken down into subdirectories called target-control-implementations under each {{uuid}}__target folder. For each target control implementation in a target-definition.components.{{uuid}}.target-control-implementations array list, an indexed JSON file is created representing the contents of a target control implementation. At the moment, the initial sample content for the other model types ( component-definition , system-security-plan , assessment-plan , assessment-result and plan-of-action-and-milestone ) is TBD. The user can increase the level of decomposition by using trestle split command. trestle import \u00a4 This command allows users to import existing OSCAL files so that they can be managed using trestle. For example trestle import -f existing_catalog.json -o my_existing_catalog will import existing_catalog.json into a new folder under catalogs as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 my_existing_catalog.json \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u251c\u2500\u2500 my_existing_catalog \u2502 \u251c\u2500\u2500 catalog.json \u2502 \u2514\u2500\u2500 catalog \u2502 \u2514\u2500\u2500 groups \u2502 \u251c\u2500\u2500 00000__group.json \u2502 \u2514\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u251c\u2500\u2500 00001__control.json ... The following options are supported: -f or --file : specifies the path of an existing OSCAL file. -o or --output : specifies the name/alias of a model. It is used as the prefix for the output filename under the dist directory and for naming the source subdirectories under catalogs , profiles , target-definitions , component-definitions , system-security-plans , assessment-plans , assessment-results or plan-of-action-and-milestones . The import subcommand can determine the type of the model that is to be imported by the contents of the file. Note that the import command will decompose the file according to the default decomposing rules already mentioned in the trestle create section. Similarly to trestle create , the user can increase the level of decomposition by using trestle split command. trestle replicate \u00a4 This command allows users to replicate a certain OSCAL model (file and directory structure). For example trestle replicate catalog -i cat1 -o cat11 will replicate the Catalog cat1 into cat11 directory. It can also regenerate all the UUIDs as required. trestle split \u00a4 This command allows users to further decompose a trestle model into additional subcomponents. The following options are currently supported: -f or --file : this option specifies the file path of the json/yaml file containing the elements that will be split. -e or --elements : specifies the model subcomponent element(s) (JSON/YAML property path) that is/are going to be split. Multiple elements can be specified at once using a comma-separated value. If the element is of JSON/YAML type array list and you want trestle to create a separate subcomponent file per array item, the element needs to be suffixed with .* . If the suffix is not specified, split will place all array items in only one separate subcomponent file. If the element is a collection of JSON Schema additionalProperties and you want trestle to create a separate subcomponent file per additionalProperties item, the element also needs to be suffixed with .* . Similarly, not adding the suffix will place all additionalProperties items in only one separate subcomponent file. In the near future, trestle split should be smart enough to figure out which json/yaml files contain the elemenets you want to split. In that case, the -f option would be deprecated and only the -e option will be required. In order to determine which elements the user can split at the level the command is being executed, the following command can be used: trestle split -l which would be the same as trestle split --list-available-elements Example \u00a4 To illustrate how this command could be used consider a catalog model named nist800-53 that was created via trestle create catalog -o nist800-53 or imported via trestle import -f nist800-53.json . . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u251c\u2500\u2500 00001__control.json ... Step 1 : A user might want to decompose the metadata property from catalog.json . The command to achieve that would be: $TRESTLE_BASEDIR/catalogs/nist800-53$ trestle split -f catalog.json -e 'catalog.metadata' . This would create a metadata.json file under catalog subdirectory and move the whole metadata property/section from catalog.json to catalog/metadata.json as below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json #removed metadata property from this file \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json #contains the metadata JSON object \u2514\u2500\u2500 groups \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... The future version of this command would be: $TRESTLE_BASEDIR/catalogs/nist800-53$ trestle split -e 'catalog.metadata' Step 2 : Suppose now the user wants to further break down the revision-history property under the metadata subcomponent. The command to achieve that would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog$ trestle split -f metadata.json -e 'metadata.revision-history' The result would be the creation of a metadata subdirectory under catalog and the creation of a revision-history.json file under metadata as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json #metadata JSON value without revision-history property \u251c\u2500\u2500 metadata \u2502 \u2514\u2500\u2500 revision-history.json \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... The future version of this command would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog$ trestle split -e 'metadata.revision-history' Step 3 : Knowing that revision-history is an array list, suppose the user wants to edit each item in that array list as a separate subcomponent or file. That can be achieved by running: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog/metadata$ trestle split -f revision-history.json -e 'revision-history.*' Notice the .* referring to each element in the array. The command would replace the revision-history.json file by a revision-history directory containing multiple files prefixed with a 5 digit number representing the index of the array element followed by two underscores and the string revision-history.json as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json \u251c\u2500\u2500 metadata \u2502 \u2514\u2500\u2500 revision-history \u2502 \u251c\u2500\u2500 00000__revision-history.json \u2502 \u251c\u2500\u2500 00001__revision-history.json \u2502 \u2514\u2500\u2500 00002__revision-history.json \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... The future version of this command would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog/metadata$ trestle split -e 'revision-history.*' OSCAL also makes use of named fields by leveraging additionalProperties supported by JSON Schema which behaves as a map or dict. OSCAL normally uses this feature as a way to assign multiple objects to a property without necessarily having to enforce a specific order as is the case with JSON array properties. It is like assigning a map/dict to a property. An example of such property in the catalog schema is the responsible-parties under metadata . One example of contents for a responsible-parties property is: \"responsible-parties\": { \"creator\": { \"party-uuids\": [ \"4ae7292e-6d8e-4735-86ea-11047c575e87\" ] }, \"contact\": { \"party-uuids\": [ \"4ae7292e-6d8e-4735-86ea-11047c575e87\" ] } } A more evident example of this type of property is in the targets property under the target-definition schema. Step 4 : Suppose the user wants to split the responsible-parties property in order to be able to edit each arbitrary key/value object under it as a separate file. The command to achieve that would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog$ trestle split -f metadata.json -e metadata.responsible-parties.* Notice the .* at the end referring to each key/value pair in the map). The command would result in creating a directory called responsible-parties under metadata and multiple JSON files under it, one for each named field using the key of the named field as the name of the JSON file. The result is shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json \u251c\u2500\u2500 metadata \u2502 \u251c\u2500\u2500 revision-history \u2502 \u2502 \u251c\u2500\u2500 00000__revision-history.json \u2502 \u2502 \u251c\u2500\u2500 00001__revision-history.json \u2502 \u2502 \u2514\u2500\u2500 00002__revision-history.json \u2502 \u2514\u2500\u2500 responsible-parties \u2502 \u251c\u2500\u2500 creator__responsible-party.json \u2502 \u2514\u2500\u2500 contact__responsible-party.json \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... The future version of this command would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog$ trestle split -e 'metadata.responsible-parties.*' An example of a sequence of trestle split and merge commands and the corresponding states of the files/directories structures can be found in test/data/split_merge folder in this repo. trestle merge \u00a4 The trestle merge command is the reversal of trestle split . This command allows users to reverse the decomposition of a trestle model by aggregating subcomponents scattered across multiple files or directories into the parent JSON/YAML file. To merge a model, you have to first change working directory to the root model component directory that you want to merge a sub-component model into. The following option is required: -e or --elements : specifies the properties (JSON/YAML path) that will be merged, relative to the current working directory. This must contain at least 2 elements, where the last element is the model/sub-component to be merged into the second from last component. For example, in the command trestle merge -e catalog.metadata , executed in the same directory where catalog.json or splitted catalog directory exists, the property metadata from metadata.json or metadata.yaml would be moved/merged into catalog.json . If the metadata model has already been split into smaller sub-component models previously, those smaller sub-components are first recusively merged into metadata , before merging metadata subcomponent into catalog.json . To specify merging every sub-component split from a component, .* can be used. For example, trestle merge -e catalog.* command, issued from the directory where catalog.json or catalog directory exists, will merge every single sub-component of that catalog back into the catalog.json . trestle assemble \u00a4 This command assembles all contents (files and directories) representing a specific model into a single OSCAL file located under dist folder. For example, $TRESTLE_BASEDIR$ trestle assemble catalog -n nist800-53 -x json will traverse the catalogs/nist800-53 directory and its children and combine all data into a OSCAL file that will be written to dist/catalogs/nist800-53.json . Note that the parts of catalog nist800-53 can be written in either YAML/JSON/XML (e.g. based on the file extension), however, the output will be generated as YAML/JSON/XML as desired, based on the file extension argument provided 'json', 'yml' or 'yaml'. Trestle will infer the content type from the file extension and create the model representation appropriately in memory and then output in the desired format. Trestle assemble will also validate content as it assembles the files and make sure the contents are syntactically correct. trestle add \u00a4 This command allows users to add an OSCAL model to a subcomponent in source directory structure of the model. For example, $TRESTLE_BASEDIR/catalogs/nist800-53$ trestle add -f ./catalog.json -e catalog.metadata.roles will add the following property under the metadata property for a catalog that will be written to the appropriate file under catalogs/nist800-53 directory: \"roles\": [ { \"id\": \"REPLACE_ME\", \"title\": \"REPLACE_ME\" } Default values for mandatory datatypes will be like below. All UUID's will be populated by default whether or not they are mandatory. - DateTime: <Current date-time> - Boolean: False - Integer: 0 - String: REPLACE_ME - Float/Double: 0.00 - Id field: Auto generated UUID trestle remove \u00a4 The trestle remove command is the reversal of trestle add . trestle validate \u00a4 This command will validate the content of the specified file by combining all its children. For example, trestle validate -f cat1yaml will create the cat1 catalog in the model and make sure it is is a valid Catalog. By default this command do a \"shallow validation\" where it just checks for syntax error and makes sure the model can be generated from the file content. For extensive validation, trestle validate supports \"deep validation\" like cross-linking ids when additional parameters(e.g. --mode deep-validation ) are passed. We envision that users will run this command occassionally to make sure the contents are valid. Future work \u00a4 trestle generate \u00a4 This command will allow generating default values such as UUID Deploy Commands \u00a4 For the deploy phase of compliance engineering, trestle provides the following commands to facilitate various operations. trestle plan : Fetch current deployed controls and check what needes to be updated. This is like terraform plan . trestle apply : Apply the diffs or output of the trestle plan command in order to deploy the controls or other desired state. This is like terraform apply . trestle ci init : Initialize CI/CD pipeline for this project. It may create artefacts in .trestle directory. trestle ci run : Run the CI/CD pipeline. If a pipeline name is not provided, it will run all piplelines for this project. trestle ci stop : Stop the CI/CD pipleline. If a pipeline name is not provided, it will run all piplelines for this project. Monitoring Commands \u00a4 Trestle provides the following commands to facilitate various monitoring operations. TBD trestle fetch : This command will fetch facts about a control Reporting Commands \u00a4 Trestle provides the following commands to facilitate various reporting operations.","title":"Trestle CLI Specifications (v0.1.0)"},{"location":"specifications/trestle-spec/#trestle-cli-specifications-v010","text":"","title":"Trestle CLI Specifications (v0.1.0)"},{"location":"specifications/trestle-spec/#table-of-contents","text":"Purpose Users Scope Trestle commands Draft commands Future work Deploy commands Monitor commands Reporting commands","title":"Table of Contents"},{"location":"specifications/trestle-spec/#purpose","text":"This document contains detail specifications of the Trestle CLI commands. Trestle offers various commands to simplify operations at different steps in compliance management and reporting. Trestle assumes all security and compliance specifications and requirements are expressed in OSCAL format.","title":"Purpose"},{"location":"specifications/trestle-spec/#users","text":"Trestle aims at compliance engineers who are familiar with various software development tools such as Git, CI/CD and command line tools. Users of Trestle are also expected to be comfortable with editing OSCAL files in YAML/JSON/XML format.","title":"Users"},{"location":"specifications/trestle-spec/#scope","text":"The scope of this document is to describe the purpose and expected behaviour of various trestle commands for manipulating OSCAL documents ONLY. This will not be all of trestle. Workflow commands will be subsequent / expanded on this.","title":"Scope"},{"location":"specifications/trestle-spec/#definitions","text":"trestle project directory : directory containing a .trestle folder as the result of trestle init . Also referred as $TRESTLE_BASEDIR in this document. trestle model directory : directory representing the source folder for manipulating an OSCAL model in a trestle project. This type of directory is usually created by commands such as trestle create and trestle import . Examples of a trestle model directory named mymodel under different types of models are: $TRESTLE_BASEDIR/catalogs/mymodel $TRESTLE_BASEDIR/profiles/mymodel $TRESTLE_BASEDIR/component-definitions/mymodel $TRESTLE_BASEDIR/system-security-plans/mymodel $TRESTLE_BASEDIR/assessment-plans/mymodel $TRESTLE_BASEDIR/assessment-results/mymodel $TRESTLE_BASEDIR/plan-of-action-and-milestones/mymodel","title":"Definitions"},{"location":"specifications/trestle-spec/#trestle-commands","text":"","title":"Trestle Commands"},{"location":"specifications/trestle-spec/#draft-commands","text":"For the draft phase of compliance engineering, trestle provides the following commands to facilitate various draft related operations.","title":"Draft Commands"},{"location":"specifications/trestle-spec/#trestle-init","text":"This command will create a trestle project in the current directory with necessary directory structure and trestle artefacts. For example, if we run trestle init in a directory, it will create a directory structure like below for different artefacts: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 system-security-plans \u2502 \u251c\u2500\u2500 assessment-plans \u2502 \u251c\u2500\u2500 assessment-results \u2502 \u2514\u2500\u2500 plan-of-action-and-milestones \u251c\u2500\u2500 catalogs \u251c\u2500\u2500 profiles \u251c\u2500\u2500 component-definitions \u251c\u2500\u2500 system-security-plans \u251c\u2500\u2500 assessment-plans \u251c\u2500\u2500 assessment-results \u2514\u2500\u2500 plan-of-action-and-milestones .trestle directory is a special directory containing various trestle artefacts to help run various other commands. dist directory will contain the merged or assembled version of the models located on the source model directories (at the project root level) which are: catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results and plan-of-action-and-milestones . Notice that trestle is a highly opinionated tool and, therefore, the names of the files and directories that are created by any of the trestle commands and subcommands MUST NOT be changed manually.","title":"trestle init"},{"location":"specifications/trestle-spec/#trestle-create","text":"This command will create an initial directory structure for various OSCAL models including sample JSON files and subdirectories representing parts of the model. For example, trestle create catalog -o nist800-53 will create a directory structure of a sample catalog like below. . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u251c\u2500\u2500 00001__control.json \u2514\u2500\u2500 00002__control.json ... Notice that subdirectories under a trestle directory model such as $TRESTLE_BASEDIR/catalogs/nist800-53/catalog and $TRESTLE_BASEDIR/catalogs/nist800-53/catalog/groups represent a decomposition of the original file. The subdirectory catalog means that the original catalog.json was split and the split parts are inside the catalog directory (in this case groups ). Every subdirectory in a trestle directory model should have a corresponding .json or .yaml file with the same name. Exceptions to that rule are named fields (dicts) such as catalog.metadata.responsible-parties and array fields such as catalog.groups . When those subcomponents are split/expanded each file or subdirectory under them represents an item of the collection. Because of that, if a corresponding groups.json | groups.yaml file were to exist, its contents would just be an empty representation of that collection and the user would need to be careful never to edit that file. Therefore, we decided not to create that corresponding file in those cases. Following the same logic, another exception is when all the fields from a .json | .yaml file are split, leaving the original file as an empty object. In that case, the file would be deleted as well. The following subcommands are currently supported: trestle create catalog : creates a directory structure of a sample OSCAL catalog model under the catalogs folder. This folder can contain multiple catalogs. trestle create profile : creates a directory structure of a sample OSCAL profile model under the profiles folder. This folder can contain multiple profiles. trestle create component-definition : creates a directory structure of a sample component-definition model under the component-definitions folder. This folder can contain multiple component-definitions. trestle create system-security-plan : creates a directory structure of a sample system-security-plan model under the system-security-plans folder. This folder can contain multiple system-security-plans. trestle create assessment-plan : creates a directory structure of a sample assessment-plan under the assessment-plans folder. This folder can contain multiple assessment-plans. trestle create assessment-result : creates a directory structure of a sample assessment-result under the assessment-results folder. This folder can contain multiple assessment-results. trestle create plan-of-action-and-milestone : creates a directory structure of a sample plan-of-action-and-milestone under the plan-of-action-and-milestones folder. This folder can contain multiple plan-of-action-and-milestones. The following options are supported: -o or --output : specifies the name/alias of a model. It is used as the prefix for the output filename under the dist directory and for naming the source subdirectories under catalogs , profiles , component-definitions , system-security-plans , assessment-plans , assessment-results or plan-of-action-and-milestones . The user can edit the parts of the generated OSCAL model by modifying the sample content in those directories. The initial level of decomposition of each type of model varies according to the model type. This default or reference decomposition behaviour can be changed by modifying the rules in a .trestle/config file . These rules can be written as a sequence of trestle split commands.","title":"trestle create"},{"location":"specifications/trestle-spec/#catalog-default-decomposition","text":"For catalog , the inital sample content is broken down as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... a catalog.json file containing a catalog JSON object without the catalog.groups property. Also, because the catalog is decomposed, there's a subdirectory called catalog at the same level as catalog.json . catalog.groups property is broken down into a subdirectory called groups under catalog . For each group in the catalog.groups array list, an indexed json file is created containing a group JSON object without the group.controls property. Also, because each group is further decomposed, an indexed subdirectory is created at the same level as the indexed file. catalog.groups[i].controls property in each group is broken down into subdirectories called controls under each indexed group subdirectory. For each control in a catalog.groups[i].controls array list, an indexed JSON file is created representing the contents of a control.","title":"Catalog default decomposition"},{"location":"specifications/trestle-spec/#profile-default-decomposition","text":"For profile , the initial sample content is not broken down by default as shown below. . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 profiles \u2502 \u2514\u2500\u2500 profile-myprofile.json \u2514\u2500\u2500 profiles \u2514\u2500\u2500 profile-myprofile \u2514\u2500\u2500 profile.json ... profile.json file has the content of the OSCAL profile.","title":"Profile default decomposition"},{"location":"specifications/trestle-spec/#target-definition-default-decomposition","text":"THIS IS LEGACY CONTENT TARGET DEFINITIONS NO LONGER EXIST For target-definition , the initial sample content is broken down as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 target-definitions \u2502 \u2514\u2500\u2500 mycloudservices-example.json \u2514\u2500\u2500 target-definitions \u2514\u2500\u2500 mycloudservices-example \u251c\u2500\u2500 target-definition.json \u251c\u2500\u2500 target-definition \u2514\u2500\u2500 targets \u251c\u2500\u2500 74ccb93f-07d1-422a-a43d-3c97bae4c514__target.json \u251c\u2500\u2500 74ccb93f-07d1-422a-a43d-3c97bae4c514__target \u2502 \u2514\u2500\u2500 target-control-implementations \u2502 \u251c\u2500\u2500 00000__target-control-implementation.json \u2502 \u2514\u2500\u2500 00001__target-control-implementation.json \u251c\u2500\u2500 953a2878-2a21-4a0f-a9fa-3a37b61b9df8__target.json \u2514\u2500\u2500 953a2878-2a21-4a0f-a9fa-3a37b61b9df8__target \u2514\u2500\u2500 target-control-implementations \u251c\u2500\u2500 00000__target-control-implementation.json \u2514\u2500\u2500 00001__target-control-implementation.json ... a target-definition.json file containing a target definition JSON object except for the target-definition.targets property. Also, because the target definition is decomposed, there's a subdirectory called target-definition at the same level as target-definition.json . target-definition.targets property is broken down into a subdirectory named targets under target-definition . For each target in the target-definition.targets uniquely identified by a property labelled with the target's uuid, a filename named after {{uuid}}__target us created containing a target JSON object without the target.target-control-implementations property. Also, because each target is further decomposed, a subdirectory named after {{uuid}}__target is created at the same level as its corresponding file. target-definition.components.{{uuid}}.target-control-implementations property is broken down into subdirectories called target-control-implementations under each {{uuid}}__target folder. For each target control implementation in a target-definition.components.{{uuid}}.target-control-implementations array list, an indexed JSON file is created representing the contents of a target control implementation. At the moment, the initial sample content for the other model types ( component-definition , system-security-plan , assessment-plan , assessment-result and plan-of-action-and-milestone ) is TBD. The user can increase the level of decomposition by using trestle split command.","title":"Target-definition default decomposition"},{"location":"specifications/trestle-spec/#trestle-import","text":"This command allows users to import existing OSCAL files so that they can be managed using trestle. For example trestle import -f existing_catalog.json -o my_existing_catalog will import existing_catalog.json into a new folder under catalogs as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u251c\u2500\u2500 my_existing_catalog.json \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u251c\u2500\u2500 my_existing_catalog \u2502 \u251c\u2500\u2500 catalog.json \u2502 \u2514\u2500\u2500 catalog \u2502 \u2514\u2500\u2500 groups \u2502 \u251c\u2500\u2500 00000__group.json \u2502 \u2514\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u251c\u2500\u2500 00001__control.json ... The following options are supported: -f or --file : specifies the path of an existing OSCAL file. -o or --output : specifies the name/alias of a model. It is used as the prefix for the output filename under the dist directory and for naming the source subdirectories under catalogs , profiles , target-definitions , component-definitions , system-security-plans , assessment-plans , assessment-results or plan-of-action-and-milestones . The import subcommand can determine the type of the model that is to be imported by the contents of the file. Note that the import command will decompose the file according to the default decomposing rules already mentioned in the trestle create section. Similarly to trestle create , the user can increase the level of decomposition by using trestle split command.","title":"trestle import"},{"location":"specifications/trestle-spec/#trestle-replicate","text":"This command allows users to replicate a certain OSCAL model (file and directory structure). For example trestle replicate catalog -i cat1 -o cat11 will replicate the Catalog cat1 into cat11 directory. It can also regenerate all the UUIDs as required.","title":"trestle replicate"},{"location":"specifications/trestle-spec/#trestle-split","text":"This command allows users to further decompose a trestle model into additional subcomponents. The following options are currently supported: -f or --file : this option specifies the file path of the json/yaml file containing the elements that will be split. -e or --elements : specifies the model subcomponent element(s) (JSON/YAML property path) that is/are going to be split. Multiple elements can be specified at once using a comma-separated value. If the element is of JSON/YAML type array list and you want trestle to create a separate subcomponent file per array item, the element needs to be suffixed with .* . If the suffix is not specified, split will place all array items in only one separate subcomponent file. If the element is a collection of JSON Schema additionalProperties and you want trestle to create a separate subcomponent file per additionalProperties item, the element also needs to be suffixed with .* . Similarly, not adding the suffix will place all additionalProperties items in only one separate subcomponent file. In the near future, trestle split should be smart enough to figure out which json/yaml files contain the elemenets you want to split. In that case, the -f option would be deprecated and only the -e option will be required. In order to determine which elements the user can split at the level the command is being executed, the following command can be used: trestle split -l which would be the same as trestle split --list-available-elements","title":"trestle split"},{"location":"specifications/trestle-spec/#example","text":"To illustrate how this command could be used consider a catalog model named nist800-53 that was created via trestle create catalog -o nist800-53 or imported via trestle import -f nist800-53.json . . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u251c\u2500\u2500 00001__control.json ... Step 1 : A user might want to decompose the metadata property from catalog.json . The command to achieve that would be: $TRESTLE_BASEDIR/catalogs/nist800-53$ trestle split -f catalog.json -e 'catalog.metadata' . This would create a metadata.json file under catalog subdirectory and move the whole metadata property/section from catalog.json to catalog/metadata.json as below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json #removed metadata property from this file \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json #contains the metadata JSON object \u2514\u2500\u2500 groups \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... The future version of this command would be: $TRESTLE_BASEDIR/catalogs/nist800-53$ trestle split -e 'catalog.metadata' Step 2 : Suppose now the user wants to further break down the revision-history property under the metadata subcomponent. The command to achieve that would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog$ trestle split -f metadata.json -e 'metadata.revision-history' The result would be the creation of a metadata subdirectory under catalog and the creation of a revision-history.json file under metadata as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json #metadata JSON value without revision-history property \u251c\u2500\u2500 metadata \u2502 \u2514\u2500\u2500 revision-history.json \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... The future version of this command would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog$ trestle split -e 'metadata.revision-history' Step 3 : Knowing that revision-history is an array list, suppose the user wants to edit each item in that array list as a separate subcomponent or file. That can be achieved by running: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog/metadata$ trestle split -f revision-history.json -e 'revision-history.*' Notice the .* referring to each element in the array. The command would replace the revision-history.json file by a revision-history directory containing multiple files prefixed with a 5 digit number representing the index of the array element followed by two underscores and the string revision-history.json as shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json \u251c\u2500\u2500 metadata \u2502 \u2514\u2500\u2500 revision-history \u2502 \u251c\u2500\u2500 00000__revision-history.json \u2502 \u251c\u2500\u2500 00001__revision-history.json \u2502 \u2514\u2500\u2500 00002__revision-history.json \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... The future version of this command would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog/metadata$ trestle split -e 'revision-history.*' OSCAL also makes use of named fields by leveraging additionalProperties supported by JSON Schema which behaves as a map or dict. OSCAL normally uses this feature as a way to assign multiple objects to a property without necessarily having to enforce a specific order as is the case with JSON array properties. It is like assigning a map/dict to a property. An example of such property in the catalog schema is the responsible-parties under metadata . One example of contents for a responsible-parties property is: \"responsible-parties\": { \"creator\": { \"party-uuids\": [ \"4ae7292e-6d8e-4735-86ea-11047c575e87\" ] }, \"contact\": { \"party-uuids\": [ \"4ae7292e-6d8e-4735-86ea-11047c575e87\" ] } } A more evident example of this type of property is in the targets property under the target-definition schema. Step 4 : Suppose the user wants to split the responsible-parties property in order to be able to edit each arbitrary key/value object under it as a separate file. The command to achieve that would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog$ trestle split -f metadata.json -e metadata.responsible-parties.* Notice the .* at the end referring to each key/value pair in the map). The command would result in creating a directory called responsible-parties under metadata and multiple JSON files under it, one for each named field using the key of the named field as the name of the JSON file. The result is shown below: . \u251c\u2500\u2500 .trestle \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 catalogs \u2502 \u2514\u2500\u2500 nist800-53.json \u2514\u2500\u2500 catalogs \u2514\u2500\u2500 nist800-53 \u251c\u2500\u2500 catalog.json \u2514\u2500\u2500 catalog \u251c\u2500\u2500 metadata.json \u251c\u2500\u2500 metadata \u2502 \u251c\u2500\u2500 revision-history \u2502 \u2502 \u251c\u2500\u2500 00000__revision-history.json \u2502 \u2502 \u251c\u2500\u2500 00001__revision-history.json \u2502 \u2502 \u2514\u2500\u2500 00002__revision-history.json \u2502 \u2514\u2500\u2500 responsible-parties \u2502 \u251c\u2500\u2500 creator__responsible-party.json \u2502 \u2514\u2500\u2500 contact__responsible-party.json \u2514\u2500\u2500 groups \u251c\u2500\u2500 00000__group.json \u251c\u2500\u2500 00000__group \u2502 \u2514\u2500\u2500 controls \u2502 \u251c\u2500\u2500 00000__control.json \u2502 \u2514\u2500\u2500 00001__control.json \u251c\u2500\u2500 00001__group.json \u2514\u2500\u2500 00001__group \u2514\u2500\u2500 controls \u251c\u2500\u2500 00000__control.json \u2514\u2500\u2500 00001__control.json ... The future version of this command would be: $TRESTLE_BASEDIR/catalogs/nist800-53/catalog$ trestle split -e 'metadata.responsible-parties.*' An example of a sequence of trestle split and merge commands and the corresponding states of the files/directories structures can be found in test/data/split_merge folder in this repo.","title":"Example"},{"location":"specifications/trestle-spec/#trestle-merge","text":"The trestle merge command is the reversal of trestle split . This command allows users to reverse the decomposition of a trestle model by aggregating subcomponents scattered across multiple files or directories into the parent JSON/YAML file. To merge a model, you have to first change working directory to the root model component directory that you want to merge a sub-component model into. The following option is required: -e or --elements : specifies the properties (JSON/YAML path) that will be merged, relative to the current working directory. This must contain at least 2 elements, where the last element is the model/sub-component to be merged into the second from last component. For example, in the command trestle merge -e catalog.metadata , executed in the same directory where catalog.json or splitted catalog directory exists, the property metadata from metadata.json or metadata.yaml would be moved/merged into catalog.json . If the metadata model has already been split into smaller sub-component models previously, those smaller sub-components are first recusively merged into metadata , before merging metadata subcomponent into catalog.json . To specify merging every sub-component split from a component, .* can be used. For example, trestle merge -e catalog.* command, issued from the directory where catalog.json or catalog directory exists, will merge every single sub-component of that catalog back into the catalog.json .","title":"trestle merge"},{"location":"specifications/trestle-spec/#trestle-assemble","text":"This command assembles all contents (files and directories) representing a specific model into a single OSCAL file located under dist folder. For example, $TRESTLE_BASEDIR$ trestle assemble catalog -n nist800-53 -x json will traverse the catalogs/nist800-53 directory and its children and combine all data into a OSCAL file that will be written to dist/catalogs/nist800-53.json . Note that the parts of catalog nist800-53 can be written in either YAML/JSON/XML (e.g. based on the file extension), however, the output will be generated as YAML/JSON/XML as desired, based on the file extension argument provided 'json', 'yml' or 'yaml'. Trestle will infer the content type from the file extension and create the model representation appropriately in memory and then output in the desired format. Trestle assemble will also validate content as it assembles the files and make sure the contents are syntactically correct.","title":"trestle assemble"},{"location":"specifications/trestle-spec/#trestle-add","text":"This command allows users to add an OSCAL model to a subcomponent in source directory structure of the model. For example, $TRESTLE_BASEDIR/catalogs/nist800-53$ trestle add -f ./catalog.json -e catalog.metadata.roles will add the following property under the metadata property for a catalog that will be written to the appropriate file under catalogs/nist800-53 directory: \"roles\": [ { \"id\": \"REPLACE_ME\", \"title\": \"REPLACE_ME\" } Default values for mandatory datatypes will be like below. All UUID's will be populated by default whether or not they are mandatory. - DateTime: <Current date-time> - Boolean: False - Integer: 0 - String: REPLACE_ME - Float/Double: 0.00 - Id field: Auto generated UUID","title":"trestle add"},{"location":"specifications/trestle-spec/#trestle-remove","text":"The trestle remove command is the reversal of trestle add .","title":"trestle remove"},{"location":"specifications/trestle-spec/#trestle-validate","text":"This command will validate the content of the specified file by combining all its children. For example, trestle validate -f cat1yaml will create the cat1 catalog in the model and make sure it is is a valid Catalog. By default this command do a \"shallow validation\" where it just checks for syntax error and makes sure the model can be generated from the file content. For extensive validation, trestle validate supports \"deep validation\" like cross-linking ids when additional parameters(e.g. --mode deep-validation ) are passed. We envision that users will run this command occassionally to make sure the contents are valid.","title":"trestle validate"},{"location":"specifications/trestle-spec/#future-work","text":"","title":"Future work"},{"location":"specifications/trestle-spec/#trestle-generate","text":"This command will allow generating default values such as UUID","title":"trestle generate"},{"location":"specifications/trestle-spec/#deploy-commands","text":"For the deploy phase of compliance engineering, trestle provides the following commands to facilitate various operations. trestle plan : Fetch current deployed controls and check what needes to be updated. This is like terraform plan . trestle apply : Apply the diffs or output of the trestle plan command in order to deploy the controls or other desired state. This is like terraform apply . trestle ci init : Initialize CI/CD pipeline for this project. It may create artefacts in .trestle directory. trestle ci run : Run the CI/CD pipeline. If a pipeline name is not provided, it will run all piplelines for this project. trestle ci stop : Stop the CI/CD pipleline. If a pipeline name is not provided, it will run all piplelines for this project.","title":"Deploy Commands"},{"location":"specifications/trestle-spec/#monitoring-commands","text":"Trestle provides the following commands to facilitate various monitoring operations. TBD trestle fetch : This command will fetch facts about a control","title":"Monitoring Commands"},{"location":"specifications/trestle-spec/#reporting-commands","text":"Trestle provides the following commands to facilitate various reporting operations.","title":"Reporting Commands"},{"location":"tutorials/trestle_sample_workflow/","text":"Tutorial: Introduction to trestle workflow \u00a4 Here are step-by-step instructions to manipulate a NIST standard OSCAL catalog using the compliance-trestle ( \"trestle\" ) tool. Objective \u00a4 Learn how to split and merge an OSCAL catalog json file using trestle commands and its command line interface (CLI). Trestle simplifies the manipulation and management of large OSCAL documents by allowing controlled deconstruction into smaller components, and later reconstruction after editing those components. And all operations guarantee that the individual files conform to the corresponding OSCAL schema to maintain integrity of the document in the process. This tutorial assumes you have installed Python and installed trestle in a virtual environment per the directions found here . The examples shown will work for linux and mac, but Windows will require the following modifications: use backslashes `\\` for file paths (this is optional in most cases) use copy instead of cp (unless you have cp installed) use md instead of mkdir (unless you have mkdir installed) quotes (') are often not needed unless the text includes spaces, but if quotes are needed they should be double quotes (\") Commands are shown without prompts so they are easy to cut and paste, and responses by trestle are shown with >>> at the start of the line. In actual usage the >>> would not appear. Be sure to include the quotes (' ') as shown in the examples, e.g. merge -e 'catalog.*' [On windows you should probably use double quotes (\") as needed.] In this tutorial you will see sections that contain dropdown that is revealed when you click on them. Below is an example (\"Like this\"). Be sure to click on those sections to see their contents - and then close them if you like. Like this more information in here Step 1: Create a trestle workspace if you don't have one already \u00a4 mkdir my_workspace cd my_workspace trestle init >>> Initialized trestle project successfully in [user_path]/my_workspace Step 2: Import a catalog from the trestle sample data directory into your trestle workspace \u00a4 For this tutorial we will use a catalog file from NIST, but we first must import it into the trestle workspace. This can be done either by first downloading the file locally and then importing it, or you can download it directly using its url address. We will import the file directly from the NIST OSCAL github site . The specific catalog is NIST_SP-800-53_rev5_catalog.json Import the file from the url with the following command: trestle import -f https://raw.githubusercontent.com/usnistgov/oscal-content/master/nist.gov/SP800-53/rev5/json/NIST_SP-800-53_rev5_catalog.json -o mycatalog As a reminder, you could also have imported the file from a local directory on your file system, or an sftp:// address. But the file must first be imported to the trestle workspace in order for it to be directly manipulated by trestle as in this tutorial. The import command will also check the validity of the file including the presence of any duplicate uuid's. If the file is manually created please be sure it conforms with the current OSCAL schema (OSCAL version 1.0.0) and has no defined uuid's that are duplicates. If there are any errors the Import will fail and the file must be corrected. Your initial workspace will look like this my_workspace \u2523 .trestle \u2503 \u2523 .keep \u2503 \u2517 config.ini \u2523 assessment-plans \u2503 \u2517 .keep \u2523 assessment-results \u2503 \u2517 .keep \u2523 catalogs \u2503 \u2523 mycatalog \u2503 \u2503 \u2517 catalog.json \u2503 \u2517 .keep \u2523 component-definitions \u2503 \u2517 .keep \u2523 dist \u2503 \u2523 assessment-plans \u2503 \u2503 \u2517 .keep \u2503 \u2523 assessment-results \u2503 \u2503 \u2517 .keep \u2503 \u2523 catalogs \u2503 \u2503 \u2517 .keep \u2503 \u2523 component-definitions \u2503 \u2503 \u2517 .keep \u2503 \u2523 plan-of-action-and-milestones \u2503 \u2503 \u2517 .keep \u2503 \u2523 profiles \u2503 \u2503 \u2517 .keep \u2503 \u2523 system-security-plans \u2503 \u2503 \u2517 .keep \u2503 \u2517 target-definitions \u2503 \u2503 \u2517 .keep \u2523 plan-of-action-and-milestones \u2503 \u2517 .keep \u2523 profiles \u2503 \u2517 .keep \u2523 system-security-plans \u2503 \u2517 .keep \u2517 target-definitions \u2503 \u2517 .keep You will see that the directory now shows your catalog file in my_workspace/catalogs/mycatalog/catalog.json . Note that the .keep files are simply to make sure git does not remove the directories - and can be ignored. Also note that the json file itself is singular (catalog) while the directory above is plural (catalogs). This convention is used throughout trestle because a given model directory like catalogs may contain several individual models - each of which is singular. The imported catalog file size may be larger than the original due to a change in formatting, but the contents should be the same. From here on in this tutorial we will just focus on the catalogs directory since the others are not directly involved. You have now populated your trestle workspace with an OSCAL catalog that you can manipulate. Let's start. Step 3: Split the file into smaller parts \u00a4 The OSCAL schema specifies that a catalog must contain metadata, groups, and back-matter - so this command will pull them out of the original file and place them in separate json files for additional manipulations. To begin splitting the file, first cd to the directory where catalog.json has been placed. cd catalogs/mycatalog trestle split -f ./catalog.json -e 'catalog.metadata,catalog.groups,catalog.back-matter' Here the -f refers to the filename of the json catalog file, and -e refers to the comma-separated list of elements you would like to split from the file. This list does not represent the full file contents of the source catalog.json file, so some contents will be left behind in a much smaller catalog.json file after the split. The elements that were split off will be placed in separate json files next to the new and smaller catalog.json file. Your new catalogs directory with json files split out catalogs \u2517 mycatalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json Note there still remains a catalog.json file, but it is much smaller since the bulk of its contents have been split off. Any split step can be reversed by a corresponding merge operation. In this case we can go backwards with: trestle merge -e 'catalog.metadata,catalog.groups,catalog.back-matter' or simply trestle merge -e 'catalog.*' You can go back and forth splitting and merging, but for the next step please start with the above files split so that metadata.json can be further split. Step 4: Split the metadata into constituent files \u00a4 cd catalog trestle split -f ./metadata.json -e 'metadata.roles,metadata.parties,metadata.responsible-parties' The directory will now look like this, with metadata split into files catalogs \u2517 mycatalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 metadata \u2503 \u2503 \u2503 \u2523 parties.json \u2503 \u2503 \u2503 \u2523 responsible-parties.json \u2503 \u2503 \u2503 \u2517 roles.json \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json Again there remains a metadata.json file but it is smaller than the original. And this step can be reversed with the following: trestle merge -e 'metadata.roles,metadata.parties,metadata.responsible-parties' or simply trestle merge -e 'metadata.*' Step 5: Split metadata further using wildcards \u00a4 cd metadata trestle split -f ./roles.json -e 'roles.*' trestle split -f ./responsible-parties.json -e 'responsible-parties.*' The directory now looks like this, with new subdirectories containing multiple roles and responsible-parties catalogs \u2517 mycatalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 metadata \u2503 \u2503 \u2503 \u2523 responsible-parties \u2503 \u2503 \u2503 \u2503 \u2523 contact__responsible-party.json \u2503 \u2503 \u2503 \u2503 \u2517 creator__responsible-party.json \u2503 \u2503 \u2503 \u2523 roles \u2503 \u2503 \u2503 \u2503 \u2523 00000__role.json \u2503 \u2503 \u2503 \u2503 \u2517 00001__role.json \u2503 \u2503 \u2503 \u2517 parties.json \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json Note that the presence of wildcards caused new directories to be created containing the full lists of roles and responsible parties. You can read the wildcard as split off all roles from roles.json . This split can be reversed with trestle merge -e 'roles.*,responsible-parties.*' Step 6: Split groups and controls with two wildcards \u00a4 This single command will split off all controls in all groups. To do it you need to go back up into the catalog directory where the groups.json file is found: cd .. trestle split -f ./groups.json -e 'groups.*.controls.*' Your directory is now very large with that one command! catalogs \u2517 mycatalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 groups \u2503 \u2503 \u2503 \u2523 00000__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00022__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00023__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00024__control.json \u2503 \u2503 \u2503 \u2523 00001__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00005__control.json \u2503 \u2503 \u2503 \u2523 00002__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00015__control.json \u2503 \u2503 \u2503 \u2523 00003__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00008__control.json \u2503 \u2503 \u2503 \u2523 00004__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00013__control.json \u2503 \u2503 \u2503 \u2523 00005__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00012__control.json \u2503 \u2503 \u2503 \u2523 00006__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00011__control.json \u2503 \u2503 \u2503 \u2523 00007__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00009__control.json \u2503 \u2503 \u2503 \u2523 00008__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00006__control.json \u2503 \u2503 \u2503 \u2523 00009__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00007__control.json \u2503 \u2503 \u2503 \u2523 00010__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00022__control.json \u2503 \u2503 \u2503 \u2523 00011__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00010__control.json \u2503 \u2503 \u2503 \u2523 00012__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00022__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00023__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00024__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00025__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00026__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00027__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00028__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00029__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00030__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00031__control.json \u2503 \u2503 \u2503 \u2523 00013__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00008__control.json \u2503 \u2503 \u2503 \u2523 00014__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00007__control.json \u2503 \u2503 \u2503 \u2523 00015__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00009__control.json \u2503 \u2503 \u2503 \u2523 00016__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00022__control.json \u2503 \u2503 \u2503 \u2523 00017__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00022__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00023__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00024__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00025__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00026__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00027__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00028__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00029__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00030__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00031__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00032__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00033__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00034__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00035__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00036__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00037__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00038__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00039__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00040__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00041__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00042__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00043__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00044__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00045__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00046__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00047__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00048__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00049__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00050__control.json \u2503 \u2503 \u2503 \u2523 00018__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00022__control.json \u2503 \u2503 \u2503 \u2523 00019__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00011__control.json \u2503 \u2503 \u2503 \u2523 00000__group.json \u2503 \u2503 \u2503 \u2523 00001__group.json \u2503 \u2503 \u2503 \u2523 00002__group.json \u2503 \u2503 \u2503 \u2523 00003__group.json \u2503 \u2503 \u2503 \u2523 00004__group.json \u2503 \u2503 \u2503 \u2523 00005__group.json \u2503 \u2503 \u2503 \u2523 00006__group.json \u2503 \u2503 \u2503 \u2523 00007__group.json \u2503 \u2503 \u2503 \u2523 00008__group.json \u2503 \u2503 \u2503 \u2523 00009__group.json \u2503 \u2503 \u2503 \u2523 00010__group.json \u2503 \u2503 \u2503 \u2523 00011__group.json \u2503 \u2503 \u2503 \u2523 00012__group.json \u2503 \u2503 \u2503 \u2523 00013__group.json \u2503 \u2503 \u2503 \u2523 00014__group.json \u2503 \u2503 \u2503 \u2523 00015__group.json \u2503 \u2503 \u2503 \u2523 00016__group.json \u2503 \u2503 \u2503 \u2523 00017__group.json \u2503 \u2503 \u2503 \u2523 00018__group.json \u2503 \u2503 \u2503 \u2517 00019__group.json \u2503 \u2503 \u2523 metadata \u2503 \u2503 \u2503 \u2523 responsible-parties \u2503 \u2503 \u2503 \u2503 \u2523 contact__responsible-party.json \u2503 \u2503 \u2503 \u2503 \u2517 creator__responsible-party.json \u2503 \u2503 \u2503 \u2523 roles \u2503 \u2503 \u2503 \u2503 \u2523 00000__role.json \u2503 \u2503 \u2503 \u2503 \u2517 00001__role.json \u2503 \u2503 \u2503 \u2517 parties.json \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json All 20 groups of controls have been split off, and each one has a corresponding directory with its full list of controls in it. You can then reverse the split with trestle merge -e 'groups.*' Step 7: Collapse the entire directory structure back into a single catalog.json file - possibly after modifying individual files \u00a4 You can collapse everything back to a single catalog.json file after first going up one directory to the mycatalog directory cd .. trestle merge -e 'catalog.*' After all that splitting and merging you are back to this directory structure catalogs \u2517 mycatalog \u2503 \u2517 catalog.json Conclusion \u00a4 This completes the tutorial on using trestle to split and merge an OSCAL catalog file. Not shown here are modifications of the individual files that would be done in an actual use case, but note that if any changes are made that violate the OSCAL schema, trestle will notice them and flag them in the merge. This way not only does trestle allow user-driven decomposition and aggregation of these large, complex files; it also does constant checks on the contents against the required schema to make sure no errors are introduced in the process.","title":"Intro to trestle workflow"},{"location":"tutorials/trestle_sample_workflow/#tutorial-introduction-to-trestle-workflow","text":"Here are step-by-step instructions to manipulate a NIST standard OSCAL catalog using the compliance-trestle ( \"trestle\" ) tool.","title":"Tutorial: Introduction to trestle workflow"},{"location":"tutorials/trestle_sample_workflow/#objective","text":"Learn how to split and merge an OSCAL catalog json file using trestle commands and its command line interface (CLI). Trestle simplifies the manipulation and management of large OSCAL documents by allowing controlled deconstruction into smaller components, and later reconstruction after editing those components. And all operations guarantee that the individual files conform to the corresponding OSCAL schema to maintain integrity of the document in the process. This tutorial assumes you have installed Python and installed trestle in a virtual environment per the directions found here . The examples shown will work for linux and mac, but Windows will require the following modifications: use backslashes `\\` for file paths (this is optional in most cases) use copy instead of cp (unless you have cp installed) use md instead of mkdir (unless you have mkdir installed) quotes (') are often not needed unless the text includes spaces, but if quotes are needed they should be double quotes (\") Commands are shown without prompts so they are easy to cut and paste, and responses by trestle are shown with >>> at the start of the line. In actual usage the >>> would not appear. Be sure to include the quotes (' ') as shown in the examples, e.g. merge -e 'catalog.*' [On windows you should probably use double quotes (\") as needed.] In this tutorial you will see sections that contain dropdown that is revealed when you click on them. Below is an example (\"Like this\"). Be sure to click on those sections to see their contents - and then close them if you like. Like this more information in here","title":"Objective"},{"location":"tutorials/trestle_sample_workflow/#step-1-create-a-trestle-workspace-if-you-dont-have-one-already","text":"mkdir my_workspace cd my_workspace trestle init >>> Initialized trestle project successfully in [user_path]/my_workspace","title":"Step 1: Create a trestle workspace if you don't have one already"},{"location":"tutorials/trestle_sample_workflow/#step-2-import-a-catalog-from-the-trestle-sample-data-directory-into-your-trestle-workspace","text":"For this tutorial we will use a catalog file from NIST, but we first must import it into the trestle workspace. This can be done either by first downloading the file locally and then importing it, or you can download it directly using its url address. We will import the file directly from the NIST OSCAL github site . The specific catalog is NIST_SP-800-53_rev5_catalog.json Import the file from the url with the following command: trestle import -f https://raw.githubusercontent.com/usnistgov/oscal-content/master/nist.gov/SP800-53/rev5/json/NIST_SP-800-53_rev5_catalog.json -o mycatalog As a reminder, you could also have imported the file from a local directory on your file system, or an sftp:// address. But the file must first be imported to the trestle workspace in order for it to be directly manipulated by trestle as in this tutorial. The import command will also check the validity of the file including the presence of any duplicate uuid's. If the file is manually created please be sure it conforms with the current OSCAL schema (OSCAL version 1.0.0) and has no defined uuid's that are duplicates. If there are any errors the Import will fail and the file must be corrected. Your initial workspace will look like this my_workspace \u2523 .trestle \u2503 \u2523 .keep \u2503 \u2517 config.ini \u2523 assessment-plans \u2503 \u2517 .keep \u2523 assessment-results \u2503 \u2517 .keep \u2523 catalogs \u2503 \u2523 mycatalog \u2503 \u2503 \u2517 catalog.json \u2503 \u2517 .keep \u2523 component-definitions \u2503 \u2517 .keep \u2523 dist \u2503 \u2523 assessment-plans \u2503 \u2503 \u2517 .keep \u2503 \u2523 assessment-results \u2503 \u2503 \u2517 .keep \u2503 \u2523 catalogs \u2503 \u2503 \u2517 .keep \u2503 \u2523 component-definitions \u2503 \u2503 \u2517 .keep \u2503 \u2523 plan-of-action-and-milestones \u2503 \u2503 \u2517 .keep \u2503 \u2523 profiles \u2503 \u2503 \u2517 .keep \u2503 \u2523 system-security-plans \u2503 \u2503 \u2517 .keep \u2503 \u2517 target-definitions \u2503 \u2503 \u2517 .keep \u2523 plan-of-action-and-milestones \u2503 \u2517 .keep \u2523 profiles \u2503 \u2517 .keep \u2523 system-security-plans \u2503 \u2517 .keep \u2517 target-definitions \u2503 \u2517 .keep You will see that the directory now shows your catalog file in my_workspace/catalogs/mycatalog/catalog.json . Note that the .keep files are simply to make sure git does not remove the directories - and can be ignored. Also note that the json file itself is singular (catalog) while the directory above is plural (catalogs). This convention is used throughout trestle because a given model directory like catalogs may contain several individual models - each of which is singular. The imported catalog file size may be larger than the original due to a change in formatting, but the contents should be the same. From here on in this tutorial we will just focus on the catalogs directory since the others are not directly involved. You have now populated your trestle workspace with an OSCAL catalog that you can manipulate. Let's start.","title":"Step 2: Import a catalog from the trestle sample data directory into your trestle workspace"},{"location":"tutorials/trestle_sample_workflow/#step-3-split-the-file-into-smaller-parts","text":"The OSCAL schema specifies that a catalog must contain metadata, groups, and back-matter - so this command will pull them out of the original file and place them in separate json files for additional manipulations. To begin splitting the file, first cd to the directory where catalog.json has been placed. cd catalogs/mycatalog trestle split -f ./catalog.json -e 'catalog.metadata,catalog.groups,catalog.back-matter' Here the -f refers to the filename of the json catalog file, and -e refers to the comma-separated list of elements you would like to split from the file. This list does not represent the full file contents of the source catalog.json file, so some contents will be left behind in a much smaller catalog.json file after the split. The elements that were split off will be placed in separate json files next to the new and smaller catalog.json file. Your new catalogs directory with json files split out catalogs \u2517 mycatalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json Note there still remains a catalog.json file, but it is much smaller since the bulk of its contents have been split off. Any split step can be reversed by a corresponding merge operation. In this case we can go backwards with: trestle merge -e 'catalog.metadata,catalog.groups,catalog.back-matter' or simply trestle merge -e 'catalog.*' You can go back and forth splitting and merging, but for the next step please start with the above files split so that metadata.json can be further split.","title":"Step 3: Split the file into smaller parts"},{"location":"tutorials/trestle_sample_workflow/#step-4-split-the-metadata-into-constituent-files","text":"cd catalog trestle split -f ./metadata.json -e 'metadata.roles,metadata.parties,metadata.responsible-parties' The directory will now look like this, with metadata split into files catalogs \u2517 mycatalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 metadata \u2503 \u2503 \u2503 \u2523 parties.json \u2503 \u2503 \u2503 \u2523 responsible-parties.json \u2503 \u2503 \u2503 \u2517 roles.json \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json Again there remains a metadata.json file but it is smaller than the original. And this step can be reversed with the following: trestle merge -e 'metadata.roles,metadata.parties,metadata.responsible-parties' or simply trestle merge -e 'metadata.*'","title":"Step 4: Split the metadata into constituent files"},{"location":"tutorials/trestle_sample_workflow/#step-5-split-metadata-further-using-wildcards","text":"cd metadata trestle split -f ./roles.json -e 'roles.*' trestle split -f ./responsible-parties.json -e 'responsible-parties.*' The directory now looks like this, with new subdirectories containing multiple roles and responsible-parties catalogs \u2517 mycatalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 metadata \u2503 \u2503 \u2503 \u2523 responsible-parties \u2503 \u2503 \u2503 \u2503 \u2523 contact__responsible-party.json \u2503 \u2503 \u2503 \u2503 \u2517 creator__responsible-party.json \u2503 \u2503 \u2503 \u2523 roles \u2503 \u2503 \u2503 \u2503 \u2523 00000__role.json \u2503 \u2503 \u2503 \u2503 \u2517 00001__role.json \u2503 \u2503 \u2503 \u2517 parties.json \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2523 groups.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json Note that the presence of wildcards caused new directories to be created containing the full lists of roles and responsible parties. You can read the wildcard as split off all roles from roles.json . This split can be reversed with trestle merge -e 'roles.*,responsible-parties.*'","title":"Step 5: Split metadata further using wildcards"},{"location":"tutorials/trestle_sample_workflow/#step-6-split-groups-and-controls-with-two-wildcards","text":"This single command will split off all controls in all groups. To do it you need to go back up into the catalog directory where the groups.json file is found: cd .. trestle split -f ./groups.json -e 'groups.*.controls.*' Your directory is now very large with that one command! catalogs \u2517 mycatalog \u2503 \u2523 catalog \u2503 \u2503 \u2523 groups \u2503 \u2503 \u2503 \u2523 00000__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00022__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00023__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00024__control.json \u2503 \u2503 \u2503 \u2523 00001__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00005__control.json \u2503 \u2503 \u2503 \u2523 00002__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00015__control.json \u2503 \u2503 \u2503 \u2523 00003__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00008__control.json \u2503 \u2503 \u2503 \u2523 00004__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00013__control.json \u2503 \u2503 \u2503 \u2523 00005__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00012__control.json \u2503 \u2503 \u2503 \u2523 00006__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00011__control.json \u2503 \u2503 \u2503 \u2523 00007__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00009__control.json \u2503 \u2503 \u2503 \u2523 00008__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00006__control.json \u2503 \u2503 \u2503 \u2523 00009__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00007__control.json \u2503 \u2503 \u2503 \u2523 00010__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00022__control.json \u2503 \u2503 \u2503 \u2523 00011__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00010__control.json \u2503 \u2503 \u2503 \u2523 00012__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00022__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00023__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00024__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00025__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00026__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00027__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00028__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00029__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00030__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00031__control.json \u2503 \u2503 \u2503 \u2523 00013__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00008__control.json \u2503 \u2503 \u2503 \u2523 00014__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00007__control.json \u2503 \u2503 \u2503 \u2523 00015__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00009__control.json \u2503 \u2503 \u2503 \u2523 00016__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00022__control.json \u2503 \u2503 \u2503 \u2523 00017__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00022__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00023__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00024__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00025__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00026__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00027__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00028__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00029__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00030__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00031__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00032__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00033__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00034__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00035__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00036__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00037__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00038__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00039__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00040__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00041__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00042__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00043__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00044__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00045__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00046__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00047__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00048__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00049__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00050__control.json \u2503 \u2503 \u2503 \u2523 00018__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00011__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00012__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00013__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00014__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00015__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00016__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00017__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00018__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00019__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00020__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00021__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00022__control.json \u2503 \u2503 \u2503 \u2523 00019__group \u2503 \u2503 \u2503 \u2503 \u2517 controls \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00000__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00001__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00002__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00003__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00004__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00005__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00006__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00007__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00008__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00009__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 00010__control.json \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 00011__control.json \u2503 \u2503 \u2503 \u2523 00000__group.json \u2503 \u2503 \u2503 \u2523 00001__group.json \u2503 \u2503 \u2503 \u2523 00002__group.json \u2503 \u2503 \u2503 \u2523 00003__group.json \u2503 \u2503 \u2503 \u2523 00004__group.json \u2503 \u2503 \u2503 \u2523 00005__group.json \u2503 \u2503 \u2503 \u2523 00006__group.json \u2503 \u2503 \u2503 \u2523 00007__group.json \u2503 \u2503 \u2503 \u2523 00008__group.json \u2503 \u2503 \u2503 \u2523 00009__group.json \u2503 \u2503 \u2503 \u2523 00010__group.json \u2503 \u2503 \u2503 \u2523 00011__group.json \u2503 \u2503 \u2503 \u2523 00012__group.json \u2503 \u2503 \u2503 \u2523 00013__group.json \u2503 \u2503 \u2503 \u2523 00014__group.json \u2503 \u2503 \u2503 \u2523 00015__group.json \u2503 \u2503 \u2503 \u2523 00016__group.json \u2503 \u2503 \u2503 \u2523 00017__group.json \u2503 \u2503 \u2503 \u2523 00018__group.json \u2503 \u2503 \u2503 \u2517 00019__group.json \u2503 \u2503 \u2523 metadata \u2503 \u2503 \u2503 \u2523 responsible-parties \u2503 \u2503 \u2503 \u2503 \u2523 contact__responsible-party.json \u2503 \u2503 \u2503 \u2503 \u2517 creator__responsible-party.json \u2503 \u2503 \u2503 \u2523 roles \u2503 \u2503 \u2503 \u2503 \u2523 00000__role.json \u2503 \u2503 \u2503 \u2503 \u2517 00001__role.json \u2503 \u2503 \u2503 \u2517 parties.json \u2503 \u2503 \u2523 back-matter.json \u2503 \u2503 \u2517 metadata.json \u2503 \u2517 catalog.json All 20 groups of controls have been split off, and each one has a corresponding directory with its full list of controls in it. You can then reverse the split with trestle merge -e 'groups.*'","title":"Step 6: Split groups and controls with two wildcards"},{"location":"tutorials/trestle_sample_workflow/#step-7-collapse-the-entire-directory-structure-back-into-a-single-catalogjson-file-possibly-after-modifying-individual-files","text":"You can collapse everything back to a single catalog.json file after first going up one directory to the mycatalog directory cd .. trestle merge -e 'catalog.*' After all that splitting and merging you are back to this directory structure catalogs \u2517 mycatalog \u2503 \u2517 catalog.json","title":"Step 7: Collapse the entire directory structure back into a single catalog.json file - possibly after modifying individual files"},{"location":"tutorials/trestle_sample_workflow/#conclusion","text":"This completes the tutorial on using trestle to split and merge an OSCAL catalog file. Not shown here are modifications of the individual files that would be done in an actual use case, but note that if any changes are made that violate the OSCAL schema, trestle will notice them and flag them in the merge. This way not only does trestle allow user-driven decomposition and aggregation of these large, complex files; it also does constant checks on the contents against the required schema to make sure no errors are introduced in the process.","title":"Conclusion"},{"location":"tutorials/continuous-compliance/continuous-compliance/","text":"Tutorial: What\u2019s your compliance posture? \u00a4 Introduction \u00a4 The cloud with continuous integration and continuous deployment is the modern computing paradigm. There are a plethora of cloud environments: public, private, on-premise, hybrid-cloud, multi-cloud, etc. and a contingent of vendors. The cloud offers great flexibility where you can choose the right one or use some combination for the each application. But as is demonstrated from time to time, the cloud can be a dangerous place. Hackers, bots, malware, and more are out to find and exploit weakness in your computing solution. To combat them there are strategies for avoiding embarrassment and financial ruin from security breeches. Educating your workforce is of paramount importance. Moreover, employing a trust-but-verify strategy will go a long way toward deflecting trouble. The time has come for continuous auditing, giving stakeholders such as account owners, application owners, system owners and compliance officers a current picture of their compliance posture. Are password rules being followed? Are deployed applications using compromised encryption algorithms? Has a user gotten elevated privileges? Are unauthorized open source projects wrongfully part of your application stack? Getting answers to these questions quarterly or annually is leaving you exposed. Moreover, assuring continuous compliance across multiple cloud vendors can complicate matters. If each has its own compliance regime, then one must become expert in each domain\u2019s compliance solution space, or else be wedded to a single or few providers. Not an ideal prospect. Common sense dictates that standardization would simplify matters. The National Institute of Standards and Technologies (NIST) is developing the Open Security Controls Assessment Language ( OSCAL ). The compliance- trestle open source github project is an effort to employ OSCAL for compliance standardization and automation. Of great utility is the trestle oscal module that facilitates transformation of data to/from Python object representations in accordance with the OSCAL schemas. Simple Continuous Compliance Architecture \u00a4 Cloud Services can often be configured to monitor (and sometimes enforce) policies. Examples include OpenShift Compliance Operator and Tanium. However, the compliance reporting \u201craw\u201d data produced is unique to each. Two steps are needed to ascertain your compliance posture. Step 1 is to transform available compliance \u201craw\u201d data into standardized form ( OSCAL ). Step 2 is to examine the OSCAL data and assemble a compliance posture for the controls and components of interest. And trestle is the go-to solution. Step 1 \u2013 Transformation \u00a4 The bad news is that a transformer to OSCAL is needed for each Cloud Service type. However, there is plenty of good news: a transformer for your Cloud Service type may already exist: Tanium to OSCAL , OpenShift Compliance Operator to OSCAL once a transformer for a Cloud Service type has been written, it can be open-sourced/re-used writing a transformer is pretty easy, just a few lines of Python code using trestle as a foundation In the case of Tanium, the OSCAL compliance data document is a System Assessment Results fragment with Findings and Observations , while in the case of OpenShift Compliance Operator there are Observations only. Tutorials are available to show you: how to run a transformer , how to write a transformer . Step 2 \u2013 Reporting \u00a4 Coming soon is a trestle tool to assemble the OSCAL fragments documents together using OSCAL compliance configuration data ( System Assessment Plan and System Security Plan ) into a complete System Assessment Results .","title":"Compliance posture"},{"location":"tutorials/continuous-compliance/continuous-compliance/#tutorial-whats-your-compliance-posture","text":"","title":"Tutorial: What\u2019s your compliance posture?"},{"location":"tutorials/continuous-compliance/continuous-compliance/#introduction","text":"The cloud with continuous integration and continuous deployment is the modern computing paradigm. There are a plethora of cloud environments: public, private, on-premise, hybrid-cloud, multi-cloud, etc. and a contingent of vendors. The cloud offers great flexibility where you can choose the right one or use some combination for the each application. But as is demonstrated from time to time, the cloud can be a dangerous place. Hackers, bots, malware, and more are out to find and exploit weakness in your computing solution. To combat them there are strategies for avoiding embarrassment and financial ruin from security breeches. Educating your workforce is of paramount importance. Moreover, employing a trust-but-verify strategy will go a long way toward deflecting trouble. The time has come for continuous auditing, giving stakeholders such as account owners, application owners, system owners and compliance officers a current picture of their compliance posture. Are password rules being followed? Are deployed applications using compromised encryption algorithms? Has a user gotten elevated privileges? Are unauthorized open source projects wrongfully part of your application stack? Getting answers to these questions quarterly or annually is leaving you exposed. Moreover, assuring continuous compliance across multiple cloud vendors can complicate matters. If each has its own compliance regime, then one must become expert in each domain\u2019s compliance solution space, or else be wedded to a single or few providers. Not an ideal prospect. Common sense dictates that standardization would simplify matters. The National Institute of Standards and Technologies (NIST) is developing the Open Security Controls Assessment Language ( OSCAL ). The compliance- trestle open source github project is an effort to employ OSCAL for compliance standardization and automation. Of great utility is the trestle oscal module that facilitates transformation of data to/from Python object representations in accordance with the OSCAL schemas.","title":"Introduction"},{"location":"tutorials/continuous-compliance/continuous-compliance/#simple-continuous-compliance-architecture","text":"Cloud Services can often be configured to monitor (and sometimes enforce) policies. Examples include OpenShift Compliance Operator and Tanium. However, the compliance reporting \u201craw\u201d data produced is unique to each. Two steps are needed to ascertain your compliance posture. Step 1 is to transform available compliance \u201craw\u201d data into standardized form ( OSCAL ). Step 2 is to examine the OSCAL data and assemble a compliance posture for the controls and components of interest. And trestle is the go-to solution.","title":"Simple Continuous Compliance Architecture"},{"location":"tutorials/continuous-compliance/continuous-compliance/#step-1-transformation","text":"The bad news is that a transformer to OSCAL is needed for each Cloud Service type. However, there is plenty of good news: a transformer for your Cloud Service type may already exist: Tanium to OSCAL , OpenShift Compliance Operator to OSCAL once a transformer for a Cloud Service type has been written, it can be open-sourced/re-used writing a transformer is pretty easy, just a few lines of Python code using trestle as a foundation In the case of Tanium, the OSCAL compliance data document is a System Assessment Results fragment with Findings and Observations , while in the case of OpenShift Compliance Operator there are Observations only. Tutorials are available to show you: how to run a transformer , how to write a transformer .","title":"Step 1 \u2013 Transformation"},{"location":"tutorials/continuous-compliance/continuous-compliance/#step-2-reporting","text":"Coming soon is a trestle tool to assemble the OSCAL fragments documents together using OSCAL compliance configuration data ( System Assessment Plan and System Security Plan ) into a complete System Assessment Results .","title":"Step 2 \u2013 Reporting"},{"location":"tutorials/task.tanuim-to-oscal/transformation/","text":"Tutorial: Setup for and use of Tanium to OSCAL transformer \u00a4 Here are step by step instructions for setup and transformation of Tanium compliance data files into NIST standard OSCAL using the compliance-trestle tool. Objective \u00a4 How to transform a Tanium.results compliance file into a standardized OSCAL.json file. There are 2 short steps shown below. The first is a one-time check/set-up of your environment. The second is a one-command transformation form Tanium to OSCAL. Step 1: Environment setup \u00a4 Linux, Mac Windows Make these changes: use backslashes `\\` for file paths use `md` instead of mkdir -p put the url in double quotes for `curl` use `more` instead of cat Insure you have a modern Python (3.7, 3.8, 3.9). $ python -V Python 3.8.3 Setup a virtual environment. $ cd $ python -m venv venv.trestle $ source venv.trestle/bin/activate (venv.trestle)$ Insure you have a modern pip (19.x or greater). (venv.trestle)$ pip --version pip 19.2.3 from /home... Install compliance-trestle . (venv.trestle)$ pip install compliance-trestle Looking in indexes: https://pypi.org/simple,... Check trestle viability (and view help). (venv.trestle)$ trestle -h usage: trestle [-h] {init,create,split,merge,replicate,add,remove,validate,import,task,assemble} ... Create trestle workspace. (venv.trestle)$ mkdir trestle.workspace (venv.trestle)$ cd trestle.workspace (venv.trestle)$ trestle init Initialized trestle project successfully in /home/<user>/trestle.workspace Step 2: Transform sample \u00a4 Create Tanium data folders. (venv.trestle)$ mkdir -p tanium/tests/data/tasks/tanium/input Fetch sample Tanium data file. It is a \"raw\" Tanium report for which a transformation to OSCAL is desired. (venv.trestle)$ curl 'https://raw.githubusercontent.com/IBM/compliance-trestle/develop/tests/data/tasks/tanium/input-doc/Tanium.comply-nist-results' > tanium/tests/data/tasks/tanium/input/Tanium.doc-json sample: Tanium.doc-json {\"Computer Name\":\"RHEL8\",\"Tanium Client IP Address\":\"192.168.0.125\",\"IP Address\":[\"192.168.0.125\",\"192.168.122.1\",\"fe80::3c47:1aff:fe33:601\"],\"Comply - Compliance Findings\":[{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\",\"State\":\"fail\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\",\"State\":\"fail\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\",\"State\":\"fail\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\",\"State\":\"pass\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\",\"State\":\"pass\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\",\"State\":\"pass\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\",\"State\":\"pass\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\",\"State\":\"fail\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\",\"State\":\"notchecked\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\"}],\"Count\":\"1\"} Fetch sample trestle tanium-to-oscal config file. It informs the trestle command where to read input and write output. (venv.trestle)$ curl 'https://raw.githubusercontent.com/IBM/compliance-trestle/develop/tests/data/tasks/tanium/demo-tanium-to-oscal.config' > tanium/demo-tanium-to-oscal.config sample: demo-tanium-to-oscal.config [task.tanium-to-oscal] input-dir = tests/data/tasks/tanium/input output-dir = tests/data/tasks/tanium/runtime Perform the transform. (venv.trestle)$ cd tanium (venv.trestle)$ trestle task tanium-to-oscal -c demo-tanium-to-oscal.config input: tests/data/tasks/tanium/input/Tanium.doc-json output: tests/data/tasks/tanium/runtime/Tanium.oscal.json inventory: 1 observations: 9 Task: tanium-to-oscal executed successfully. View the generated OSCAL. (venv.trestle)$ cat tests/data/tasks/tanium/runtime/Tanium.oscal.json sample: Tanium.oscal.json { \"results\": [ { \"uuid\": \"f79add8e-488a-45f3-9024-72ecf95c7952\", \"title\": \"Tanium\", \"description\": \"Tanium\", \"start\": \"2021-05-12T13:46:46.000+00:00\", \"end\": \"2021-05-12T13:46:46.000+00:00\", \"local-definitions\": { \"components\": { \"1ea447fe-a2af-4110-baae-c70ed5223261\": { \"type\": \"Operating System\", \"title\": \"Red Hat Enterprise Linux 8\", \"description\": \"Red Hat Enterprise Linux 8\", \"status\": { \"state\": \"operational\" } } }, \"inventory-items\": [ { \"uuid\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"description\": \"inventory\", \"props\": [ { \"name\": \"Computer Name\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"RHEL8\" }, { \"name\": \"Tanium Client IP Address\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"192.168.0.125\", \"class\": \"scc_inventory_item_id\" }, { \"name\": \"IP Address\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"['192.168.0.125', '192.168.122.1', 'fe80::3c47:1aff:fe33:601']\" }, { \"name\": \"Count\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1\" } ], \"implemented-components\": [ { \"component-uuid\": \"1ea447fe-a2af-4110-baae-c70ed5223261\" } ] } ] }, \"reviewed-controls\": { \"control-selections\": [ {} ] }, \"observations\": [ { \"uuid\": \"e67f5fd9-5b1f-4134-a67e-cebdc2e5735c\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"6cb81459-9c25-4a8b-bf3c-d8ff08ee728c\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"9453eaed-db41-4a20-b684-2887de2d9657\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"a37c2569-8695-4cfe-8b5c-bd8d6eaf9df7\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"pass\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"b77e1b49-a818-4d43-adaf-69effcbd9219\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"pass\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"ac25b329-7a4a-45f4-b42b-1cce470e237b\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"pass\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"f9c0f033-f08b-431d-b411-fe1f63c2c98c\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"pass\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"149a814e-7f80-4e6d-a613-54f027e0d663\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"a0e602b5-e587-41c5-846b-675b26cf3e18\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"notchecked\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" } ], \"findings\": [ { \"uuid\": \"00000000-0000-4000-8000-000000000000\", \"title\": \"No Finding.\", \"description\": \"No Finding.\" } ] } ] } Congratulations! You have bridged Tanium data into an OSCAL Assessment Results Findings report using compliance-trestle. Newtown, Victoria","title":"Task - tanium-to-oscal"},{"location":"tutorials/task.tanuim-to-oscal/transformation/#tutorial-setup-for-and-use-of-tanium-to-oscal-transformer","text":"Here are step by step instructions for setup and transformation of Tanium compliance data files into NIST standard OSCAL using the compliance-trestle tool.","title":"Tutorial: Setup for and use of Tanium to OSCAL transformer"},{"location":"tutorials/task.tanuim-to-oscal/transformation/#objective","text":"How to transform a Tanium.results compliance file into a standardized OSCAL.json file. There are 2 short steps shown below. The first is a one-time check/set-up of your environment. The second is a one-command transformation form Tanium to OSCAL.","title":"Objective"},{"location":"tutorials/task.tanuim-to-oscal/transformation/#step-1-environment-setup","text":"Linux, Mac Windows Make these changes: use backslashes `\\` for file paths use `md` instead of mkdir -p put the url in double quotes for `curl` use `more` instead of cat Insure you have a modern Python (3.7, 3.8, 3.9). $ python -V Python 3.8.3 Setup a virtual environment. $ cd $ python -m venv venv.trestle $ source venv.trestle/bin/activate (venv.trestle)$ Insure you have a modern pip (19.x or greater). (venv.trestle)$ pip --version pip 19.2.3 from /home... Install compliance-trestle . (venv.trestle)$ pip install compliance-trestle Looking in indexes: https://pypi.org/simple,... Check trestle viability (and view help). (venv.trestle)$ trestle -h usage: trestle [-h] {init,create,split,merge,replicate,add,remove,validate,import,task,assemble} ... Create trestle workspace. (venv.trestle)$ mkdir trestle.workspace (venv.trestle)$ cd trestle.workspace (venv.trestle)$ trestle init Initialized trestle project successfully in /home/<user>/trestle.workspace","title":"Step 1: Environment setup"},{"location":"tutorials/task.tanuim-to-oscal/transformation/#step-2-transform-sample","text":"Create Tanium data folders. (venv.trestle)$ mkdir -p tanium/tests/data/tasks/tanium/input Fetch sample Tanium data file. It is a \"raw\" Tanium report for which a transformation to OSCAL is desired. (venv.trestle)$ curl 'https://raw.githubusercontent.com/IBM/compliance-trestle/develop/tests/data/tasks/tanium/input-doc/Tanium.comply-nist-results' > tanium/tests/data/tasks/tanium/input/Tanium.doc-json sample: Tanium.doc-json {\"Computer Name\":\"RHEL8\",\"Tanium Client IP Address\":\"192.168.0.125\",\"IP Address\":[\"192.168.0.125\",\"192.168.122.1\",\"fe80::3c47:1aff:fe33:601\"],\"Comply - Compliance Findings\":[{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\",\"State\":\"fail\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\",\"State\":\"fail\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\",\"State\":\"fail\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\",\"State\":\"pass\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\",\"State\":\"pass\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\",\"State\":\"pass\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\",\"State\":\"pass\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\",\"State\":\"fail\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\"},{\"Check ID\":\"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\",\"State\":\"notchecked\",\"Rule ID\":\"xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\"}],\"Count\":\"1\"} Fetch sample trestle tanium-to-oscal config file. It informs the trestle command where to read input and write output. (venv.trestle)$ curl 'https://raw.githubusercontent.com/IBM/compliance-trestle/develop/tests/data/tasks/tanium/demo-tanium-to-oscal.config' > tanium/demo-tanium-to-oscal.config sample: demo-tanium-to-oscal.config [task.tanium-to-oscal] input-dir = tests/data/tasks/tanium/input output-dir = tests/data/tasks/tanium/runtime Perform the transform. (venv.trestle)$ cd tanium (venv.trestle)$ trestle task tanium-to-oscal -c demo-tanium-to-oscal.config input: tests/data/tasks/tanium/input/Tanium.doc-json output: tests/data/tasks/tanium/runtime/Tanium.oscal.json inventory: 1 observations: 9 Task: tanium-to-oscal executed successfully. View the generated OSCAL. (venv.trestle)$ cat tests/data/tasks/tanium/runtime/Tanium.oscal.json sample: Tanium.oscal.json { \"results\": [ { \"uuid\": \"f79add8e-488a-45f3-9024-72ecf95c7952\", \"title\": \"Tanium\", \"description\": \"Tanium\", \"start\": \"2021-05-12T13:46:46.000+00:00\", \"end\": \"2021-05-12T13:46:46.000+00:00\", \"local-definitions\": { \"components\": { \"1ea447fe-a2af-4110-baae-c70ed5223261\": { \"type\": \"Operating System\", \"title\": \"Red Hat Enterprise Linux 8\", \"description\": \"Red Hat Enterprise Linux 8\", \"status\": { \"state\": \"operational\" } } }, \"inventory-items\": [ { \"uuid\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"description\": \"inventory\", \"props\": [ { \"name\": \"Computer Name\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"RHEL8\" }, { \"name\": \"Tanium Client IP Address\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"192.168.0.125\", \"class\": \"scc_inventory_item_id\" }, { \"name\": \"IP Address\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"['192.168.0.125', '192.168.122.1', 'fe80::3c47:1aff:fe33:601']\" }, { \"name\": \"Count\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1\" } ], \"implemented-components\": [ { \"component-uuid\": \"1ea447fe-a2af-4110-baae-c70ed5223261\" } ] } ] }, \"reviewed-controls\": { \"control-selections\": [ {} ] }, \"observations\": [ { \"uuid\": \"e67f5fd9-5b1f-4134-a67e-cebdc2e5735c\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.1_Ensure_mounting_of_cramfs_filesystems_is_disabled\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"6cb81459-9c25-4a8b-bf3c-d8ff08ee728c\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.3_Ensure_mounting_of_squashfs_filesystems_is_disabled\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"9453eaed-db41-4a20-b684-2887de2d9657\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1.4_Ensure_mounting_of_udf_filesystems_is_disabled\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"a37c2569-8695-4cfe-8b5c-bd8d6eaf9df7\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.10_Ensure_noexec_option_set_on_vartmp_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"pass\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"b77e1b49-a818-4d43-adaf-69effcbd9219\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.14_Ensure_nodev_option_set_on_home_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"pass\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"ac25b329-7a4a-45f4-b42b-1cce470e237b\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.15_Ensure_nodev_option_set_on_devshm_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"pass\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"f9c0f033-f08b-431d-b411-fe1f63c2c98c\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.16_Ensure_nosuid_option_set_on_devshm_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"pass\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"149a814e-7f80-4e6d-a613-54f027e0d663\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.17_Ensure_noexec_option_set_on_devshm_partition\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"fail\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" }, { \"uuid\": \"a0e602b5-e587-41c5-846b-675b26cf3e18\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\", \"props\": [ { \"name\": \"Check ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark;1.0.0-1;Level 1 - Server;1;xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\" }, { \"name\": \"Check ID Benchmark\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"CIS Red Hat Enterprise Linux 8 Benchmark\", \"class\": \"scc_predefined_profile\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_check_version\" }, { \"name\": \"Check ID Version\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"1.0.0-1\", \"class\": \"scc_predefined_profile_version\" }, { \"name\": \"Check ID Level\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"Level 1 - Server\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\", \"class\": \"scc_goal_description\" }, { \"name\": \"Rule ID\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.18_Ensure_nodev_option_set_on_removable_media_partitions\", \"class\": \"scc_check_name_id\" }, { \"name\": \"State\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"notchecked\", \"class\": \"scc_result\" }, { \"name\": \"Timestamp\", \"ns\": \"http://ibm.github.io/compliance-trestle/schemas/oscal/ar/tanium\", \"value\": \"2021-05-12T13:46:46+00:00\", \"class\": \"scc_timestamp\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2d33d2b0-af5c-4c37-85b1-e4f414183de2\", \"type\": \"inventory-item\" } ], \"collected\": \"2021-05-12T13:46:46.000+00:00\" } ], \"findings\": [ { \"uuid\": \"00000000-0000-4000-8000-000000000000\", \"title\": \"No Finding.\", \"description\": \"No Finding.\" } ] } ] } Congratulations! You have bridged Tanium data into an OSCAL Assessment Results Findings report using compliance-trestle. Newtown, Victoria","title":"Step 2: Transform sample"},{"location":"tutorials/task.transformer-construction/transformer-construction/","text":"Tutorial: How to build an Oscal Assessment Results \"lite\" with Trestle SDK from your posture result format \u00a4 The compliance-trestle (trestle) project provides helpful modules to assist your standardization efforts. Discussed below are some best practices for automated bridging to NIST OSCAL. Why NIST OSCAL? \u00a4 The Open Security Controls Assessment Language OSCAL is a set of formats expressed in XML, JSON, and YAML that provide machine-readable representations of control catalogs, control baselines, system security plans, and assessment plans and results as adopted by the National Institute of Standards and Technology NIST . Standardizing to OSCAL facilitates data interchange and understandability. Objective \u00a4 The objective here is to transform your compliance data into valid OSCAL, in particular System Assessment Results SAR . Examples of existing transformers included with trestle are for the OpenShift Compliance Operator OSCO and Tanium . Overview \u00a4 You have a source of compliance data that is in non-OSCAL format (spreadsheet, XML, JSON, database, object-store...) and you would like to transform into standardized form in terms of NIST OSCAL. Presumed is an existing method for obtaining the compliance data from the cloud and materializing on disk as one or more files. Source files on disk (pink) is our starting point. OSCAL files on disk (blue) is our ending point. OSCAL object management and emitter Python code are provided by trestle (green). Transformation Python code (yellow) is to be written by you. Other possible code stack configurations (not shown): write your own command module (file interface), but use trestle logic module (data processing) write your own command and logic modules, but rely on trestle OSCAL support and base For example, one could create an auditree-arboretum harvest report (file interface) that employs the trestle osco-to-oscal transformation (data processing) module. Choose Mapping Strategy \u00a4 There are 3 potential levels of OSCAL Assessment Results that can be emitted by your transformer. From most complex to least complex they are: a complete SAR a partial SAR comprising Findings with Observations a partial SAR comprising Observations only Below is a snippet from the SAR model with these three levels shown. Although producing a complete SAR is possible, this transformation is not covered here. We focus on partial results, either Observations only or Observations with Findings. Based on the data in hand from your compliance data source, and additional metadata that can be made available at the time of transformation, choose the best fit. Observations only \u00a4 Emitting Observations only requires just rudimentary source data. For example, if each instance of source data includes not much more than: inventory-name: ssg-ocp4-ds-cis-111.222.333.444-pod rule-name: xccdf_org.ssgproject.content_rule_scheduler_profiling_argument rule-result: fail then the best mapping would be to an Observations only. example snippet: instance suitable for mapping to Observation data: <rule-result idref=\"xccdf_org.ssgproject.content_rule_scheduler_profiling_argument\" time=\"2020-08-03T02:26:26+00:00\" severity=\"low\" weight=\"1.000000\"> <result>fail</result> </rule-result> metadata: name: ssg-ocp4-ds-cis-111.222.333.444-pod example snippet: instance OSCAL Observation { \"uuid\": \"56666738-0f9a-4e38-9aac-c0fad00a5821\", \"title\": \"xccdf_org.ssgproject.content_rule_scheduler_profiling_argument\", \"description\": \"xccdf_org.ssgproject.content_rule_scheduler_profiling_argument\", \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"56666738-0f9a-4e38-9aac-c0fad00a5821\", \"type\": \"component\", \"title\": \"Red Hat OpenShift Kubernetes\" }, { \"uuid-ref\": \"46aADFAC-A1fd-4Cf0-a6aA-d1AfAb3e0d3e\", \"type\": \"inventory-item\", \"title\": \"Pod\", \"props\": [ { \"name\": \"target\", \"value\": \"kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp\" }, { \"name\": \"cluster-name\", \"value\": \"ROKS-OpenSCAP-1\" }, { \"name\": \"cluster-type\", \"value\": \"openshift\" }, { \"name\": \"cluster-region\", \"value\": \"us-south\" } ] } ], \"relevant-evidence\": [ { \"href\": \"https://github.mycorp.com/degenaro/evidence-locker\", \"description\": \"Evidence location.\", \"props\": [ { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"class\": \"id\", \"value\": \"xccdf_org.ssgproject.content_rule_scheduler_profiling_argument\" }, { \"name\": \"time\", \"ns\": \"dns://xccdf\", \"class\": \"timestamp\", \"value\": \"2020-08-03T02:26:26+00:00\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"class\": \"result\", \"value\": \"fail\" }, { \"name\": \"target\", \"ns\": \"dns://xccdf\", \"class\": \"target\", \"value\": \"kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp\" } ] } ] }, Findings with Observations \u00a4 To additionally produce Findings, information about the controls associated with each rule-name is required. The control information can be part of the source data itself or can be provided as one or more supplemental metadata files. If each instance of source data includes: inventory-name: cmp-wn-2115.demo.tanium.local rule-name: xccdf_org.cisecurity.benchmarks_rule_19.7.44.2.1_L2_Ensure_Prevent_Codec_Download_is_set_to_Enabled rule-result: fail control-name: 800-53: SC-18 then the best mapping wound be to Findings with Observations. example snippet: xml instance suitable for mapping to Finding with Observation {\"IP Address\":\"10.8.68.218\", \"Computer Name\":\"cmp-wn-2115.demo.tanium.local\", \"Comply - JovalCM Results[c2dc8749]\": [{ \"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"Benchmark Version\":\"1.5.0.1\", \"Profile\":\"Windows 10 - NIST 800-53\", \"ID\":\"xccdf_org.cisecurity.benchmarks_rule_19.7.44.2.1_L2_Ensure_Prevent_Codec_Download_is_set_to_Enabled\", \"Result\":\"fail\", \"Custom ID\":\"800-53: SC-18\", \"Version\":\"version: 1\" } ], \"Count\":\"1\", \"Age\":\"600\" } example snippet: instance OSCAL Finding \"findings\": [ { \"uuid\": \"99c0a0de-e34e-4e22-95a1-1d4f24826565\", \"title\": \"800-53: IA-5\", \"description\": \"800-53: IA-5\", \"collected\": \"2021-03-16T13:29:14.000+00:00\", \"objective-status\": { \"props\": [ { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"class\": \"source\", \"value\": \"NIST 800-53\" }, { \"name\": \"id-ref\", \"ns\": \"dns://tanium\", \"class\": \"source\", \"value\": \"IA-5\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"class\": \"STRVALUE\", \"value\": \"FAIL\" } ], \"status\": \"not-satisfied\" }, \"related-observations\": [ { \"observation-uuid\": \"61092735-e365-4638-bc2c-ecd0ed407e73\" }, { \"observation-uuid\": \"95a20b8e-ed0a-4b6c-bf87-8789265c7158\" }, example snippet: instance OSCAL Observation \"observations\": [ { \"uuid\": \"61092735-e365-4638-bc2c-ecd0ed407e73\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"class\": \"source\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"class\": \"id\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"class\": \"result\", \"value\": \"pass\" }, { \"name\": \"time\", \"ns\": \"dns://xccdf\", \"class\": \"timestamp\", \"value\": \"2021-03-16T13:29:14+00:00\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2650b9ba-e767-4381-9a3f-127d1552d7d2\", \"type\": \"inventory-item\" } ] example snippet: local definitions \"results\": [ { \"uuid\": \"98028241-8705-4211-bf36-71e1f7aa6192\", \"title\": \"Tanium\", \"description\": \"Tanium\", \"start\": \"2021-03-16T13:29:14.000+00:00\", \"local-definitions\": { \"inventory-items\": [ { \"uuid\": \"2650b9ba-e767-4381-9a3f-127d1552d7d2\", \"description\": \"inventory\", \"props\": [ { \"name\": \"computer-name\", \"ns\": \"dns://tanium\", \"class\": \" inventory-item\", \"value\": \"cmp-wn-2106.demo.tanium.local\" }, { \"name\": \"computer-ip\", \"ns\": \"dns://tanium\", \"class\": \" inventory-item\", \"value\": \"fe80::3cd5:564b:940e:49ab\" }, { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"class\": \" inventory-item\", \"value\": \"Windows 10\" } ] }, Implement Mapping Strategy \u00a4 The best practice for building a transformer is to employ layers. Recall that the top two layers (in yellow) are for you to implement, while the bottom two layers (in green) are provided by trestle to assist you. Trestle is a Python based multi-faceted platform that simplifies this task by providing a set of Python classes which enforce adherence to the OSCAL schema, insuring that the produced OSCAL validates. file interfacing (read/write files) data processing (in-memory object structure construction) use of OSCAL versioned platform objects (trestle base and oscal functionality) File Interfacing \u00a4 Write a command line tool, for example a trestle task or auditree-arboretum harvest report that: imports the commensurate data processing module reads the input send input to data processing module receives transformed data from data processing module writes the output Data Processing \u00a4 Write a data processing module that receives data, and optionally metadata, for transformation from native form into OSCAL. Separation from the command line file read/write mechanism allows for module re-use. The module should: import the trestle oscal module receive input data to be transformed receive metadata, optionally transform input into trestle oscal classes hierarchy send transformed OSCAL data in return For the Observation only case, the transform is straight forward. Code should create one Observation for each rule/result pair. For the Findings case, a bit more logic is required. Code should accumulate Observations for each Finding and determine an overall status for it. For example, if 15 Observations are found for Finding control AC-3, where 14 have result=PASS and 1 has result=FAIL, then the overall status for the Finding would be not satisfied with overall result=FAIL. Examples \u00a4 There are 2 transformers in trestle. The osco-to-oscal transformer emits OSCAL Observations, the simplest partial result. The tanium-to-oscal transformer emits OSCAL Findings, a more complex partial result. Table of approximate lines of code. task-name OSCAL type file interface data processing test cases osco-to-oscal Observations only 275 350 400 tanum-to-oscal Findings, with Observations 200 350 300 Contributing \u00a4 Consider contributing your transformer to trestle or auditree-arboretum or other appropriate open source repository.","title":"Transformer construction"},{"location":"tutorials/task.transformer-construction/transformer-construction/#tutorial-how-to-build-an-oscal-assessment-results-lite-with-trestle-sdk-from-your-posture-result-format","text":"The compliance-trestle (trestle) project provides helpful modules to assist your standardization efforts. Discussed below are some best practices for automated bridging to NIST OSCAL.","title":"Tutorial: How to build an Oscal Assessment Results \"lite\" with Trestle SDK from your posture result format"},{"location":"tutorials/task.transformer-construction/transformer-construction/#why-nist-oscal","text":"The Open Security Controls Assessment Language OSCAL is a set of formats expressed in XML, JSON, and YAML that provide machine-readable representations of control catalogs, control baselines, system security plans, and assessment plans and results as adopted by the National Institute of Standards and Technology NIST . Standardizing to OSCAL facilitates data interchange and understandability.","title":"Why NIST OSCAL?"},{"location":"tutorials/task.transformer-construction/transformer-construction/#objective","text":"The objective here is to transform your compliance data into valid OSCAL, in particular System Assessment Results SAR . Examples of existing transformers included with trestle are for the OpenShift Compliance Operator OSCO and Tanium .","title":"Objective"},{"location":"tutorials/task.transformer-construction/transformer-construction/#overview","text":"You have a source of compliance data that is in non-OSCAL format (spreadsheet, XML, JSON, database, object-store...) and you would like to transform into standardized form in terms of NIST OSCAL. Presumed is an existing method for obtaining the compliance data from the cloud and materializing on disk as one or more files. Source files on disk (pink) is our starting point. OSCAL files on disk (blue) is our ending point. OSCAL object management and emitter Python code are provided by trestle (green). Transformation Python code (yellow) is to be written by you. Other possible code stack configurations (not shown): write your own command module (file interface), but use trestle logic module (data processing) write your own command and logic modules, but rely on trestle OSCAL support and base For example, one could create an auditree-arboretum harvest report (file interface) that employs the trestle osco-to-oscal transformation (data processing) module.","title":"Overview"},{"location":"tutorials/task.transformer-construction/transformer-construction/#choose-mapping-strategy","text":"There are 3 potential levels of OSCAL Assessment Results that can be emitted by your transformer. From most complex to least complex they are: a complete SAR a partial SAR comprising Findings with Observations a partial SAR comprising Observations only Below is a snippet from the SAR model with these three levels shown. Although producing a complete SAR is possible, this transformation is not covered here. We focus on partial results, either Observations only or Observations with Findings. Based on the data in hand from your compliance data source, and additional metadata that can be made available at the time of transformation, choose the best fit.","title":"Choose Mapping Strategy"},{"location":"tutorials/task.transformer-construction/transformer-construction/#observations-only","text":"Emitting Observations only requires just rudimentary source data. For example, if each instance of source data includes not much more than: inventory-name: ssg-ocp4-ds-cis-111.222.333.444-pod rule-name: xccdf_org.ssgproject.content_rule_scheduler_profiling_argument rule-result: fail then the best mapping would be to an Observations only. example snippet: instance suitable for mapping to Observation data: <rule-result idref=\"xccdf_org.ssgproject.content_rule_scheduler_profiling_argument\" time=\"2020-08-03T02:26:26+00:00\" severity=\"low\" weight=\"1.000000\"> <result>fail</result> </rule-result> metadata: name: ssg-ocp4-ds-cis-111.222.333.444-pod example snippet: instance OSCAL Observation { \"uuid\": \"56666738-0f9a-4e38-9aac-c0fad00a5821\", \"title\": \"xccdf_org.ssgproject.content_rule_scheduler_profiling_argument\", \"description\": \"xccdf_org.ssgproject.content_rule_scheduler_profiling_argument\", \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"56666738-0f9a-4e38-9aac-c0fad00a5821\", \"type\": \"component\", \"title\": \"Red Hat OpenShift Kubernetes\" }, { \"uuid-ref\": \"46aADFAC-A1fd-4Cf0-a6aA-d1AfAb3e0d3e\", \"type\": \"inventory-item\", \"title\": \"Pod\", \"props\": [ { \"name\": \"target\", \"value\": \"kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp\" }, { \"name\": \"cluster-name\", \"value\": \"ROKS-OpenSCAP-1\" }, { \"name\": \"cluster-type\", \"value\": \"openshift\" }, { \"name\": \"cluster-region\", \"value\": \"us-south\" } ] } ], \"relevant-evidence\": [ { \"href\": \"https://github.mycorp.com/degenaro/evidence-locker\", \"description\": \"Evidence location.\", \"props\": [ { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"class\": \"id\", \"value\": \"xccdf_org.ssgproject.content_rule_scheduler_profiling_argument\" }, { \"name\": \"time\", \"ns\": \"dns://xccdf\", \"class\": \"timestamp\", \"value\": \"2020-08-03T02:26:26+00:00\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"class\": \"result\", \"value\": \"fail\" }, { \"name\": \"target\", \"ns\": \"dns://xccdf\", \"class\": \"target\", \"value\": \"kube-br7qsa3d0vceu2so1a90-roksopensca-default-0000026b.iks.mycorp\" } ] } ] },","title":"Observations only"},{"location":"tutorials/task.transformer-construction/transformer-construction/#findings-with-observations","text":"To additionally produce Findings, information about the controls associated with each rule-name is required. The control information can be part of the source data itself or can be provided as one or more supplemental metadata files. If each instance of source data includes: inventory-name: cmp-wn-2115.demo.tanium.local rule-name: xccdf_org.cisecurity.benchmarks_rule_19.7.44.2.1_L2_Ensure_Prevent_Codec_Download_is_set_to_Enabled rule-result: fail control-name: 800-53: SC-18 then the best mapping wound be to Findings with Observations. example snippet: xml instance suitable for mapping to Finding with Observation {\"IP Address\":\"10.8.68.218\", \"Computer Name\":\"cmp-wn-2115.demo.tanium.local\", \"Comply - JovalCM Results[c2dc8749]\": [{ \"Benchmark\":\"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\", \"Benchmark Version\":\"1.5.0.1\", \"Profile\":\"Windows 10 - NIST 800-53\", \"ID\":\"xccdf_org.cisecurity.benchmarks_rule_19.7.44.2.1_L2_Ensure_Prevent_Codec_Download_is_set_to_Enabled\", \"Result\":\"fail\", \"Custom ID\":\"800-53: SC-18\", \"Version\":\"version: 1\" } ], \"Count\":\"1\", \"Age\":\"600\" } example snippet: instance OSCAL Finding \"findings\": [ { \"uuid\": \"99c0a0de-e34e-4e22-95a1-1d4f24826565\", \"title\": \"800-53: IA-5\", \"description\": \"800-53: IA-5\", \"collected\": \"2021-03-16T13:29:14.000+00:00\", \"objective-status\": { \"props\": [ { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"class\": \"source\", \"value\": \"NIST 800-53\" }, { \"name\": \"id-ref\", \"ns\": \"dns://tanium\", \"class\": \"source\", \"value\": \"IA-5\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"class\": \"STRVALUE\", \"value\": \"FAIL\" } ], \"status\": \"not-satisfied\" }, \"related-observations\": [ { \"observation-uuid\": \"61092735-e365-4638-bc2c-ecd0ed407e73\" }, { \"observation-uuid\": \"95a20b8e-ed0a-4b6c-bf87-8789265c7158\" }, example snippet: instance OSCAL Observation \"observations\": [ { \"uuid\": \"61092735-e365-4638-bc2c-ecd0ed407e73\", \"description\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\", \"props\": [ { \"name\": \"benchmark\", \"ns\": \"dns://tanium\", \"class\": \"source\", \"value\": \"CIS Microsoft Windows 10 Enterprise Release 1803 Benchmark\" }, { \"name\": \"rule\", \"ns\": \"dns://xccdf\", \"class\": \"id\", \"value\": \"xccdf_org.cisecurity.benchmarks_rule_1.1.1_L1_Ensure_Enforce_password_history_is_set_to_24_or_more_passwords\" }, { \"name\": \"result\", \"ns\": \"dns://xccdf\", \"class\": \"result\", \"value\": \"pass\" }, { \"name\": \"time\", \"ns\": \"dns://xccdf\", \"class\": \"timestamp\", \"value\": \"2021-03-16T13:29:14+00:00\" } ], \"methods\": [ \"TEST-AUTOMATED\" ], \"subjects\": [ { \"uuid-ref\": \"2650b9ba-e767-4381-9a3f-127d1552d7d2\", \"type\": \"inventory-item\" } ] example snippet: local definitions \"results\": [ { \"uuid\": \"98028241-8705-4211-bf36-71e1f7aa6192\", \"title\": \"Tanium\", \"description\": \"Tanium\", \"start\": \"2021-03-16T13:29:14.000+00:00\", \"local-definitions\": { \"inventory-items\": [ { \"uuid\": \"2650b9ba-e767-4381-9a3f-127d1552d7d2\", \"description\": \"inventory\", \"props\": [ { \"name\": \"computer-name\", \"ns\": \"dns://tanium\", \"class\": \" inventory-item\", \"value\": \"cmp-wn-2106.demo.tanium.local\" }, { \"name\": \"computer-ip\", \"ns\": \"dns://tanium\", \"class\": \" inventory-item\", \"value\": \"fe80::3cd5:564b:940e:49ab\" }, { \"name\": \"profile\", \"ns\": \"dns://tanium\", \"class\": \" inventory-item\", \"value\": \"Windows 10\" } ] },","title":"Findings with Observations"},{"location":"tutorials/task.transformer-construction/transformer-construction/#implement-mapping-strategy","text":"The best practice for building a transformer is to employ layers. Recall that the top two layers (in yellow) are for you to implement, while the bottom two layers (in green) are provided by trestle to assist you. Trestle is a Python based multi-faceted platform that simplifies this task by providing a set of Python classes which enforce adherence to the OSCAL schema, insuring that the produced OSCAL validates. file interfacing (read/write files) data processing (in-memory object structure construction) use of OSCAL versioned platform objects (trestle base and oscal functionality)","title":"Implement Mapping Strategy"},{"location":"tutorials/task.transformer-construction/transformer-construction/#file-interfacing","text":"Write a command line tool, for example a trestle task or auditree-arboretum harvest report that: imports the commensurate data processing module reads the input send input to data processing module receives transformed data from data processing module writes the output","title":"File Interfacing"},{"location":"tutorials/task.transformer-construction/transformer-construction/#data-processing","text":"Write a data processing module that receives data, and optionally metadata, for transformation from native form into OSCAL. Separation from the command line file read/write mechanism allows for module re-use. The module should: import the trestle oscal module receive input data to be transformed receive metadata, optionally transform input into trestle oscal classes hierarchy send transformed OSCAL data in return For the Observation only case, the transform is straight forward. Code should create one Observation for each rule/result pair. For the Findings case, a bit more logic is required. Code should accumulate Observations for each Finding and determine an overall status for it. For example, if 15 Observations are found for Finding control AC-3, where 14 have result=PASS and 1 has result=FAIL, then the overall status for the Finding would be not satisfied with overall result=FAIL.","title":"Data Processing"},{"location":"tutorials/task.transformer-construction/transformer-construction/#examples","text":"There are 2 transformers in trestle. The osco-to-oscal transformer emits OSCAL Observations, the simplest partial result. The tanium-to-oscal transformer emits OSCAL Findings, a more complex partial result. Table of approximate lines of code. task-name OSCAL type file interface data processing test cases osco-to-oscal Observations only 275 350 400 tanum-to-oscal Findings, with Observations 200 350 300","title":"Examples"},{"location":"tutorials/task.transformer-construction/transformer-construction/#contributing","text":"Consider contributing your transformer to trestle or auditree-arboretum or other appropriate open source repository.","title":"Contributing"}]}